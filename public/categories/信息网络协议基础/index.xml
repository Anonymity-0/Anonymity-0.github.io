<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>信息网络协议基础 on AGA&#39;s Blog</title>
        <link>https://anonymity-0.github.io/categories/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</link>
        <description>Recent content in 信息网络协议基础 on AGA&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>AGA</copyright>
        <lastBuildDate>Wed, 03 Jan 2024 18:27:05 +0800</lastBuildDate><atom:link href="https://anonymity-0.github.io/categories/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>信息网络协议基础第六章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E5%85%AD%E7%AB%A0/</link>
        <pubDate>Wed, 03 Jan 2024 18:27:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E5%85%AD%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;路由器功能与架构&#34;&gt;路由器功能与架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据路径功能
&lt;ul&gt;
&lt;li&gt;根据分组目的IP地址查找转发表&lt;/li&gt;
&lt;li&gt;通过交换结构转发到输出端口&lt;/li&gt;
&lt;li&gt;输出端口调度和队列管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制面功能
&lt;ul&gt;
&lt;li&gt;运行路由协议，构建路由表&lt;/li&gt;
&lt;li&gt;系统配置和管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;路由查找算法&#34;&gt;路由查找算法&lt;/h2&gt;
&lt;h3 id=&#34;binary-trie&#34;&gt;Binary Trie&lt;/h3&gt;
&lt;p&gt;![[Pasted image 20240102174052.png]]
![[Pasted image 20240102174131.png]]&lt;/p&gt;
&lt;p&gt;####性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最差情况下，查找算法需要遍历Trie的所有层次，所以最差情况下需要有W次存储器访问，W为前缀的最大长度，对于IPv4为32，查找复杂度和更新复杂度为O(W)&lt;/li&gt;
&lt;li&gt;最差情况下，增加一个前缀，需要增加W个节点，存储复杂度为O(NW)，N为转发表中的前缀数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;leaf-pushing&#34;&gt;Leaf Pushing&lt;/h3&gt;
&lt;p&gt;![[Pasted image 20240102174439.png]]&lt;/p&gt;
&lt;h3 id=&#34;path-compression&#34;&gt;Path Compression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Compression：Trie中只有一个子节点的非前缀节点能够被删除&lt;/li&gt;
&lt;li&gt;节点保持Compression相关信息
&lt;ul&gt;
&lt;li&gt;skip value：指示路径上有多少个比特被跳过&lt;/li&gt;
&lt;li&gt;segment：指示最后一次跳过操作以来具体遗漏的比特串
![[Pasted image 20240102175058.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;路径压缩可以有效地减少稀疏binary trie的高度&lt;/li&gt;
&lt;li&gt;在最差情况下，没有压缩的可能，因此采用路径压缩后查询和更新复杂度与binary trie一样，都是O(W)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multi-bit-trie&#34;&gt;Multi-bit Trie&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;查找时同时检查多个比特，称为查找步长（Stride）&lt;/li&gt;
&lt;li&gt;如果前缀长度不为步长的整数倍，则对其进行扩充&lt;/li&gt;
&lt;li&gt;例如步长为3，对于前缀1*可以扩充为100,101,110,111&lt;/li&gt;
&lt;li&gt;步长为k，则Trie中的每个节点的条目数量为2k&lt;/li&gt;
&lt;li&gt;每个条目组成：&amp;lt;下一跳信息，指向下一个子节点的指针（可以为空）&amp;gt;
![[Pasted image 20240102183349.png]]&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;步长为k比特，则查找的复杂度为O(W/k)，W为地址的长度&lt;/li&gt;
&lt;li&gt;更新复杂度O(W/k*2^k),每个节点有2^k个条目&lt;/li&gt;
&lt;li&gt;存储（空间）复杂度O(N*2^k*W/k),N为转发表表项数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;leaf-pushing优化&#34;&gt;Leaf Pushing优化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;节点上的每个条目要么包含一个指针，要么包含下一跳信息&lt;/li&gt;
&lt;li&gt;相当于把下一跳信息Push down到叶子节点&lt;/li&gt;
&lt;li&gt;存储空间减少为1/2
![[Pasted image 20240102183713.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lc-trie构造&#34;&gt;LC Trie构造&lt;/h3&gt;
&lt;p&gt;节点分布稀疏时，Path Compression是压缩Trie的有效途径
固定步长multi-bit能够提高查找性能，但是当节点分布稀疏时存储冗余大  节点分布越密，存储效率越高，完全Trie无冗余！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果Trie的中间节点包含前缀，则进行Leaf Pushing操作，使得Trie中只有叶子节点包含前缀（即为前缀节点）&lt;/li&gt;
&lt;li&gt;通过Path Compression将Trie压缩（就是去掉只有一个孩子的节点）&lt;/li&gt;
&lt;li&gt;当子Trie的结构为完全子Trie时执行Multi-bit查找（完全二叉树只留叶子结点）
在LC Trie中每个节点需要保存：&lt;/li&gt;
&lt;li&gt;Path Compression信息(Skip Value, Segment)&lt;/li&gt;
&lt;li&gt;Multi-bit查找信息 (Stride)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![[Pasted image 20240102185801.png]]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;查找步长为k，则查找复杂度、更新复杂度及存储复杂度与multi-bit Trie相同
&lt;ul&gt;
&lt;li&gt;查找复杂度为O(W/k)，W为地址长度&lt;/li&gt;
&lt;li&gt;更新复杂度为O(W/k*2^k)&lt;/li&gt;
&lt;li&gt;存储（空间）复杂度O(N*2^k*W/k),N为转发表表项数量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tree-bitmap算法&#34;&gt;tree Bitmap算法&lt;/h3&gt;
&lt;h2 id=&#34;交换结构&#34;&gt;交换结构&lt;/h2&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;h4 id=&#34;吞吐量throughput&#34;&gt;吞吐量（Throughput)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;当所有的输入端口以线速承载100%的业务的时候，平均汇聚输出速率和平均汇聚输入速率的比率&lt;/li&gt;
&lt;li&gt;如果所有空闲输入-输出端口对都可以传输数据，则可以认为吞吐量是100%&lt;/li&gt;
&lt;li&gt;线路速率（Line Speed）：简称为线速，交换机端口连接的线路所能达到的最高速率&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;加速speedup&#34;&gt;加速（Speedup）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交换结构的内部转发速率和单个输入端口线速的比值&lt;/li&gt;
&lt;li&gt;如果加速超过1，则输出端口必须使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输出竞争&#34;&gt;输出竞争&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;多个输入端口请求同一个输出端口导致输出竞争
&lt;ul&gt;
&lt;li&gt;由IP业务的突发性导致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内部阻塞&#34;&gt;内部阻塞&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交换结构内部竞争导致内部阻塞
&lt;ul&gt;
&lt;li&gt;无阻塞：空闲输入端口和空闲输出端口之间的连接始终可以被建立
&lt;ul&gt;
&lt;li&gt;空闲端口：没有连接或者没有被请求连接的端口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交换机输出竞争和内部阻塞都会降低吞吐量，但后者是可以避免的，而前者是无法避免的
阻塞一般是指交换结构内部争用所导致，而输出竞争是发生在交换机的输出端口.阻塞和输出竞争是在空分交换中发生，对于时分交换，业务在时间上进行复用可以避免阻塞&lt;/p&gt;
&lt;h3 id=&#34;3代交换结构&#34;&gt;3代交换结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一代：共享存储器交换，交换机速率受限于共享的存储器的访问速度，通常汇聚容量小于0.5Gbps&lt;/li&gt;
&lt;li&gt;第二代：共享媒介交换，交换机速率受限于共享的总线（媒介）速率，通常汇聚容量小于5Gbps&lt;/li&gt;
&lt;li&gt;第三代：空分交换，交换机速率受限于交换结构，通常汇聚容量可达到50Gbps甚至更高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;banyan交换结构&#34;&gt;Banyan交换结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Banyan交换结构为单路径多级交换结构&lt;/li&gt;
&lt;li&gt;多级交换结构一般是由较小的交换单元组成的大的交换系统，也称为交换网络，交换单元常用2×2 Crossbar&lt;/li&gt;
&lt;li&gt;共有log2N级，每一级都有N/2个交换单元，总交叉点数量：Nx=4×N/2× log2N
![[Pasted image 20240102195733.png]]
![[Pasted image 20240102195858.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;输入队列与输出队列&#34;&gt;输入队列与输出队列&lt;/h3&gt;
&lt;p&gt;![[Pasted image 20240102200202.png]]&lt;/p&gt;
&lt;p&gt;![[Pasted image 20240102200038.png]]&lt;/p&gt;
</description>
        </item>
        <item>
        <title>信息网络协议基础第五章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%AB%A0/</link>
        <pubDate>Tue, 02 Jan 2024 18:27:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%AB%A0/</guid>
        <description>&lt;p&gt;•基本概念&lt;/p&gt;
&lt;p&gt;–QoS度量参数；流、行为集合、服务等级协议&lt;/p&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;h3 id=&#34;qos度量参数&#34;&gt;QoS度量参数&lt;/h3&gt;
&lt;p&gt;常用的描述QoS需求的参数包括：带宽、延迟、延迟抖动、突发（峰值）速率、最大突发长度、丢包率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带宽 ：给定介质、协议或连接的额定吞吐量，实际上指应用程序在网络中通信所需要的“管道大小”，也可以认为是用户对网络传输速率的要求
&lt;ul&gt;
&lt;li&gt;最小带宽（最小分组速率）：传输中的最小瞬时速率，可用产生两个相邻分组的最大时间间隔的倒数来表示&lt;/li&gt;
&lt;li&gt;峰值带宽（峰值分组速率）：传输中的最大瞬时速率，可用产生两个相邻分组的最短时间间隔的倒数来表示&lt;/li&gt;
&lt;li&gt;平均带宽（平均分组速率）：一段时间内分组传输的平均速率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟：分组从发送端到达接收端的时间间隔
&lt;ul&gt;
&lt;li&gt;传输延迟：发送分组的第一个比特到发送最后一个比特的时间间隔，取决于发送接口的速率和分组的大小&lt;/li&gt;
&lt;li&gt;传播延迟：发送分组的一个比特到接收端接收到该比特的时间间隔，取决于传输介质和传输距离&lt;/li&gt;
&lt;li&gt;处理延迟：分组从到达节点到进入输出队列的时间间隔，包括对分组头标处理，路由查找等，取决于节点的处理能力和分组处理的复杂度&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;排队延迟：分组从进入输出队列到开始输出的时间间隔，取决于队列长度和调度策略&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;![[Pasted image 20240102164138.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延迟抖动：端到端延迟的变化特性，由延迟的可变部分的变化导致的，流量的突发、不公平的队列调度算法都可能导致较大的延迟抖动&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流&#34;&gt;流&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从一个源到一个目的的有序分组集合被称为一个流（Flow)&lt;/li&gt;
&lt;li&gt;一般来说，流是由特定于具体应用并且具有相同QoS需求的分组所组成&lt;/li&gt;
&lt;li&gt;一个流和一个应用会话（Session）相对应，所以在后面叙述中有时将流的概念和会话的概念等同&lt;/li&gt;
&lt;li&gt;==IP网络中通常用五元组&amp;lt;源IP地址、目的IP地址、源端口号、目的端口号、协议&amp;gt;来标识一个流==&lt;/li&gt;
&lt;li&gt;在面向连接的网络中，属于同一个流的所有分组将会走相同的路径到达目的地 ，在无连接的网络中，属于同一个流的分组可能会走不同的路径到达目的地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行为集合&#34;&gt;行为集合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在路由器上执行相同QoS操作的分组的集合&lt;/li&gt;
&lt;li&gt;多个流如果具有相同的QoS操作，则在路由器上可以汇聚成一个行为集合&lt;/li&gt;
&lt;li&gt;==行为集合有时与类（Class）的概念等同，流可以看作是只有1个流的行为集合或者类==&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持qos操作的路由器功能&#34;&gt;支持QoS操作的路由器功能&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;接纳控制
当应用要求QoS服务时，判断其要求是否能够得到满足，应该是放在每个网络的入口路由器上&lt;/li&gt;
&lt;li&gt;流量调节
检查到达的分组是否满足SLA中设定的QoS水平，如果不满足，实施事先指定的整形操作，包括丢弃、延迟、重标记等&lt;/li&gt;
&lt;li&gt;流量控制
为了满足QoS需求（带宽、丢包率、延迟、延迟抖动等），选择是否向输出链路输出分组以及控制分组的输出顺序（即队列管理和调度），该功能设置在输出端口处&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;两个服务质量模型&#34;&gt;两个服务质量模型&lt;/h2&gt;
&lt;h3 id=&#34;综合服务原理&#34;&gt;综合服务原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;资源预留
&lt;ol&gt;
&lt;li&gt;发送应用通过&lt;font color=&#34;#ff0000&#34;&gt;建立消息&lt;/font&gt;将想发送流的流量特性发送给路径上的每个路由器和接收主机&lt;/li&gt;
&lt;li&gt;路径上路由器在&lt;font color=&#34;#ff0000&#34;&gt;建立消息&lt;/font&gt;中附加上可以提供的QoS信息（例如预测的延迟等）送给接收主机&lt;/li&gt;
&lt;li&gt;接收应用接收&lt;font color=&#34;#ff0000&#34;&gt;预留建立&lt;/font&gt;消息中的QoS信息，决定数据传输所需QoS参数，并将其通过预留消息沿相反路径通知给沿途路由器和发送主机&lt;/li&gt;
&lt;li&gt;路径上的路由器根据&lt;font color=&#34;#ff0000&#34;&gt;预留消息&lt;/font&gt;预留所需网络资源&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据流传输
&lt;ul&gt;
&lt;li&gt;发送主机发送遵循预留规定的数据流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流量调节&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;中间路由器监测数据流是否满足预留规定，如果不满足
&lt;ul&gt;
&lt;li&gt;对于保证型服务，采用整形&lt;/li&gt;
&lt;li&gt;对于受控负载型服务，将不符合的分组转为尽力服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;流量控制
&lt;ul&gt;
&lt;li&gt;路由器根据指定的服务类型，对每个流的分组进行调度和队列管理，实现指定QoS（带宽、延迟等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;综合服务类型&#34;&gt;综合服务类型&lt;/h3&gt;
&lt;p&gt;![[Pasted image 20240102171144.png]]&lt;/p&gt;
&lt;h3 id=&#34;综合服务缺点&#34;&gt;综合服务缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于流的细粒度资源分配，存在可扩展性问题&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;带宽、存储、处理开销随着流的数量的增加而急剧增长&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区分服务原理&#34;&gt;区分服务原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;预先设置PHB
在支持区分服务的网络中，由网络管理员事先在每个路由器上设置行为集合（DSCP）所对应的PHB&lt;/li&gt;
&lt;li&gt;数据传输
应用P直接向接收主机B发送分组，分组到达R1首先进行分类，标记其DSCP为101110，判断其速率是否大于1Mbps，如果是，则进行丢弃整形。R2、R3根据分组DSCP执行相应的PHB，即以1Mbps的速率转发分组
•&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;phb逐跳行为&#34;&gt;PHB（逐跳行为）：&lt;/h3&gt;
&lt;p&gt;在每个节点上描述根据DSCP对特定行为集合（类）进行资源分配的方式，具体由相应的流量控制（队列管理和调度）来实现&lt;/p&gt;
&lt;h4 id=&#34;efphb加速转发型phb&#34;&gt;EFPHB，加速转发型PHB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;提供低丢失率、低延时和低延时抖动的服务&lt;/li&gt;
&lt;li&gt;严格限制EF分组到达路由器的速率小于设定的路由器转发EF分组的速率&lt;/li&gt;
&lt;li&gt;通过在位于网络入口的路由器上限制进入的EF分组不超过某一最大速率，从而实现对EF分组速率的限制&lt;/li&gt;
&lt;li&gt;EF由具体的调度算法来实现&lt;/li&gt;
&lt;li&gt;推荐DSCP为101110（46）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;af确定转发型phb&#34;&gt;AF确定转发型PHB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;比尽力更好的PHB，为用户提供不同级别的转发保证,定义了四个等级，每个等级定义了3个丢弃优先级&lt;/li&gt;
&lt;li&gt;DSCP&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务等级/丢弃优先级&lt;/th&gt;
&lt;th&gt;等级 1&lt;/th&gt;
&lt;th&gt;等级 2&lt;/th&gt;
&lt;th&gt;等级 3&lt;/th&gt;
&lt;th&gt;等级 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;001010&lt;/td&gt;
&lt;td&gt;010010&lt;/td&gt;
&lt;td&gt;011010&lt;/td&gt;
&lt;td&gt;100010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;001100&lt;/td&gt;
&lt;td&gt;010100&lt;/td&gt;
&lt;td&gt;011100&lt;/td&gt;
&lt;td&gt;100100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;001110&lt;/td&gt;
&lt;td&gt;010110&lt;/td&gt;
&lt;td&gt;011110&lt;/td&gt;
&lt;td&gt;100110&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;IP分组转发保证取决于:
&lt;ul&gt;
&lt;li&gt;多少资源分配给此分组所属的AF等级,以及此AF等级当前的负载和拥塞情况&lt;/li&gt;
&lt;li&gt;分组的丢弃优先级
![[Pasted image 20240102171449.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;试图结合综合服务和区分服务的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;综合服务提供细粒度的以流（Flow）为单位的QoS，并且通过资源预留能够保证端到端的QoS,&lt;font color=&#34;#ff0000&#34;&gt;适用于规模较小的接入网络&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;区分服务通过对流进行聚类（BA），并且在路由器上事先设置分组的处理规则（PHB），具有更好的可扩展性,&lt;font color=&#34;#ff0000&#34;&gt;适用于业务流量大的核心网&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在6to4网络中，IPv6地址的前32位是固定的2002，接下来的32位是IPv4地址的16进制表示。因此，路由器R的IPv4地址238.136.16.1对应的16进制表示为EE88:1001。所以，我们可以给子网W1和W2分配的6to4子网前缀如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子网W1的6to4子网前缀：2002:EE88:1001:1::/64&lt;/li&gt;
&lt;li&gt;子网W2的6to4子网前缀：2002:EE88:1001:2::/64&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>信息网络协议基础第三章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
        <pubDate>Tue, 02 Jan 2024 16:12:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;heading&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;cidr&#34;&gt;CIDR&lt;/h3&gt;
&lt;p&gt;•CIDR：Classless Inter-Domain Routing，无类别域间寻路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前Internet采用的IP地址分配方式，1990年代由IETF提出，取代早期的有类别的地址分配方式&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;采用可变长度的网络前缀(network prefix)来取代地址分类中网络号长度固定的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具有相同前缀的IP地址组成CIDR Block，表示为A.B.C.D/N，其中N为前缀长度&lt;/li&gt;
&lt;li&gt;例如202.38.208.0/20&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;前缀汇聚supernetting&#34;&gt;前缀汇聚(Supernetting)&lt;/h4&gt;
&lt;p&gt;前缀汇聚举例
8个连续的/24的CIDR Block可以用一个/21的CIDR Block来表示，因此对外汇聚成一条/21的路由
200.25.16.0/24~200.25.23.0/24&amp;ndash;〉&lt;br&gt;
(0001 0000~0001 0111)&lt;br&gt;
200.25.16.0/21&lt;/p&gt;
&lt;h4 id=&#34;前缀最长匹配longest-prefix-match&#34;&gt;前缀最长匹配(Longest-prefix Match)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在CIDR中，如果路由器上的路由表中有多条表项满足要求，则采用前缀最长匹配规则&lt;/li&gt;
&lt;li&gt;前缀最长匹配：R0上对于目的地址为200.25.22.32的IP分组分组，匹配的路由表表项包括200.25.16.0/21和200.25.22.0/24，但使用最长匹配规则选择200.25.22.0/24&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nat&#34;&gt;NAT&lt;/h3&gt;
&lt;p&gt;根据作用范围的不同，分两种IP地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局IP地址：用于Internet上的分组转发，要求在Internet范围内唯一，&lt;/li&gt;
&lt;li&gt;私有IP地址：用于指定网络内的分组转发，只要求在指定网内部唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本nat只使用ip地址信息&#34;&gt;基本NAT：只使用IP地址信息&lt;/h4&gt;
&lt;p&gt;最简单的NAT还是需要多个全局的IP地址，一般在NAT设备上维护一个address pool，address pool中地址的数量应该多于有访问外部网络需求的主机的数量。&lt;/p&gt;
&lt;h4 id=&#34;网络地址和端口转换napt&#34;&gt;网络地址和端口转换NAPT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;最常用的一种NAT方式&lt;/li&gt;
&lt;li&gt;使用IP地址和TCP/UDP端口号&lt;/li&gt;
&lt;li&gt;NAPT操作不仅仅要修改分组的IP头标，还要修改TCP/UDP头标中的端口号
&lt;ul&gt;
&lt;li&gt;在NAT设备上，虽然内部网络所有的主机共享同一个全局IP地址，但是经过NAT之后不同会话使用的端口号不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;局限性&#34;&gt;局限性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;地址和端口转换将带来比较大的开销&lt;/li&gt;
&lt;li&gt;IP地址和端口号可能存在于载荷的任何位置，因此需要软件针对具体的应用做额外的处理&lt;/li&gt;
&lt;li&gt;并不是所有的数据都是使用UDP或者TCP来传输&lt;/li&gt;
&lt;li&gt;破坏了原有的主机到主机的通信模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ipv6地址&#34;&gt;IPv6地址&lt;/h2&gt;
&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;目前所有IPv6子网的前缀长度都是64比特！&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;类型&#34;&gt;类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;单播地址(Unicast)
&lt;ul&gt;
&lt;li&gt;分配给节点上的某个特定网络接口,目的地为单播地址的分组被转发到该接口上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组播/多播地址(Multicast)
&lt;ul&gt;
&lt;li&gt;分配给一组网络接口，这些网络接口一般位于不同的节点，目的地为组播地址被转发到这组接口上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任播地址(Anycast)
&lt;ul&gt;
&lt;li&gt;分配给一组网络接口,这些网络接口一般位于不同的网络节点，目的地为任播地址的分组被转发到该组接口中距离发送主机最近的节点(依据路由协议度量的最近距离)&lt;/li&gt;
&lt;li&gt;Anycast 地址从单播地址空间分配，只能被分配给路由器，并且不能用作源地址，用于基于UDP的DNS查询（无状态，无连接），应用范围：站点范围，全局使用还需进一步考虑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单播地址&#34;&gt;单播地址&lt;/h3&gt;
&lt;p&gt;有些机制，特别是自动配置机制，所需的信息在子网范围内都可以获得，例如获取目标的MAC地址、获取子网前缀等，不需要全局的IPv6地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链路局部地址（Link-Local）：作用范围为链路，在链路范围内分配
&lt;ul&gt;
&lt;li&gt;前面10比特固定为1111 1110 10，接下来为54比特的0，具有形式&lt;strong&gt;FE80:/64&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Interface ID：标识主机上的特定接口&lt;/li&gt;
&lt;li&gt;链路局部地址总是自动配置，只用于链路范围内的数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;唯一本地地址（Unique Local）：与IPv4私有地址类似，一般限制在组织机构内部使用，但不会被转换成全局单播地址&lt;/li&gt;
&lt;li&gt;全局（Global）：作用范围为全局，在全局范围进行分配
![[Pasted image 20240102122226.png]]
&lt;ul&gt;
&lt;li&gt;前面3比特固定为001，第1个16比特为2000到3FFF&lt;/li&gt;
&lt;li&gt;Global Routing Prefix：全局路由前缀，由服务提供商(ISP)分配给用户站点（Site）的前缀&lt;/li&gt;
&lt;li&gt;Subnet ID：标识特定的子网，一个站点中可能有多个子网&lt;/li&gt;
&lt;li&gt;Interface ID：标识主机上的特定接口，大多数情况下长度为64&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单播地址的组成
![[Pasted image 20240102122046.png]]&lt;/p&gt;
&lt;h3 id=&#34;组播地址&#34;&gt;组播地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;前面8比特固定为1111 1111，具有形式FF::/8&lt;/li&gt;
&lt;li&gt;Flags 4bit: 指示组播地址是永久的还是临时的等信息&lt;/li&gt;
&lt;li&gt;Scope 4bits：指示组播的范围
&lt;ul&gt;
&lt;li&gt;0010 Link-local scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Group ID 112bits：标识组播组，在Scope作用范围内唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常用组播地址&#34;&gt;常用组播地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全节点地址： FF02::1(link-local) &lt;/li&gt;
&lt;li&gt;全路由器地址: FF02::2(link-local) &lt;/li&gt;
&lt;li&gt;被请求节点地址（Solicited-node address）
&lt;ul&gt;
&lt;li&gt;例如: 4037::01:800:200E:8C6C ➡️&lt;font color=&#34;#ff0000&#34;&gt;FF02::1:FF&lt;/font&gt;0E:8C6C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ipv6组播地址到mac地址映射&#34;&gt;IPv6组播地址到MAC地址映射&lt;/h4&gt;
&lt;p&gt;网络接口维护一个感兴趣的目的MAC地址列表，包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口的单播MAC地址&lt;/li&gt;
&lt;li&gt;广播MAC地址FF:FF:FF:FF:FF:FF&lt;/li&gt;
&lt;li&gt;IPv6组播地址所对应的MAC地址(如果网络接口所在节点加入到组播组，有些组播组是必须加入的，例如全节点组播组，被请求节点地址对应的组播组)
例子：
       IPv6主机具有MAC地址00:AA:00:3F:2A:1C（链路局部地址为FE80:2AA:FF:FE3F:2A1C），其网络接口感兴趣的目的MAC地址表除包含广播MAC地址 FF:FF:FF:FF:FF:FF外，还包括以下组播MAC地址：
       33:33:00:00:00:01，对应着链路局部范围内的全节点组播地址FF02::1
       33:33:FF:3F:2A:1C，对应着被请求节点地址FF02::1:FF:3F:2A1C&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特殊地址&#34;&gt;特殊地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;未指明地址：全0(::)
&lt;ul&gt;
&lt;li&gt;没有有效地址的时候使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回环地址（::1）
&lt;ul&gt;
&lt;li&gt;指代网络节点本身&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv6网络中的邻居发现机制&#34;&gt;IPv6网络中的邻居发现机制&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;邻居发现机制基于ICMPv6消息实现，通过ICMPv6消息管理同一链路上的节点到节点通信（网络层机制&lt;/font&gt;）
&lt;font color=&#34;#ff0000&#34;&gt;用于邻居发现的ICMPv6消息的IPv6地址为链路局部地址，Hop limit为255，从而将邻居发现消息限制在链路范围内&lt;/font&gt;
邻居发现机制中地址的选择遵循以下原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;源地址：如果节点没有任何有效地址，那么发数据时使用::作为源地址&lt;/li&gt;
&lt;li&gt;目的地址：如果节点不知道目的的任何地址包括IPv6地址，则使用FF02::1或者FF02::2
如果节点知道目的的IP地址，但不知道MAC，则使用该IP地址对应的被请求节点地址&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;地址解析&#34;&gt;地址解析&lt;/h4&gt;
&lt;p&gt;确定邻居节点的链路层地址（MAC地址）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过在节点之间交换邻居请求(NS)和邻居公告(NA)消息来完成&lt;/li&gt;
&lt;li&gt;网络层机制：NS和ND均为ICMPv6消息
过程&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;判断是否需要进行地址解析过程
&lt;ul&gt;
&lt;li&gt;每个节点维护邻居缓存：邻居IPv6地址&amp;lt;&amp;mdash;&amp;gt;MAC地址&lt;/li&gt;
&lt;li&gt;查找邻居缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据需要开始地址解析过程
&lt;ol&gt;
&lt;li&gt;发送节点发送邻居请求（NS）：组播发送，包含要解析的IPv6地址（目标地址）&lt;/li&gt;
&lt;li&gt;目标节点接收并处理NS，响应邻居公告（NA））：单播发送，包含目标节点MAC地址&lt;/li&gt;
&lt;li&gt;发送节点更新邻居缓存
&lt;strong&gt;例子&lt;/strong&gt;
![[Pasted image 20240102135406.png]]
![[Pasted image 20240102135501.png]]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;地址重复检测&#34;&gt;地址重复检测&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;自动配置地址最重要的是保证地址不重复&lt;/li&gt;
&lt;li&gt;为什么IPv6地址只要保证在链路上不重复就可以？&lt;/li&gt;
&lt;li&gt;地址重复检测 (DAD)：基于邻居请求（NS）/邻居公告（NA）来实现
&lt;ul&gt;
&lt;li&gt;节点发送NS，其中包含要检测的IPv6地址&lt;/li&gt;
&lt;li&gt;如果收到相应的NA，则检测到重复，节点不会使用重复的地址，否则开始使用该IPv6地址
&lt;ul&gt;
&lt;li&gt;检测到地址重复后的具体处理依赖于实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;![[Pasted image 20240102135711.png]]&lt;/li&gt;
&lt;li&gt;![[Pasted image 20240102135736.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;路由器发现&#34;&gt;路由器发现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相关消息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器公告消息（RA）&lt;/li&gt;
&lt;li&gt;路由器请求消息（RS： Router Solicitation）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被动式
&lt;ol&gt;
&lt;li&gt;IPv6路由周期性（例如200s）公告RA：组播发送，使用FF02::1&lt;/li&gt;
&lt;li&gt;同一链路上的IPv6主机接收RA消息，并且使用其内容来配置或者维护网络参数设置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;主动式
&lt;ol&gt;
&lt;li&gt;IPv6主机主动发送路由器请求RS：组播发送，使用&lt;strong&gt;FF02::2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;同一链路上的路由器响应RA：单播或者组播方式发送&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;![[Pasted image 20240102140212.png]]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;![[Pasted image 20240102140307.png]]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv6地址自动配置过程&#34;&gt;IPv6地址自动配置过程&lt;/h3&gt;
&lt;p&gt;IPv6节点上地址自动配置过程（基于EUI-64地址）
1.路由器发现过程：主机发送路由器请求（RS）消息，路由器响应路由器公告（RA）消息，获取子网前缀等信息
2.基于FE80::/64 和 EUI-64地址生成的接口标识生成链路局部地址，设置为尝试（Tentative）状态
2.执行地址重复检测(DAD)过程
3.若DAD成功，将其设置为有效（Valid/Preferred）状态
4.&lt;font color=&#34;#ff0000&#34;&gt;将链路局部地址的被请求节点地址所对应的组播MAC加到网络接口的感兴趣MAC地址表中&lt;/font&gt;
5. 根据RA中包含的其它信息进行缺省路由等网络参数的配置
&lt;strong&gt;全局 IPv6 地址=IPv6 前缀 64bits+lpv6 接口标识 64bits&lt;/strong&gt;
eg.BC:AE:C5:C2:07:21
一、IPv6借口标识生成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MAC地址 U/L 位取反：&lt;font color=&#34;#ff0000&#34;&gt;BC（1100)&lt;/font&gt;:AE:C5:C2:07:21- &lt;font color=&#34;#ff0000&#34;&gt;BE （1110&lt;/font&gt;):AE:C5:C2:07:21&lt;/li&gt;
&lt;li&gt;第三个和第四个字节之间插入 &lt;font color=&#34;#ff0000&#34;&gt;FFFE&lt;/font&gt;，变为&lt;font color=&#34;#ff0000&#34;&gt;BE-AE-C5-FF-FE-C2-07-21&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;写成冒号 16 进制,&lt;font color=&#34;#ff0000&#34;&gt;BEAE:CSFF:FEC2:721&lt;/font&gt;
二、全局 IPv6地址:&lt;font color=&#34;#00b0f0&#34;&gt;2002:1:0:3&lt;/font&gt;:&lt;font color=&#34;#ff0000&#34;&gt;BEAE:C5FF:FEC2:721&lt;/font&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;路由表&#34;&gt;路由表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个路由器和主机都维护路由表（转发表）
&lt;ul&gt;
&lt;li&gt;&amp;lt;目的网络/目的主机、下一跳IP地址、…..&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv4ipv6过渡机制&#34;&gt;IPv4/IPv6过渡机制&lt;/h3&gt;
&lt;h4 id=&#34;手工配置隧道&#34;&gt;手工配置隧道&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对每个IPv6分组，都事先手工配置它所对应的隧道的端点，主要是用于隧道封装所需的IPv4地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自动配置隧道&#34;&gt;自动配置隧道&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;分组中所包含的IPv6地址和/或路由的下一跳决定隧道的端点，主要是指用于隧道封装所需的IPv4地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;isatap&#34;&gt;ISATAP&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;0:5EFE:w.x.y.z，w.x.y.z为私有单播IPv4地址&lt;/li&gt;
&lt;li&gt;200:5EFE:w.x.y.z  w.x.y.z为公共（全局）单播IPv4地址
eg，RI 为ISATAP路由器，为支持 IPv6-in-IPv4 隧道，R1 在网络1中公告IPv6 前缀 &lt;font color=&#34;#245bdb&#34;&gt;2002:1:0:1::/64&lt;/font&gt;，主机 A的IPV4地址：&lt;font color=&#34;#245bdb&#34;&gt;160:0:0:2&lt;/font&gt;，主机 A 的 ISTAP地址？
全局：&lt;font color=&#34;#ff0000&#34;&gt;2002:1::1&lt;/font&gt;:200:5EFE:&lt;font color=&#34;#245bdb&#34;&gt;160.0.0.2&lt;/font&gt;或2002:1:0:1:200:5EFE:160.0.0.2
链路局部：&lt;font color=&#34;#ff0000&#34;&gt;FE80&lt;/font&gt;::200:5EFE:160.0.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;试着写出ISSTAP路由表，假设前缀为2001:DB8:0:7::/64
host：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;2001:DB8:0:7::/64. On-Link&lt;/font&gt;
同一网段的路由器&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;FE80&lt;/font&gt;::200:5EFE:路由器端口ipv4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;router&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;2001:DB8:0:7::/64. On-Link&lt;/font&gt;
不同的端口&lt;/li&gt;
&lt;li&gt;&amp;lt;\下一个router的前缀，连接下一个router的端口ip&amp;gt;&lt;/li&gt;
&lt;li&gt;如果没有前缀，就写为::/0&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;6to4&#34;&gt;6to4&lt;/h5&gt;
&lt;p&gt;根据分配给组织机构的全局（公共）IPv4地址，可以生成并且使用48比特全局IPv6地址前缀（&lt;font color=&#34;#ff0000&#34;&gt;2002:WWXX:YYZZ::/48&lt;/font&gt;）&lt;/p&gt;
&lt;p&gt;路由一定有一条：&lt;font color=&#34;#ff0000&#34;&gt;2002:/16 On-Link&lt;/font&gt; Throughthe 6to4 Interface
host指向同一网段的路由器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2002:xxxxx
router指 目的，下一跳&lt;/li&gt;
&lt;li&gt;&amp;lt;\下一个router的前缀，连接下一个router的端口ip&amp;gt;
–手动隧道配置、自动隧道（ISATAP、6to4）原理和配置&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>信息网络协议基础第四章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E7%AC%AC%E5%9B%9B%E7%AB%A0-ip%E7%BD%91%E7%BB%9C%E7%A7%BB%E5%8A%A8%E7%AE%A1%E7%90%86/</link>
        <pubDate>Tue, 02 Jan 2024 13:27:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E7%AC%AC%E5%9B%9B%E7%AB%A0-ip%E7%BD%91%E7%BB%9C%E7%A7%BB%E5%8A%A8%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;移动切换&#34;&gt;移动切换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;两种切换情况
&lt;ul&gt;
&lt;li&gt;切换涉及的AP在同一个网络中-链路层切换
&lt;ul&gt;
&lt;li&gt;链路层切换不改变IP地址，执行链路层操作&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;不改变五元组，对应用会话无影响&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切换涉及的AP在不同的网络中-网络层切换
&lt;ul&gt;
&lt;li&gt;不同网络不同AP之间的切换首先执行链路层切换，再执行网络层切换，进行网络相关参数配置&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;移动节点IP地址发生变化&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;如何消除切换对应用会话的影响？
&lt;ul&gt;
&lt;li&gt;应用层解决方案：需要应用支持，本质上是重新建立IP会话&lt;/li&gt;
&lt;li&gt;网络层解决方案：需要增强网络协议，对应用透明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用会话大多通过五元组来标识
&lt;ul&gt;
&lt;li&gt;&amp;lt;源/目的IP地址、协议、源/目的端口号&amp;gt;&lt;/li&gt;
&lt;li&gt;不同的五元组对应着不同的应用会话&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移动ipv6&#34;&gt;移动IPv6&lt;/h2&gt;
&lt;p&gt;– 基本原理、如何对上层应用屏蔽移动性？&lt;/p&gt;
&lt;h3 id=&#34;基本关键词&#34;&gt;基本关键词&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;家乡地址(HoA)：移动节点的标识，手动配置或者由家乡网络分配，通常不变&lt;/li&gt;
&lt;li&gt;转交地址(CoA)：移动节点位置的标识，由移动到的外地网络分配，随位置变化&lt;/li&gt;
&lt;li&gt;HoA与CoA的对应关系称为绑定(Binding)&amp;lt;HoA, CoA&amp;gt;&lt;/li&gt;
&lt;li&gt;家乡代理(Home Agent)：保存移动节点的家乡地址和转交地址之间的映射关系(绑定)
IP分组先发送到家乡代理，由家乡代理发送给移动节点！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;过程&#34;&gt;过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;移动检测
&lt;ul&gt;
&lt;li&gt;移动节点检测到自己移动到了外地网络&lt;/li&gt;
&lt;li&gt;路由器公告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转交地址配置&lt;/li&gt;
&lt;li&gt;&amp;lt;家乡地址、转交地址&amp;gt;的绑定注册
&lt;ul&gt;
&lt;li&gt;到家乡代理&lt;/li&gt;
&lt;li&gt;到通信对端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;家乡代理拦截到移动节点地址的分组&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对ip以上层屏蔽移动性&#34;&gt;对IP以上层屏蔽移动性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;双向隧道模式
&lt;ul&gt;
&lt;li&gt;移动节点和通信对端的通信始终使用家乡地址进行通信&lt;/li&gt;
&lt;li&gt;移动节点的移动由家乡代理跟踪，对于通信对端来说是透明的&lt;/li&gt;
&lt;li&gt;所有的通信都必须通过家乡代理转发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由优化模式
通信对端知道移动节点当前的转交地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pmipv6&#34;&gt;PMIPv6&lt;/h2&gt;
&lt;h3 id=&#34;引入原因&#34;&gt;引入原因•&lt;/h3&gt;
&lt;p&gt;为什么引入代理移动IPv6？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更加易于部署&lt;/li&gt;
&lt;li&gt;更加易于管理&lt;/li&gt;
&lt;li&gt;更好的性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;网络端控制的移动管理
&lt;ul&gt;
&lt;li&gt;在网络中引入一个功能实体代理移动节点执行与家乡代理之间的信令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地移动管理
&lt;ul&gt;
&lt;li&gt;在本地管理域中引入一个类似家乡代理的功能实体，负责管理域内的移动管理操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>信息网络协议基础第二章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%8C%E7%AB%A0/</link>
        <pubDate>Tue, 02 Jan 2024 11:54:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%8C%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;接入网&#34;&gt;接入网&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用来把用户网络或者设备接入到Internet的网络&lt;/li&gt;
&lt;li&gt;也被称为最后1公里接入&lt;/li&gt;
&lt;li&gt;宽带接入成为主流（FCC [2010]: 4Mbps downstream/1Mbps upstream)&lt;/li&gt;
&lt;li&gt;DSL、Cable、Fibre、Wireless Broadband (Fixed/Mobile)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用接入网类型&#34;&gt;常用接入网类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于ATM架构类
&lt;ul&gt;
&lt;li&gt;传统电信网络：&lt;font color=&#34;#ff0000&#34;&gt;点对点&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;DSL（数字用户线路）
&lt;ul&gt;
&lt;li&gt;对称DSL
&lt;ul&gt;
&lt;li&gt;下行和上行速率相同SHDSL(利用了话音带宽）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非对称DSL
&lt;ul&gt;
&lt;li&gt;下行速率一般大于上行速率&lt;/li&gt;
&lt;li&gt;ADSL&lt;/li&gt;
&lt;li&gt;ADSL2+:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于IEEE 802参考模型的局域网架构类
&lt;ul&gt;
&lt;li&gt;新兴IP网络：&lt;font color=&#34;#ff0000&#34;&gt;共享&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;以太网（802.3）、无线局域网（802.11）、甚至包括无线城域网（802.16）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;光纤接入类
&lt;ul&gt;
&lt;li&gt;基于ATM：APON、GPON&lt;/li&gt;
&lt;li&gt;基于以太网：EPON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atm&#34;&gt;ATM&lt;/h2&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ATM： Asynchronous Transfer Mode，异步传输模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;既可用于接入网，也可以用于核心网&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向连接的分组交换/虚电路交换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q.2931：连接建立信令&lt;/li&gt;
&lt;li&gt;信元：基本交换单位，固定长度（5字节头标＋48字节数据）&lt;/li&gt;
&lt;li&gt;==为什么选择固定长度（53字节）的信元？==
&lt;ul&gt;
&lt;li&gt;==1）构建硬件简单==&lt;/li&gt;
&lt;li&gt;==2）交换单元并行处理==&lt;/li&gt;
&lt;li&gt;==3）队列行为优化：控制延迟、提高队列处理效率==&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信元&#34;&gt;信元&lt;/h3&gt;
&lt;p&gt;队列优化举例：
假设：链路带宽100Mbps，队列中的分组具有不同的优先级
变长分组网络：最大分组长度为4KB，在交换机开始传输一个4KB的分组之后到达一个高优先级的分组，必须在队列中等待327.68us才能通过输出端口传输（4KB= 32768b）
ATM网络：信元固定长度为53B，最长等待时间将是53×8/100=4.24us，而且这个时间是固定的
结论：使用固定长度信元具有控制延迟的能力，特别是控制延迟抖动的能力，这对某些应用例如实时应用非常重要&lt;/p&gt;
&lt;h3 id=&#34;业务类型&#34;&gt;业务类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CBR业务  Constant Bit Rate
&lt;ul&gt;
&lt;li&gt;提供&lt;font color=&#34;#ff0000&#34;&gt;最高程度&lt;/font&gt;的服务质量保证，保证带宽、延迟抖动&lt;/li&gt;
&lt;li&gt;话音、视频等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VBR业务  Variable Bit Rate
&lt;ul&gt;
&lt;li&gt;业务产生的数据可能是突发的，要求延迟抖动小&lt;/li&gt;
&lt;li&gt;具有突发性，可保证最大延迟，压缩话音、视频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ABR业务  Available Bit Rate
&lt;ul&gt;
&lt;li&gt;利用剩余带宽，根据网络可用带宽和拥塞状态来调整传输速率&lt;/li&gt;
&lt;li&gt;文件传输、email等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UBR业务  Unspecified Bit Rate
&lt;ul&gt;
&lt;li&gt;利用剩余带宽，对延迟和延迟抖动没有严格要求的业务&lt;/li&gt;
&lt;li&gt;文件传输、email等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;虚电路&#34;&gt;虚电路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虚电路VPI和VCI来标识
&lt;ul&gt;
&lt;li&gt;VPI：Virtual Path Identification，虚路径标识&lt;/li&gt;
&lt;li&gt;VCI：Virtual Channel Identification，虚通道标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why VPI+VCI？
&lt;ul&gt;
&lt;li&gt;VPI用于网络的主干中进行切换。它在ATM交换机上起到多路复用/解复用的作用，将来自各种源（ATM接口）的虚拟信道（VCs）汇聚到一个接口上的虚拟路径&lt;/li&gt;
&lt;li&gt;另一方面，VCI用于在私有网络内标识连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Permanent Virtual Circuit (PVC)
&lt;ul&gt;
&lt;li&gt;PVC是一种永久建立的连接，它使得在节点之间的物理连接上创建逻辑连接成为可能，这些节点经常或连续地进行通信&lt;/li&gt;
&lt;li&gt;网络设备的VPI/VCI表格可以由管理员进行更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switched Virtual Circuit (SVC)
&lt;ul&gt;
&lt;li&gt;Switched Virtual Circuit (SVC) 是一种在数据通信网络中在两个网络设备之间建立的临时逻辑连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信元格式&#34;&gt;信元格式&lt;/h3&gt;
&lt;p&gt;![[图片 1.png]]&lt;/p&gt;
&lt;h3 id=&#34;aal&#34;&gt;AAL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信元载荷的格式由AAL来决定
&lt;ul&gt;
&lt;li&gt;AAL：ATM Adaptation Layer，ATM适配层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why AAL？
&lt;ul&gt;
&lt;li&gt;ATM可以用来承载可变长度的分组（例如IP分组），而ATM信元长度是固定的。&lt;/li&gt;
&lt;li&gt;![[Pasted image 20240102101545.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;•根据传输业务的不同，分为AAL1～AAL5
&lt;ul&gt;
&lt;li&gt;AAL1：CBR、面向连接业务，例如恒定速率的音频和视频&lt;/li&gt;
&lt;li&gt;AAL2：VBR业务，面向连接的业务，例如可变速率的音频和视频&lt;/li&gt;
&lt;li&gt;AAL3/4：VBR、面向连接和无连接业务&lt;/li&gt;
&lt;li&gt;AAL5：AAL3/4的简化版。最常用，&lt;strong&gt;用来承载IP分组&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;atm与点对点链路&#34;&gt;ATM与点对点链路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在电话线接入中
&lt;ul&gt;
&lt;li&gt;服务提供商事先给每个客户都事先分配了固定的VPI/VCI，大多使用PVC&lt;/li&gt;
&lt;li&gt;为了便于管理，服务提供商一般通过PPP over ATM技术，将PVC变成一个逻辑的点对点链路集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ppp&#34;&gt;PPP&lt;/h2&gt;
&lt;h3 id=&#34;概述-1&#34;&gt;概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PPP是个数据链路层协议 ，通过PPP，完成：
&lt;ol&gt;
&lt;li&gt;链路建立、维护和终结&lt;/li&gt;
&lt;li&gt;用户认证&lt;/li&gt;
&lt;li&gt;网络参数协商，包括IP地址分配等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对于接入服务器来说，每条PPP链路的另一端对应着一个用户，因此便于认证、计费和管理
&lt;ul&gt;
&lt;li&gt;PPP链路的两端对应着通信双方，因此不存在寻址问题&lt;/li&gt;
&lt;li&gt;接入服务器要和AAA服务器(例如RADIUS)配合工作，以完成认证、计费等功能
&lt;ul&gt;
&lt;li&gt;AAA：认证、授权、计费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议&#34;&gt;协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PPP：Point to Point Protocol
&lt;ul&gt;
&lt;li&gt;在点对点链路上传输多种协议数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协议构成
&lt;ul&gt;
&lt;li&gt;封装方法
&lt;ul&gt;
&lt;li&gt;封装各种协议数据的方法&lt;/li&gt;
&lt;li&gt;在同一条链路上同时复用各种不同的网络层协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链路控制协议（LCP：Link Control Protocol）
&lt;ul&gt;
&lt;li&gt;建立、配置、维护和终结链路&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;认证协议
&lt;ul&gt;
&lt;li&gt;PAP、CHAP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络控制协议（NCP：Network Control Protocol）
&lt;ul&gt;
&lt;li&gt;建立和配置各种不同的网络层协议&lt;/li&gt;
&lt;li&gt;对于不同的网络层协议定义有不同的NCP，例如对于IP协议是IPCP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PPP over ATM缺乏有效的QoS和组播支持能力
&lt;ul&gt;
&lt;li&gt;业务均为ATM UBR类型，提供尽力服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;视频、高质量音频、实时视频会议等服务质量要求高的应用必须选择原始的ATM协议栈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adsl&#34;&gt;ADSL&lt;/h2&gt;
&lt;h3 id=&#34;概述-2&#34;&gt;概述&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;早期电话拨号：局端过滤300Hz~ 3.4KHz 范围外的非话音频率&lt;/li&gt;
&lt;li&gt;电话线的带宽&amp;gt; &amp;gt;4kHz（可用带宽2MHz左右。&lt;/li&gt;
&lt;li&gt;ADSL：ADSL将用户线路接到没有滤波器的线路上&lt;/li&gt;
&lt;li&gt;频率在26khz以上的信号被分离到DSLAM(用户数字线访问复用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关键技术&#34;&gt;关键技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;调制技术：DMT&lt;/li&gt;
&lt;li&gt;关键设备：DSLAM&lt;/li&gt;
&lt;li&gt;体系结构：ATM、PPPOE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在大多使用ADSL Router取代ADSL MODEM，可以由ADSL Router直接进行PPPOE拨号；也可以是ADSL Router+宽带路由器，由宽带路由器执行PPPOE拨号。&lt;/p&gt;
&lt;h3 id=&#34;dmt&#34;&gt;DMT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DMT：离散多音（Discrete Multi-Tone），用于ADSL的调制方法&lt;/li&gt;
&lt;li&gt;利用电话线的1104KHz带宽，划分为256个载波（多音，子信道），每个子信道带宽为4.3125KHz
&lt;ul&gt;
&lt;li&gt;子信道0（0～4.3125KHz）：传统电话业务&lt;/li&gt;
&lt;li&gt;子信道1~5（4.3125～25.875KHz）：保护频带&lt;/li&gt;
&lt;li&gt;子信道6～31（25.875～138KHz）：26个上行信道&lt;/li&gt;
&lt;li&gt;子信道32～255（138～1104KHz）：224个下行信道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双向数据传输时，为了避免上行和下行之间的干扰，在31～32附近的信道不被使用（保护频带，位于138KHz左右）&lt;/li&gt;
&lt;li&gt;速率自适应：DMT以自适应的方式分配各个子信道的速率，以达到最佳的传输线路利用率，例如让信噪比较高的信道传送更多的位，关闭被窄频噪声所覆盖的子信道&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adsl带宽分析&#34;&gt;ADSL带宽分析&lt;/h3&gt;
&lt;h3 id=&#34;dslam&#34;&gt;DSLAM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DSLAM：Digital Subscriber Line Access Multiplexer，数字用户线路访问复用器
&lt;ul&gt;
&lt;li&gt;将基于各种DSL技术的数字用户线路，包括ADSL，VDSL和SH.DSL，连接到运营商网络&lt;/li&gt;
&lt;li&gt;DSLAM分为两侧，即用户侧和网络侧&lt;/li&gt;
&lt;li&gt;用户侧：DSLAM和Modem之间始终为ATM over DSL，即来自主机的以太帧被封装成ATM信元，然后通过DSL传输&lt;/li&gt;
&lt;li&gt;网络侧：早期为ATM，但是随着IP的普及，ATM逐渐被以太网所取代，这也代表了DSLAM的发展方向（IP化）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pppoe&#34;&gt;PPPOE&lt;/h3&gt;
&lt;h4 id=&#34;why-pppoe&#34;&gt;Why PPPOE?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;用户希望能够通过一个CPE设备（用户前端设备，例如ADSL Modem）来接入多台主机&lt;/li&gt;
&lt;li&gt;实际网络运行经验表明，以太网（Ethernet）是一种有效而且成本很低的多主机接入技术，但是以太网不支持认证、计费等功能。运营上同时希望能够实现基于用户的访问控制和计费功能。在传统的拨号网络中，通过PPP可以对用户进行认证、计费&lt;/li&gt;
&lt;li&gt;一个自然的想法就是把以太网和PPP这两种技术结合起来，因此引入了PPPOE（PPP over Ethernet），在以太网上建立PPP连接，本质是在多路访链路上提供一条逻辑的点对点链路，也被称为PPPOE会话。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pppoe分为两个阶段&#34;&gt;PPPOE分为两个阶段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;发现阶段&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;为了在以太网上建立PPP会话，通信双方必须知道对方的MAC地址，并且协商一个唯一的会话标识（Session_ID）&lt;/li&gt;
&lt;li&gt;主机发现网络中所有可用的BRAS（MAC地址），并且选择一个BRAS为其提供接入服务&lt;/li&gt;
&lt;li&gt;无状态，不会分配任何资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;PPP会话阶段&lt;/font&gt;
&lt;ul&gt;
&lt;li&gt;标准的PPP过程，当PPP会话建立后，主机和BRAS为PPP会话分配资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pppoe帧格式&#34;&gt;PPPOE帧格式&lt;/h4&gt;
&lt;p&gt;类型: &lt;font color=&#34;#ff0000&#34;&gt;0x8863  用于Discovery阶段的帧 0x8864 用于PPP会话阶段&lt;/font&gt;
Code：&lt;font color=&#34;#ff0000&#34;&gt;0x00  PPP会话阶段、0x09 PADI、0x07 PADO、0x19  PADR、0x65 PADS、0xa7 PADT&lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;pppoe的特点&#34;&gt;PPPOE的特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过PPPOE会话的建立和释放进行基于时间或者流量的统计，计费方式灵活方便&lt;/li&gt;
&lt;li&gt;动态IP地址配置和管理&lt;/li&gt;
&lt;li&gt;与传统拨号上网类似，提供基于用户名和密码的认证&lt;/li&gt;
&lt;li&gt;由于存在多层协议封装，开销大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;局域网&#34;&gt;局域网&lt;/h2&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;
&lt;p&gt;局域网（LAN：Local Area Network）被定义为一个广播域，即在局域网内目的地址为广播地址的IP分组或者数据链路层帧会被所有的网络节点接收和处理
以太网是应用最广泛的局域网技术，对应着IEEE 802.3&lt;/p&gt;
&lt;h3 id=&#34;局域网参考模型&#34;&gt;局域网参考模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据链路层被划分为两个子层，即逻辑链路控制(LLC)子层和媒介访问控制(MAC)子层
&lt;ul&gt;
&lt;li&gt;在传统的点对点链路控制中没有管理访问共享媒介的逻辑需求 ， MAC子层负责对共享链路访问进行控制&lt;/li&gt;
&lt;li&gt;对于相同的LLC子层，可以提供不同的MAC子层
&lt;ul&gt;
&lt;li&gt;常用以太网、无线局域网等局域网具有相同的LLC子层，只是MAC子层不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;llc&#34;&gt;LLC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;功能：传输服务/ 到上层的服务接口/流量控制等&lt;/li&gt;
&lt;li&gt;LLC是一个对所有LAN都相同的链路层协议，它定义了两个用户之间数据交换的机制，提供了三种可选的服务
&lt;ul&gt;
&lt;li&gt;无确认的非连接服务（Unacknowledged Connectionless Service）&lt;/li&gt;
&lt;li&gt;连接模式服务（Connection-mode Service）&lt;/li&gt;
&lt;li&gt;确认无连接服务（Acknowledged Connectionless Service）
设备厂商将LLC服务作为可选项提供给客户，客户可以根据自己应用的需求选择合适的服务
在大多数情况下，无确认的非连接服务是优先考虑的选项，但在一些不可靠的网络环境，例如无线网络，一般使用确认无连接服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mac&#34;&gt;MAC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：寻址/访问控制/差错控制/移动管理等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重点解决共享链路访问控制问题，具体的MAC机制与传输媒介的物理特性相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有线：以太网、光网络等&lt;/li&gt;
&lt;li&gt;无线：无线局域网、无线城域网等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSMA/CD是最经典的MAC机制，在以太网（802.3）中使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么引入MAC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;寻址问题&lt;/font&gt;：在共享链路上，任何主机都能够接收其它主机发送的数据，因此需要一种机制来指明数据的接收者&lt;/li&gt;
&lt;li&gt;主机发送数据时以帧为单位，帧的头标中包含了接收这个帧的目的地址，即目的MAC地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;共享链路问题&#34;&gt;共享链路问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;访问控制问题&lt;/font&gt;：在共享链路上，需要一种机制协调所有主机之间的数据发送，以公平竞争访问链路。
&lt;ul&gt;
&lt;li&gt;解决方法：每个数据帧都有最大长度限制（数据域部分不超过1500字节），发送完后主机之间要重新使用CSMA/CD机制协调对共享链路的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;冲突
&lt;ul&gt;
&lt;li&gt;也叫做碰撞，由多台主机争用传输介质引起的。当连接在共享链路上的两台或两台以上主机同时发送数据时，表示这些数据的信号将在同一段传输介质上叠加，从而导致无法被接收主机正确接收。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;csmacd&#34;&gt;CSMA/CD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;载波侦听（Carrier Sense）：当某台主机想要发送数据时，它首先侦听媒介是否忙，如果是，表示当前有其它主机正在传输数据，因此将继续侦听，直到媒介空闲，然后发送数据&lt;/li&gt;
&lt;li&gt;冲突检测（Collision Detection）：如果主机在数据发送过程中检测到冲突，则发送干扰信号（jamming signal），以确保所有主机都知道发生了冲突，并且取消发送
&lt;ul&gt;
&lt;li&gt;当检测冲突后，将等待一个随机的时间，也称作退避（backoff）&lt;/li&gt;
&lt;li&gt;二进制指数退避算法（binary exponential backoff）来确定随机等待时间时间被划分为离散的时槽，一般设置为51.2us 当第k次冲突发生后，从集合{0，1，….，2k-1}中随机选择一个数r，然后等待r个时槽。如果k&amp;gt;=10，则保持集合{0，1，….，210-1} 不变。如果k&amp;gt;16，则放弃发送，并产生错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式协调功能dcfdistributed-coordination-function&#34;&gt;分布式协调功能DCF（Distributed Coordination Function）&lt;/h3&gt;
&lt;p&gt;&lt;font color=&#34;#ff0000&#34;&gt;冲突避免CA而不是冲突检测CD，在无线环境下很难检测到冲突&lt;/font&gt;
两种CSMA/CA操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本CSMA/CA：采用物理信道侦听方法 ，该操作强制要求必须使用&lt;/li&gt;
&lt;li&gt;扩展CSMA/CA：采用虚拟信道侦听方法，使用两个控制帧，即RTS/CTS，可解决隐藏站点问题，该操作是可选的，可以根据需要配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本csmaca&#34;&gt;基本CSMA/CA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;包括载波侦听和冲突避免两个过程&lt;/li&gt;
&lt;li&gt;载波侦听 ：站点在发送帧之前侦听无线信道是否空闲，如果是，则进入冲突避免阶段，如果当前信道忙，说明现在有其它站点正在传输数据，则延迟发送帧直到侦听到信道空闲&lt;/li&gt;
&lt;li&gt;冲突避免：站点在发送帧之前要先等待一个帧间间隔IFS（InterFrame Spacing），并且确保在IFS时间内信道空闲&lt;/li&gt;
&lt;li&gt;为了防止多个站点在等待IFS时间后同时发送而导致冲突，与以太网类似，引入了一个随机退避算法来选择一个退避时间 （backoff time）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ifs&#34;&gt;IFS&lt;/h4&gt;
&lt;p&gt;帧间间隔（IFS）控制了发送帧之前的等待时间，不同类型的帧具有不同的IFS，确定了帧的发送优先级，IFS越短，帧的优先级就越高 。
三种IFS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIFS：Short IFS，最高优先级，用于CTS、ACK等控制帧&lt;/li&gt;
&lt;li&gt;PIFS：PCF IFS，等于SIFS+1，中等优先级，用于PCF操作模式下的帧&lt;/li&gt;
&lt;li&gt;DIFS：DCF IFS，等于SIFS+2，最低优先级，用于DCF操作模式下的数据帧&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;退避时间&#34;&gt;退避时间&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;站点执行随机退避算法来确定退避时间
&lt;ul&gt;
&lt;li&gt;从0到竞争窗口CW之间的随机选择一个值r，则退避时间为r倍的时槽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;竞争窗口CW（Contention Window ）采用与以太网类似的指数退避算法来设置
&lt;ul&gt;
&lt;li&gt;CW初始化为一个最小值CWmin&lt;/li&gt;
&lt;li&gt;当发送方认为发送的帧发生冲突时将CW加倍增大，直到到达最大值CWmax&lt;/li&gt;
&lt;li&gt;竞争窗口CW: 开始为2k-1，下一次为2k+1-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;判断冲突&#34;&gt;判断冲突&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;.接收方发送ACK帧
&lt;ul&gt;
&lt;li&gt;接收方正确接收来自发送方的数据帧后发送ACK帧进行确认&lt;/li&gt;
&lt;li&gt;ACK帧不需要执行随机退避算法，而是直接等待一个SIFS时间后就发送&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送方未收到ACK帧
&lt;ul&gt;
&lt;li&gt;发送方执行指数退避算法，将CW的值加倍，并且将重传计数器加1，然后重传数据帧，此时需要再次使用CSMA/CA机制竞争信道&lt;/li&gt;
&lt;li&gt;CW从CWmin开始，每次重传都将CW加倍，直到到达CWmax&lt;/li&gt;
&lt;li&gt;重传计数器到达一个设定的门限值时，发送方将放弃发送数据帧，并且返回一个错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;扩展csmaca&#34;&gt;扩展CSMA/CA&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RTS帧：与数据帧发送方式相同&lt;/li&gt;
&lt;li&gt;CTS帧：与控制帧发送方式相同，等待SIFS时间后直接发送&lt;/li&gt;
&lt;li&gt;网络分配向量（NAV：Network Allocation Vector）：设置计数器，当减为0后，其他站点开始竞争信道
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;只有当RTS/CTS中的持续时间域的值大于当前存储的NAV时，该NAV才会被更新&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;原理&#34;&gt;原理&lt;/h4&gt;
&lt;p&gt;![[Pasted image 20240102111606.png]]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方发送RTS帧，其中包含了一个持续时间域，该域的值表明发送方完成帧交换所需要的时间，包括从发送数据帧到接收ACK帧所需要的时间&lt;/li&gt;
&lt;li&gt;收到RTS的站点根据其中的持续时间为自己声明一个虚拟信道，并且该信道正忙，用网络分配向量NAV来表示，在NAV时间内，该站点不会尝试发送帧&lt;/li&gt;
&lt;li&gt;接收方响应CTS帧中也包含一个持续时间域，该域的值足够大，以保证发送方能够完成数据帧交换&lt;/li&gt;
&lt;li&gt;收到CTS的站点根据其中的持续时间为自己声明一个虚拟信道，并且该信道正忙，用网络分配向量NAV来表示，在NAV时间内，该站点不会尝试发送帧&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么要拓展&#34;&gt;为什么要拓展&lt;/h4&gt;
&lt;p&gt;基本CSMA/CA存在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt; 隐藏站点问题&lt;/font&gt;：B给C发，D无法侦听到&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#ff0000&#34;&gt;暴露站点问题&lt;/font&gt;：B给A发，C侦听到忙，无法给D发
扩展CSMA/CA可解决隐藏站点问题
B和D在彼此通信范围之外，他们互为隐藏站点，当B往C发送时，D CD失败，反过来D往C发送时，B CD失败。基本的CSMA/CA机制无法解决隐藏站点问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;切换&#34;&gt;切换&lt;/h3&gt;
&lt;p&gt;•站点移出一个AP的信号覆盖范围外，进入另一个AP的信号覆盖范围内，这时它需要关联到一个新的AP上。这个过程被称为切换（Handoff）&lt;/p&gt;
&lt;h4 id=&#34;切换过程&#34;&gt;切换过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首先，站点决定何时开始切换过程
&lt;ul&gt;
&lt;li&gt;信号强度减弱&lt;/li&gt;
&lt;li&gt;帧重传&lt;/li&gt;
&lt;li&gt;基础设施网络中无法接收到AP周期性广播的信标帧（缺省情况下AP周期性广播信标帧，其中包含有SSID等信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其次，站点决定切换到何处
&lt;ul&gt;
&lt;li&gt;通过扫描机制得到所有AP的信息
&lt;ul&gt;
&lt;li&gt;主动扫描速度快,但是开销大,目前大多数802.11产品都采用主动扫描&lt;/li&gt;
&lt;li&gt;主动扫描(Active Scanning)：在每个信道上发送探测请求帧，然后等待来自工作在该信道上的AP的探测响应帧，从而得到所有信道上的所有AP信息&lt;/li&gt;
&lt;li&gt;被动扫描(Passive Scanning): 在每个信道上侦听来自AP的信标帧，从而得到所有信道上的所有AP信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据SSID是否匹配、信号强度等信息选择一个新的AP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后，站点将和选择的新的AP建立关联。建立关联之前STA还要和新的AP进行认证过程，然后开始关联过程
&lt;ul&gt;
&lt;li&gt;在这里站点发送的是重新关联帧（Reassociation ）而不是关联帧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pon关键技术&#34;&gt;PON关键技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下行采用广播方式传输，为保证安全性，需要对数据进行加密&lt;/li&gt;
&lt;li&gt;上行需要考虑TDMA同步问题&lt;/li&gt;
&lt;li&gt;实现动态带宽分配，提高带宽使用率，保证多业务服务质量
PON要解决的关键问题就是如何控制多个ONU/ONT对共享馈线光纤的高效访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gpon-vs-epon&#34;&gt;GPON vs EPON&lt;/h3&gt;
&lt;p&gt;EPON直接将变长IP分组封装成以太帧，效率高，实现简单
GPON帧长为125us，无缝支持TDM业务
GPON继承了ATM的多业务支持，以业务类型为单位分配带宽
动态带宽分配属于GPON标准的一部分，但是在EPON中没有明确定义
GPON能够提供更高的速率，接入更多的ONU/ONT（最多128个）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>信息网络协议基础第一章复习</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
        <pubDate>Tue, 02 Jan 2024 08:27:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
        <description>&lt;h2 id=&#34;交换技术&#34;&gt;交换技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;交换、电路交换、分组交换（虚电路交换ATM、数据报交换IP）- 原理 特点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么需要交换&#34;&gt;为什么需要交换？&lt;/h3&gt;
&lt;p&gt;减少网络中节点之间所需的通信线路
增强可扩展性,构建更大规模网络&lt;/p&gt;
&lt;h3 id=&#34;交换类型&#34;&gt;交换类型&lt;/h3&gt;
&lt;p&gt;![[Pasted image 20240101134814.png]]&lt;/p&gt;
&lt;h3 id=&#34;交换的概念&#34;&gt;交换的概念&lt;/h3&gt;
&lt;p&gt;交换操作由一系列过程组成：为输入数据选择输出线路/端口，在输入和输出之间建立连接，通过该连接将数据放到输出线路/端口上
网络中执行交换操作的设备称为交换机。通过一系列交换机的交换操作，在两个通信节点之间建立一条数据传输路径，这条路径由物理或者逻辑上的链路组成&lt;/p&gt;
&lt;h3 id=&#34;电路交换&#34;&gt;电路交换&lt;/h3&gt;
&lt;h4 id=&#34;电路交换概念&#34;&gt;电路交换：概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交换传输线路或者时隙，通过交换机在通信双方之间建立一条专用的传输路径&lt;/li&gt;
&lt;li&gt;传输路径建立后，数据像流一样在路径上传输
&lt;ul&gt;
&lt;li&gt;空分交换：传输路径由线路组成&lt;/li&gt;
&lt;li&gt;时分交换：传输路径由每条线路上的固定时隙组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;电路交换特征&#34;&gt;电路交换：特征&lt;/h4&gt;
&lt;p&gt;网络通信包括三个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（发送）端到（接收）端电路连接建立&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;电路连接拆除
优点：占用固定的线路资源，保证数据传输的速率、延时、可靠性及有序性
缺点：线路资源利用率低，没有有数据传输时也占用线路或者固定时隙；电路连接建立导致延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;电路交换性能&#34;&gt;电路交换：性能&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;电路交换是为话音传输设计的，支持固定的数据速率&lt;/li&gt;
&lt;li&gt;电话交换网：传统电话网络中的话音业务采用电路交换技术，除端局到用户的本地回路(Subscriber Loop)是模拟的以外，其它部分都是数字的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分组交换&#34;&gt;分组交换&lt;/h3&gt;
&lt;h4 id=&#34;分组交换概念&#34;&gt;分组交换：概念&lt;/h4&gt;
&lt;p&gt;交换分组，以分组为单元统计复用线路（也称为链路）资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计复用：只有有数据要传输才占用线路&lt;/li&gt;
&lt;li&gt;分组大小问题：太小，分组开销大；太大，复用效率低，影响其它分组的发送
现代的电话网络支持话音、数据等综合业务，对于数据采用分组交换技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数据报交换&#34;&gt;数据报交换&lt;/h4&gt;
&lt;p&gt;数据报交换：直接发送分组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征
&lt;ul&gt;
&lt;li&gt;无连接：直接发送分组，无服务质量保证&lt;/li&gt;
&lt;li&gt;健壮性：相同源-目的的分组可能沿不同路径传输，可绕开故障路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由表
&lt;ul&gt;
&lt;li&gt;分组携带的控制信息中包含目的地址
&lt;ul&gt;
&lt;li&gt;目的地址在传输过程中&lt;strong&gt;保持不变&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换机根据路由表来独立地转发分组
&lt;ul&gt;
&lt;li&gt;使用目的地址来查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;IP网络采用数据报交换，在网络层执行交换，交换的单元为IP分组，执行交换的设备也被称为IP路由器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚电路交换&#34;&gt;虚电路交换&lt;/h4&gt;
&lt;p&gt;虚电路交换：先建立连接，再发送分组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征
&lt;ul&gt;
&lt;li&gt;面向连接：分组发送前在源和目的之间建立连接
&lt;ul&gt;
&lt;li&gt;与电路交换不同，连接不是占用固定的线路资源，只是告诉网络的资源需求，在每个交换机上建立“连接状态”&lt;/li&gt;
&lt;li&gt;建立的连接路径被称为&lt;strong&gt;虚电路&lt;/strong&gt;（Virtual Circuit）&lt;/li&gt;
&lt;li&gt;服务质量保证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有序性：同一源和目的的分组沿相同的路径到达目的地&lt;/li&gt;
&lt;li&gt;基于虚电路标识执行交换操作，效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;虚电路
&lt;ul&gt;
&lt;li&gt;VCI（VC Identifier）：在每条物理线路/链路可以同时运行很多条虚电路，每条虚电路由VCI标识&lt;/li&gt;
&lt;li&gt;VCI具有局部意义，只在每条链路上唯一&lt;/li&gt;
&lt;li&gt;每个交换机上都维护一个转发表，基于VCI对分组进行转发&lt;/li&gt;
&lt;li&gt;从源到目的的虚电路由路径链路上一系列VCI标识
![[Pasted image 20240101134653.png]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATM网络&lt;/strong&gt;采用虚电路交换，交换的单元为固定长度的ATM 信元，执行交换的设备也被称为ATM交换机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结
&lt;ul&gt;
&lt;li&gt;以分组为单元统计复用线路/链路资源&lt;/li&gt;
&lt;li&gt;优点：线路利用率高，节点只有在有数据要传输时才占用通信线路，因此多个节点的分组可以共享一条通信线路&lt;/li&gt;
&lt;li&gt;缺点：需要资源管理机制来保证数据传输的速率、延时、可靠性和有序性，增加了复杂性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分组交换是为数据传输设计的，支持可变的数据速率&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络体系结构&#34;&gt;网络体系结构&lt;/h2&gt;
&lt;h3 id=&#34;dtn体系架构&#34;&gt;DTN体系架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解决的问题
传统网络路由假设：在任何时候，总能找到从源到目的的端到端路径。
DTN网络环境：由于连接的间隙性，可能会出现端到端路径不存在的情况&lt;/li&gt;
&lt;li&gt;基本思想：走一步看一步，而不像传统路由那样直接找到从源到目的的路径。关键问题：下一步如何确定？
&lt;ul&gt;
&lt;li&gt;最简单的策略：把数据交给我当前能通信的所有节点（感染路由），性能最好，开销最大！&lt;/li&gt;
&lt;li&gt;更复杂的策略：根据一些知识来选择数据转发的下一跳（单拷贝/多拷贝路由），例如历史相遇信息，节点运动信息等，这可以减小开销，但是性能会下降。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DTN中引入了Bundle Protocol （BP），可以在TCP/IP和非TCP/IP网络中运行，BP实现Custody Transfer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sdn&#34;&gt;SDN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当前网络问题
&lt;ul&gt;
&lt;li&gt;网络缺乏灵活的控制机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本思想：
&lt;ul&gt;
&lt;li&gt;数据面和控制面分离，数据路由传输由控制器控制，赋予外部应用通过控制器控制网络设备的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;openflow
&lt;ul&gt;
&lt;li&gt;OpenFlow是SDN的一种实现，定义了控制器和交换机/路由器之间的协议，以及交换机/路由器的控制接口、流表格式等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;现有internet存在的问题&#34;&gt;现有Internet存在的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可扩展性：流量增加、路由表膨胀&lt;/li&gt;
&lt;li&gt;移动性：越来越多的移动用户接入到Internet，在设计时未考虑移动性支持&lt;/li&gt;
&lt;li&gt;服务质量：IP网络提供的是尽力投递服务，未考虑数据内容&lt;/li&gt;
&lt;li&gt;网络安全：越来越多的应用使用Internet，在设计时并未充分考虑安全性&lt;/li&gt;
&lt;li&gt;能耗：互联网耗电量约占全球的5.4%，我国是4.3%，还在不断增长
Internet体系结构本生存在问题，无法彻底解决这些问题！重新设计Internet体系结构！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nsf-future-internet-architecture-program&#34;&gt;NSF Future Internet Architecture Program&lt;/h3&gt;
&lt;p&gt;•Founded in 2010, design for next 15 years&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Named Data Networking&lt;/li&gt;
&lt;li&gt;MobilityFirst&lt;/li&gt;
&lt;li&gt;NEBULA/eXpressive Internet Architecture/ChoiceNet
&lt;strong&gt;基本特征：除了数据传输，网络具有更多的能力，例如内容计算、内容存储等，而且网络更加灵活可变，例如可编程等&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ndn&#34;&gt;NDN&lt;/h3&gt;
&lt;p&gt;Named Data Networking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前网络问题
&lt;ul&gt;
&lt;li&gt;路由器不知道传输的内容导致冗余传输，从而浪费带宽，增加能耗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计思路
&lt;ul&gt;
&lt;li&gt;用户关注的是内容，而不是内容在什么地方：内容名取代地址&lt;/li&gt;
&lt;li&gt;通过内容命名，可以实现自动缓存来优化带宽&lt;/li&gt;
&lt;li&gt;在安全性方面，NDN确保的是内容安全，而不是内容所在处的安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mobilityfirst&#34;&gt;MobilityFirst&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解决的问题
&lt;ul&gt;
&lt;li&gt;网络节点身份和位置标识相同（IP地址）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计
&lt;ul&gt;
&lt;li&gt;GUID -  Mapping
&lt;ul&gt;
&lt;li&gt;![[Pasted image 20240101140521.png]]&lt;/li&gt;
&lt;li&gt;GUID:Globally Unique Name&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表示节点身份的标识和表示节点位置的地址分离&lt;/li&gt;
&lt;li&gt;通过路由器缓存来减少移动过程中的数据丢失&lt;/li&gt;
&lt;li&gt;每次更换地址
&lt;ul&gt;
&lt;li&gt;(1)Update GUID - Address Mapping&lt;/li&gt;
&lt;li&gt;(2)Direct traffic to new address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来网络应用场景和需求网络50&#34;&gt;未来网络应用场景和需求：网络5.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以物联网、云计算、大数据和人工智能为核心&lt;/li&gt;
&lt;li&gt;工业互联网、车联网、远程医疗、智能电网&lt;/li&gt;
&lt;li&gt;5G网络，解决低延迟、移动性和大连接问题&lt;/li&gt;
&lt;li&gt;超高带宽、延迟保证&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>信网实验2</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C2/</link>
        <pubDate>Mon, 20 Nov 2023 10:27:05 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C2/</guid>
        <description>&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;h3 id=&#34;查看并记录-hosta-和-s-的-ipv6ens5-scopelink-地址&#34;&gt;查看并记录 HostA 和 S 的 IPv6(ens5 scope:link) 地址&lt;/h3&gt;
&lt;p&gt;命令 &lt;code&gt;ifconfig ens5&lt;/code&gt;。
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.ldpjzb9l5jk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1xxjljjl8azk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释&#34;&gt;命令解释&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ifconfig&lt;/code&gt;是一个用于配置和显示Linux操作系统网络接口信息的命令。当执行&lt;code&gt;ifconfig ens5&lt;/code&gt;命令时，它会显示ens5网络接口的配置信息，包括IP地址、子网掩码、MAC地址、数据包统计等。&lt;/p&gt;
&lt;h3 id=&#34;ipv6-连接&#34;&gt;IPv6 连接：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;HostA 的终端 1 中执行 `sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 and S 的 IPv6(ens5 scope:link）地址 -i ens5`。

HostA 的终端 2 中执行 `ping6 -c 1 S 的 IPv6(ens5 scope:link）地址%ens5`。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6do1erorr8jk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.29ezt78rs9vk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4ifskyjvutfk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释-1&#34;&gt;命令解释&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 and S 的 IPv6(ens5 scope:link）地址 -i ens5&lt;/code&gt; 这个命令的作用是使用tcpdump工具来捕获指定主机HostA和另一台主机S之间通过ens5网络接口的IPv6通信数据包。其中-v选项表示以详细模式显示数据包信息，-x选项表示以十六进制和ASCII形式显示数据包内容，-n选项表示以数字形式显示地址而不进行地址解析，-i ens5表示指定监听的网络接口为ens5。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ping6 -c 1 S 的 IPv6(ens5 scope:link）地址%ens5&lt;/code&gt; 这个命令的作用是向指定的IPv6地址发送一个ICMPv6 Echo Request数据包，以测试与目标主机S的连通性。其中-c 1表示只发送一个数据包，S 的 IPv6(ens5 scope:link）地址表示目标主机S的IPv6地址，%ens5表示指定使用ens5网络接口发送数据包。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;结果&#34;&gt;结果&lt;/h4&gt;
&lt;p&gt;【实验要求】：此步骤需要记录终端 1 中抓到的 2 个报文数据，表明哪个是请求报文，哪个是回复报文。根据 IPv6 协议报文格式分析上述 tcpdump 抓包结果，要求画出 IPv6 以及 ICMPv6 的基本报头结构并将各个字段分别填入其中 (例如 IP 协议版本、源地址和目的地址、源端口和目的端口、报文含义等)。对这个报文的含义加以解释。&lt;/p&gt;
&lt;p&gt;第一个报文是请求报文，第二个报文是回复报文。&lt;/p&gt;
&lt;p&gt;第一个报文的IPv6报头如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Version: 6
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Traffic Class: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flow Label: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Payload Length: 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Next Header: ICMPv6 (58)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hop Limit: 64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Source Address: fe80::f816:3eff:fea7:a942
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Destination Address: fe80::f816:3eff:fee7:f7b3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|  Version    | Traffic Class  | Flow Label | Payload Length   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|      6      |        0       |      0     |        64        |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Next Header |   Hop Limit    | Source Address                |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+-------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|     58      |       64       | fe80::f816:3eff:fea7:a942     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---------------+----------------+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|               Destination Address                            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|               fe80::f816:3eff:fee7:f7b3                      |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ICMPv6报头如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type: ICMPv6 Echo Request (128)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Code: 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checksum: 0x158e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Identifier: 0x0001
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sequence Number: 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第二个报文的IPv6报头如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|  Version    | Traffic Class  | Flow Label | Payload Length   |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|      6      |        0       |      0     |        64        |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+------------+------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| Next Header |   Hop Limit    | Source Address                |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------+----------------+-------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|     58      |       64       | fe80::f816:3eff:fee7:f7b3     |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+---------------+----------------+-----------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|               Destination Address                            |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|               e80::f816:3eff:fea7:a942                       |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+--------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ICMPv6报头如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type: ICMPv6 Echo Reply (129) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Code: 0 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Checksum: 0x0506 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Identifier: 0x0001 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sequence Number: 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;根据ICMPv6报文的类型和代码，可以判断第一个报文是ICMPv6 Echo Request报文，第二个报文是ICMPv6 Echo Reply报文。&lt;/p&gt;
&lt;p&gt;ICMPv6 Echo Request报文用于请求对端发送Echo Reply报文。第一个报文的源地址是fe80::f816:3eff:fea7:a942，目的地址是fe80::f816:3eff:fee7:f7b3。序列号为1，表示这是第一个请求报文。&lt;/p&gt;
&lt;p&gt;ICMPv6 Echo Reply报文用于响应ICMPv6 Echo Request报文。第二个报文的源地址是fe80::f816:3eff:fee7:f7b3，目的地址是fe80::f816:3eff:fea7:a942。序列号为1，表示这是对第一个请求报文的响应
上述tcpdump抓包结果表明，两个主机之间正在进行ICMPv6 Echo测试。&lt;/p&gt;
&lt;h3 id=&#34;路由器公告报文&#34;&gt;路由器公告报文&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;路由器公告报文的目的地址为 IPv6 组播地址中的“全节点地址”，它的地址是FF02::1，可用 tcpdump 侦听路由器公告报文。HostA 中另开一个终端 3 用于侦听路由器公告报文，命令为：
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sudo tcpdump –vxn host ff02::1 -i ens5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;【实验要求】记录 HostA 的终端 3 中 tcpdump 抓包得到的数据。由于路由器公告报文的发送有一定地周期，因此这里可能需要等待较长时间，可以把终端 3 最小化继续进行其他实验，等有结果后记录抓包得到的数据。如仍未顺利抓到此包，也可以参考附录中的图 4 回答下述问题。根据 tcpdump 抓取到的报文数据说明路由器通告报文通告了哪些信息并简单解释网络中的其它主机将会如何使用这些信息？&lt;/p&gt;
&lt;h4 id=&#34;命令解释-2&#34;&gt;命令解释&lt;/h4&gt;
&lt;p&gt;这个命令的作用是使用tcpdump工具来捕获发送到IPv6组播地址ff02::1的数据包，该地址是IPv6中的所有节点组播地址。其中-v选项表示以详细模式显示数据包信息，-x选项表示以十六进制和ASCII形式显示数据包内容，-n选项表示以数字形式显示地址而不进行地址解析，-i ens5表示指定监听的网络接口为ens5。&lt;/p&gt;
&lt;h4 id=&#34;结果-1&#34;&gt;结果&lt;/h4&gt;
&lt;p&gt;根据 tcpdump 抓取到的报文数据，路由器通告报文通告了以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源地址：fe80::f816:3eff:fee6:e881&lt;/li&gt;
&lt;li&gt;目标地址：ff02::1&lt;/li&gt;
&lt;li&gt;路由前缀：2001:db8:85a3::/64&lt;/li&gt;
&lt;li&gt;生命周期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络中的其它主机将会使用这些信息来进行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;获取路由信息&lt;/strong&gt;：主机可以使用路由前缀信息来构建自己的路由表，从而能够将数据包发送到目的网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动配置地址&lt;/strong&gt;：如果路由器通告了 M 比特为 1，则主机将使用 DHCPv6 服务来获取 IPv6 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用 IPv6 邻居发现&lt;/strong&gt;：主机可以使用路由器通告中的链路层选项来启用 IPv6 邻居发现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;地址解析&#34;&gt;地址解析&lt;/h3&gt;
&lt;p&gt;地址解析的目的是通过对端的 IP 获取对端的 MAC 地址。由于地址解析过程会在数据发送前自动进行，因此需要先用 tcpdump 侦听，再 ping 对端，即可观察到NS 和 NA 报文。&lt;/p&gt;
&lt;p&gt;HostA 的终端 1 执行命令 &lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 -i ens5&lt;/code&gt;
HostA 的终端 2 执行命令 &lt;code&gt;ping6 -c 1 HostB 的 IPv6(ens5 scope:link）地址%ens5。&lt;/code&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.o525tblz7nk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释-3&#34;&gt;命令解释&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 -i ens5&lt;/code&gt; 这个命令的作用是使用tcpdump工具来捕获发送到特定IPv6地址（HostA的IPv6地址，ens5接口，scope为link）的数据包，其中-v选项表示以详细模式显示数据包信息，-x选项表示以十六进制和ASCII形式显示数据包内容，-n选项表示以数字形式显示地址而不进行地址解析，-i ens5表示指定监听的网络接口为ens5。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ping6 -c 1 HostB 的 IPv6(ens5 scope:link）地址%ens5。&lt;/code&gt; 这个命令的作用是向指定的IPv6地址（HostB的IPv6地址，ens5接口，scope为link）发送一个ICMPv6数据包，-c 1表示只发送一个数据包。在IPv6地址后面加上%ens5是为了指定数据包通过ens5接口发送。&lt;/p&gt;
&lt;h4 id=&#34;结果-2&#34;&gt;结果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6i9gih550whs.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.17fbvc5btxwg.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.40kj12visim8.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;【实验要求】：记录 HostA 的终端 1 中观察到邻居请求 (NS) 和邻居通告 (NA) 报文。根据抓取到的报文数据说明邻居请求及邻居公告报文通告了哪些信息，这些信息有什么作用？&lt;/p&gt;
&lt;p&gt;从抓取到的报文数据来看，邻居请求 (NS) 报文通告了以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源地址：fe80::f816:3eff:fea7:a942&lt;/li&gt;
&lt;li&gt;目标地址：fe80::f816:3eff:fee7:1aea&lt;/li&gt;
&lt;li&gt;请求类型：Who has&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些信息用于查询目标地址的邻居节点。&lt;/p&gt;
&lt;p&gt;邻居通告 (NA) 报文通告了以下信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源地址：fe80::f816:3eff:fee7:1aea&lt;/li&gt;
&lt;li&gt;目标地址：fe80::f816:3eff:fea7:a942&lt;/li&gt;
&lt;li&gt;链路层地址：fa:16:3e:5b:1a:ea&lt;/li&gt;
&lt;li&gt;可达性：可达
这些信息用于告知源地址，目标地址是可达的，并且目标地址的链路层地址是 fa:16:3e:e7:f7:b3。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp-三次握手&#34;&gt;TCP 三次握手&lt;/h3&gt;
&lt;p&gt;netcat 可以在主机间建立 TCP 连接，建立连接时，可以用 tcpdump 对 报文抓包，观察到 TCP 的三次握手过程。&lt;/p&gt;
&lt;p&gt;首先在 S 的终端 1 中执行 &lt;code&gt;nc -l 1958&lt;/code&gt; 侦听 1958 端口。&lt;/p&gt;
&lt;p&gt;之后在 HostA 的终端1 执行 &lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv4(ens5) 地址 andS 的 IPv4(ens5) 地址 -i ens5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在HostA 的终端2 执行 &lt;code&gt;nc S 的IPv4(ens5)地址 1958&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4jeneo3oaozk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释-4&#34;&gt;命令解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nc -l 1958&lt;/code&gt;：这个命令使用nc（netcat）工具在本地监听1958端口，等待接收数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv4(ens5) 地址 andS 的 IPv4(ens5) 地址 -i ens5&lt;/code&gt;：这个命令是用来使用tcpdump工具来捕获网络数据包的命令。其中&amp;quot;-v&amp;quot;表示详细模式，&amp;quot;-x&amp;quot;表示以十六进制和ASCII格式显示数据包，&amp;quot;-n&amp;quot;表示以数字形式显示地址，&amp;quot;-i ens5&amp;quot;表示监听网络接口ens5上的数据包。&amp;ldquo;host HostA 的 IPv4(ens5) 地址 andS 的 IPv4(ens5) 地址&amp;quot;这部分应该是要指定要捕获的数据包的源和目标主机的IP地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nc S 的IPv4(ens5)地址 1958&lt;/code&gt;：这个命令使用nc（netcat）工具来连接到指定的IPv4地址的主机的1958端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结果-3&#34;&gt;结果&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.39cwrnvx7sn4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;【实验要求】：完整记录 HostA 的终端 1 中观察到的前三个报文，即 TCP 握手报文。标注出每个报文的类型（SYN、SYN/ACK、ACK）。简要说明 TCP 协议采用三次握手的原因。说明实验中为何无法抓到 RST 包？请问编写应用程序时我们是否需要处理这些报文，为什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 协议采用三次握手的原因&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保连接的建立是可靠的。&lt;/li&gt;
&lt;li&gt;避免已建立的连接被重复建立。&lt;/li&gt;
&lt;li&gt;避免连接被恶意攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在三次握手的过程中，双方主机各发送一个 SYN 报文，然后再各发送一个 ACK 报文。这样，双方主机就可以确认对方是可靠的，并且连接是可靠的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验中无法抓到 RST 包的原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实验中，HostA 和 HostB 建立了 TCP 连接，并开始传输数据。如果 HostA 或 HostB 想要终止连接，则会发送 RST 包。但是，由于实验中我们没有终止连接，因此无法抓到 RST 包。&lt;/p&gt;
&lt;p&gt;如果 HostA 发送了一个无效的 TCP 报文，或者 HostB 拒绝建立连接，则 HostB 可能会发送 RST 包来终止连接。在这种情况下，可以通过 tcpdump 来抓到 RST 包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编写应用程序时是否需要处理这些报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编写应用程序时，通常不需要直接处理 TCP 握手报文。应用程序可以通过调用系统 API 来建立和管理 TCP 连接。&lt;/p&gt;
&lt;h2 id=&#34;隧道&#34;&gt;隧道&lt;/h2&gt;
&lt;p&gt;注意 隧道删除命令为 &lt;code&gt;ip tunnel de&lt;/code&gt;l 隧道名称，若添加隧道命令打错可用此命令删除后重建。&lt;/p&gt;
&lt;h3 id=&#34;打开两个-host-虚拟机并各打开一个终端&#34;&gt;打开两个 Host 虚拟机并各打开一个终端&lt;/h3&gt;
&lt;h3 id=&#34;在-hosta-的终端上执行命令&#34;&gt;在 HostA 的终端上执行命令：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo ip tunnel add sit1 mode sit remote HostB 的 IPv4 地址 local HostA 的 IPv4 地址 dev ens5&lt;/code&gt;（IPv4 地址可以由命令 ifconfig ens5 获得）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo ip link set sit1 up&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ip link show up&lt;/code&gt;【记录结果，此时可以看到名字为 sit1 的设备】
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2le9m5gq3h4w.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo ip addr add 3ffe:3216:2101:2106:1234::A/80 dev sit1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ip tunnel show&lt;/code&gt;【记录结果】
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.iqowyiib1nk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释-5&#34;&gt;命令解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip tunnel add sit1 mode sit remote HostB 的 IPv4 地址 local HostA 的 IPv4 地址 dev ens5&lt;/code&gt;：该命令用于创建一个名为 sit1 的隧道接口，该隧道接口的模式为 SIT，远程端地址为 HostB 的 IPv4 地址，本地端地址为 HostA 的 IPv4 地址，隧道接口绑定的物理接口为 ens5。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip link set sit1 up&lt;/code&gt;：HostA 已经创建了名为 sit1 的隧道接口，但该隧道接口处于禁用状态。通过执行该命令，将 sit1 隧道接口置为启用状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ip link show&lt;/code&gt; 命令用于显示系统的网络接口信息，包括其当前状态。&lt;code&gt;up&lt;/code&gt; 选项只显示当前已启用的网络接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip addr add 3ffe:3216:2101:2106:1234::A/80 dev sit1&lt;/code&gt; ：该命令用于将 IPv6 地址 &lt;code&gt;3ffe:3216:2101:2106:1234::A&lt;/code&gt; 分配给隧道接口 &lt;code&gt;sit1&lt;/code&gt;，前缀长度为 80&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ip tunnel show&lt;/code&gt; 用于显示系统中所有隧道接口的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在-hostb-的终端上执行命令&#34;&gt;在 HostB 的终端上执行命令：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sudo ip tunnel add sit1 mode sit remote HostA 的 IPv4 地址 local HostB 的 IPv4 地址 dev ens5&lt;/code&gt;（IPv4 地址可以由命令 ifconfig ens5 获得）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo ip link set sit1 up&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ip link show up&lt;/code&gt;【记录结果，此时可以看到名字为 sit1 的设备】
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4ga09knkqhz4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;code&gt;sudo ip addr add 3ffe:3216:2101:2106:1234::B/80 dev sit1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ip tunnel show&lt;/code&gt;【记录结果】
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6nac4un2ee4g.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令解释-6&#34;&gt;命令解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip tunnel add sit1 mode sit remote HostA 的 IPv4 地址 local HostB 的 IPv4 地址 dev ens5&lt;/code&gt; 用于创建一个名为 &lt;code&gt;sit1&lt;/code&gt; 的隧道接口。该隧道接口使用 SIT 模式，远程端地址为 HostA 的 IPv4 地址，本地端地址为 HostB 的 IPv4 地址。隧道接口绑定到物理接口 &lt;code&gt;ens5&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip link set sit1 up&lt;/code&gt;  ：通过执行该命令，将 sit1 隧道接口置为启用状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ip link show&lt;/code&gt; 命令用于显示系统的网络接口信息，包括其当前状态。&lt;code&gt;up&lt;/code&gt; 选项只显示当前已启用的网络接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo ip addr add 3ffe:3216:2101:2106:1234::B/80 dev sit1&lt;/code&gt; 用于将 IPv6 地址 &lt;code&gt;3ffe:3216:2101:2106:1234::B&lt;/code&gt; 分配给隧道接口 &lt;code&gt;sit1&lt;/code&gt;，前缀长度为 80。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ip tunnel show&lt;/code&gt; 用于显示系统中所有隧道接口的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在-hosta-上打开两个终端&#34;&gt;在 HostA 上打开两个终端。&lt;/h3&gt;
&lt;p&gt;其中一个终端用 tcpdump 侦听报文，另一个终端用于 ping6。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先在 HostA 的第 1 个终端中执行命令 &lt;code&gt;sudo tcpdump -vxn -i sit1&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次在 HostA 的第 2 个终端中执行命令 &lt;code&gt;ping6 –c 1 3ffe:3216:2101:2106 :1234::B&lt;/code&gt;，检查是否可以 ping 通，若不通则需要检查之前的步骤是否正确完成。
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.72mpxaurejuo.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录 HostA 的第 1 个终端中由 tcpdump 抓取的前两个报文。
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5c0s3olohwqo.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 HostA 的这两个终端并重新打开两个新的终端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 HostA 的第 1 个终端中执行命令 &lt;code&gt;sudo tcpdump -vxn –i ens5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 HostA 的第 2 个终端中执行命令 &lt;code&gt;ping6 –c 1 3ffe:3216:2101:2106:1234::B&lt;/code&gt;。
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6v3ufzbmok8w.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录 HostA 的第 1 个终端中由 tcpdump 抓取的前两个报文（可能要等一会儿）。
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1glvfx8x0eps.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;命令解释-7&#34;&gt;命令解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sudo tcpdump -vxn -i sit1&lt;/code&gt; 用于捕获在隧道接口 &lt;code&gt;sit1&lt;/code&gt; 上传输的网络数据包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ping6 –c 1 3ffe:3216:2101:2106:1234::B&lt;/code&gt;该命令将向 IPv6 地址 &lt;code&gt;3ffe:3216:2101:2106:1234::B&lt;/code&gt; 发送一个 ICMP 回显请求数据包。如果该地址可达，则目标主机将会响应一个 ICMP 回显应答数据包。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结果解释&#34;&gt;结果解释&lt;/h4&gt;
&lt;p&gt;【实验要求】：记录需要记录的实验数据。从报文结构上看，通过隧道通信与两个 IPv6 主机直接通信的区别是什么，即上述隧道通信的报文有什么特点？&lt;/p&gt;
&lt;p&gt;通过隧道通信与两个 IPv6 主机直接通信的区别是什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;隧道通信的报文中，IPv6 头部包含了源地址和目标地址，以及隧道协议类型。两个 IPv6 主机直接通信的报文中，IPv6 头部只包含了源地址和目标地址。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隧道通信的报文中，包含了隧道协议头部，用于描述隧道连接的相关信息。两个 IPv6 主机直接通信的报文中，没有隧道协议头部。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>信网实验1</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C1/</link>
        <pubDate>Tue, 07 Nov 2023 12:46:21 +0800</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C1/</guid>
        <description>&lt;h1 id=&#34;实验内容&#34;&gt;实验内容&lt;/h1&gt;
&lt;h2 id=&#34;arp&#34;&gt;arp&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 和 HostB 中分别打开一个终端用于本实验。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 和 HostB 中分别执行命令&lt;code&gt;ifconfig ens5&lt;/code&gt;，查看并记录它们各自的IPv4 地址。执行命令 &lt;code&gt;ifconfig ens6&lt;/code&gt; 查看 IPv6 地址 (global 和 link 两种) 以及以太网接口的物理地址。&lt;/strong&gt;
&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2dh0lur8qhkw.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5s8kni5d7b7k.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2i1qwanl02dc.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.37tkn71qiu4g.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释：&lt;/strong&gt;
&lt;code&gt;ifconfig&lt;/code&gt; 是一个用于配置和显示网络接口信息的命令。&lt;code&gt;ens5&lt;/code&gt; 和 &lt;code&gt;ens6&lt;/code&gt; 是网络接口的名称，通常用于表示以太网接口。&lt;code&gt;ifconfig ens5&lt;/code&gt; 命令用于显示名为 &lt;code&gt;ens5&lt;/code&gt; 的网络接口的配置信息，包括 IP 地址、子网掩码、广播地址、MAC 地址等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 中执行命令 &lt;code&gt;arp -n&lt;/code&gt; 或&lt;code&gt;ip neigh show&lt;/code&gt; 查看并记录本机 ARP 缓存表的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释：&lt;/strong&gt;
&lt;code&gt;arp -n&lt;/code&gt; 是一个用于查看本地ARP缓存表的命令。它会显示已解析的IP地址和对应的MAC地址。
&lt;code&gt;ip neigh show&lt;/code&gt; 是一个用于查看本地邻居表的命令。它会显示已解析的IP地址和对应的MAC地址，类似于 arp -n 命令。
arp -n 和 ip neigh show 都是用于查看本地ARP缓存表或邻居表的命令，它们的功能相似但有一些区别。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令格式不同：arp -n 是在大多数操作系统中使用的命令，而 ip neigh show 是在基于 Linux 的操作系统中使用的命令。&lt;/li&gt;
&lt;li&gt;输出格式不同：arp -n 输出的结果通常是以表格形式显示的，包括IP地址和对应的MAC地址。而 ip neigh show 输出的结果可能更详细，包括IP地址、MAC地址、接口、状态等信息。&lt;/li&gt;
&lt;li&gt;支持的功能不同：ip neigh show 命令在功能上更加强大，可以显示更多关于邻居的信息，如状态、接口类型等。而 arp -n 命令通常只显示基本的IP地址和MAC地址信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4y3egv3n6av4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2al8hllnncow.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 中执行命令 &lt;code&gt;ping -c 1 HostB 的 IPv4 地址&lt;/code&gt;向 HostB 发送 ICMP 请求报文。收到 ICMP 响应后再次执行命令 &lt;code&gt;arp -n&lt;/code&gt; 或&lt;code&gt;ip neigh show&lt;/code&gt; 查看 HostA的 ARP 缓存表的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释&lt;/strong&gt;
&lt;code&gt;ping -c 1 HostB&lt;/code&gt; 是一个用于向 HostB 发送一个 ICMP 回显请求（ping）的命令。其中，&lt;code&gt;-c 1&lt;/code&gt; 表示只发送一次请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截图&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1ocbv5gka4v4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.nkkv22ucnpc.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 的 ARP 缓存表里面可获得 HostB 的 MAC 地址，记录下来，检查与 HostB 上&lt;code&gt;ifconfig ens5&lt;/code&gt; 命令的执行结果是否一致。&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2yddow5xfbi8.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4vlp8qvkr4e8.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
与 HostB 上&lt;code&gt;ifconfig ens5&lt;/code&gt; 命令的执行结果一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 HostA 中执行命令&lt;code&gt;ping -c 1 202.38.64.246&lt;/code&gt;，收到 ICMP 响应后继续执行命令&lt;code&gt;ip neigh show&lt;/code&gt; 查看 HostA 的 ARP 缓存表，记录结果。简要解释为何无法看到对应于地址 &lt;code&gt;202.38.64.246&lt;/code&gt; 的 ARP 表项而只能得到网关的某网卡的MAC 地址。提示：思考网段(链路)、广播域的概念。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.cmtl9p1qatc.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;strong&gt;解释：&lt;/strong&gt;
这是因为，ARP 协议用于在同一网段内查找主机的 MAC 地址。当 HostA 发送 ICMP 请求到目标地址 202.38.64.246 时，目标地址不在 HostA 的网段内，因此 HostA 需要向网关发送广播 ARP 请求。网关收到广播 ARP 请求后，会将自己的 MAC 地址回复给 HostA。HostA 收到网关的回复后，将网关的 MAC 地址存储在 ARP 缓存表中。因此，HostA 无法看到对应于地址 202.38.64.246 的 ARP 表项。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ip&#34;&gt;IP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分别用命令 route -n 和命令route &amp;ndash;inet6 查看本机的 IPv4 和 IPv6 路由配置，记录所在子网的子网掩码/前缀长度，并于前面 ifconfig 的结果作比较。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释&lt;/strong&gt;
&lt;code&gt;route -n&lt;/code&gt; 是一个用于显示 IPv4 路由表的命令。它会列出系统中当前配置的所有 IPv4 路由项，包括目的网络、网关、子网掩码、接口和路由标志等信息。该命令中的 &lt;code&gt;-n&lt;/code&gt; 选项表示以数字形式显示 IP 地址和子网掩码，而不进行主机名和网络地址的解析。
&lt;code&gt;route --inet6&lt;/code&gt; 是一个用于显示 IPv6 路由表的命令。它会列出系统中当前配置的所有 IPv6 路由项，包括目的网络、网关、前缀长度、接口和路由标志等信息。该命令中的 &lt;code&gt;--inet6&lt;/code&gt; 选项表示只显示 IPv6 路由表的信息。
&lt;strong&gt;截图：&lt;/strong&gt;
![[Pasted image 20231106202048.png]]
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2dh0lur8qhkw.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;	&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2i1qwanl02dc.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
比较两者的结果，可以看到，IPv4 和 IPv6 路由表中的子网掩码/前缀长度均与&lt;code&gt;ifconfig&lt;/code&gt;的结果一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行以下两个命令分别查看系统内核的 IPv4 和 IPv6 的 FORWARD 值，记录下来。简单解释这个值的含义以及为何这个值是这样设定的。提示：思考主机与路由器的区别。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令 1：&lt;code&gt;cat /proc/sys/net/ipv4/ip_forward&lt;/code&gt;
命令 2：&lt;code&gt;cat /proc/sys/net/ipv6/conf/all/forwarding&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释：&lt;/strong&gt;
命令1：&lt;code&gt;cat /proc/sys/net/ipv4/ip_forward&lt;/code&gt; 用于查看 IPv4 转发功能的状态。在 Linux 系统中，如果该值为 1，则表示启用了 IPv4 转发功能，即允许将数据包从一个网络接口转发到另一个网络接口。
命令2：&lt;code&gt;cat /proc/sys/net/ipv6/conf/all/forwarding&lt;/code&gt; 用于查看 IPv6 转发功能的状态。类似于 IPv4，如果该值为 1，则表示启用了 IPv6 转发功能，允许将数据包从一个 IPv6 网络接口转发到另一个 IPv6 网络接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4xdi7ls4epvk.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;strong&gt;解释：&lt;/strong&gt;
可以看到，系统内核的 IPv4 和 IPv6 的 FORWARD 值均为 0。FORWARD 值的含义是是否允许系统转发 IP 数据包。如果 FORWARD 值为 0，则系统不允许转发 IP 数据包。主机和路由器的区别在于，主机只能与同一子网内的主机通信，而路由器可以连接多个子网，并负责将数据包从一个子网转发到另一个子网。由于主机只能与同一子网内的主机通信，因此不需要转发 IP 数据包。因此，主机的 FORWARD 值通常为 0。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tcp&#34;&gt;TCP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 S 的终端 1 中执行 nc -l 1958 侦听1958 端口。。&lt;/strong&gt;
&lt;strong&gt;命令解释：&lt;/strong&gt;
命令 &lt;code&gt;nc -l 1958&lt;/code&gt; 将在 TCP 端口 1958 上监听传入连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nc&lt;/code&gt;：netcat 命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;：监听传入连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1958&lt;/code&gt;：端口号
&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3q5oc9vpy3r4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在HostA 的终端 1 执行nc S 的IPv4 地址 1958&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.edjkfbzgz8w.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.483sotr5iwsg.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在HostA 终端 2 中执行命令netstat -aunt 来观察自己主机上的所有 TCP 与UDP 连接状况，将输出的信息记录下来。请在上述记录的结果中找到对应于上述连接的那条记录并解释这条记录的含义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令解释&lt;/strong&gt;：
执行 &lt;code&gt;netstat -aunt&lt;/code&gt; 命令可以查看当前系统上所有的网络连接和监听端口，以及它们的状态、协议类型、本地地址和远程地址等信息
&lt;strong&gt;截图：&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5gebmmqakyv4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;这条记录表示，HostA 主机的60260端口与 S 主机的 1958 端口建立了 TCP 连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;执行命令 nc S 的 IPv4 地址 100，记录命令执行结果。同样使用 netstat -aunt 来查看本机的连接状况，请判断这次 telnet 连接是否成功建立并简单说明原因。&lt;/strong&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2v2ms0onuqv4.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.53ebne5z02dc.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
原因是 100 端口是 telnet 服务器的默认端口，但 S 主机没有在 100 端口上监听 telnet 连接。因此，HostA 主机无法与 S 主机建立 telnet 连接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;思考题&#34;&gt;思考题&lt;/h1&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;现在有一个网段的 IP 地址和子网掩码分别为202.38.75.0/255.255.255.192，请计算该网段中一共有多少个全局 IPv4 地址可供主机使用，或者说这个网络中有多少真正可分配的 IP 地址？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子网掩码 &lt;code&gt;255.255.255.192&lt;/code&gt; 的二进制表示为 &lt;code&gt;11111111 11111111 11111111 11000000&lt;/code&gt;，其中前 24 位为 1，表示该网段的网络地址部分，后 8 位为 0，表示该网段的广播地址部分。因此，该网段中一共有 &lt;code&gt;2^6 - 2 = 62&lt;/code&gt; 个全局 IPv4 地址可供主机使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实验中执行 ifconfig ens3 查看接口的配置信息时可以观察到一个重要的参数MTU，请问这个值是多少？查询资料说明 MTU 参数的用途。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MTU 是最大传输单元（Maximum Transmission Unit）的缩写，指的是网络层协议所能通过的最大数据包大小。MTU 的值通常与通信接口有关（网络接口卡、串口等）。
MTU 的值通常以字节为单位，常见的默认值是 1500 字节。这是因为以太网是最常见的网络类型，而以太网的标准帧大小为 1518 字节（包括帧头和帧尾），减去以太网帧头的 18 字节，剩下的 1500 字节就是可用于数据传输的最大数据量。
当数据包的大小超过 MTU 值时，网络层协议会将数据包分片，将数据包拆分成多个小数据包，然后分别传输。分片会增加网络层协议的复杂度，并降低网络效率。因此，在实际应用中，需要根据网络环境调整 MTU 参数的值，以保证数据包能够正常传输，并提高网络效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 9. &lt;strong&gt;IPv6 地址长度是 IPv4 地址长度的 4 倍，不过在今后的纯 IPv6 网络环境中路由器的 路由表的规模反而有望减小，请简单解释这是为什么？&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在纯 IPv6 网络环境中，路由器的路由表规模有望减小的原因：
1. IPv6 支持路由重叠，即多个路由器可以指向同一个目标地址。这意味着 IPv6 路由器可以共享路由信息，从而减少路由条目的数量。
2. IPv6 路由表结构更加简化。IPv6 路由表采用了扁平化的结构，每个路由表项只需要存储一个目标地址和下一跳地址即可。而 IPv4 路由表采用了分层的结构，每个路由表项还需要存储一个前缀长度和子网掩码。
3. IPv6没有私有地址和NAT技术,减少了路由表中的条目。
4. IPv6 支持动态路由，即路由器可以自动学习到目标地址的路由信息。这意味着 IPv6 路由器不需要手动配置路由条目，从而减少路由条目的数量。
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一条 TCP 连接需要哪几个参数标识？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一条 TCP 连接需要四个参数来标识，即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本地 IP 地址&lt;/strong&gt;：表示连接的本地主机的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地端口号&lt;/strong&gt;：表示连接的本地主机的端口号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;远程 IP 地址&lt;/strong&gt;：表示连接的远程主机的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;远程端口号&lt;/strong&gt;：表示连接的远程主机的端口号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>信网网络复习提纲</title>
        <link>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://anonymity-0.github.io/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</guid>
        <description>&lt;p&gt;题型：简答题问答题&lt;/p&gt;
&lt;h2 id=&#34;第一章-信息网络概述&#34;&gt;第一章 信息网络概述&lt;/h2&gt;
&lt;h3 id=&#34;交换技术&#34;&gt;﻿交换技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交换、电路交换、分组交换（虚电路交换ATM、数据报交换IP）
&lt;ul&gt;
&lt;li&gt;原理 特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么需要交换&#34;&gt;为什么需要交换？&lt;/h4&gt;
&lt;p&gt;减少网络中节点之间所需的通信线路
增强可扩展性,构建更大规模网络&lt;/p&gt;
&lt;h4 id=&#34;交换的概念&#34;&gt;交换的概念&lt;/h4&gt;
&lt;p&gt;交换操作由一系列过程组成：为输入数据选择输出线路/端口，在输入和输出之间建立连接，通过该连接将数据放到输出线路/端口上
网络中执行交换操作的设备称为交换机。通过一系列交换机的交换操作，在两个通信节点之间建立一条数据传输路径，这条路径由物理或者逻辑上的链路组成&lt;/p&gt;
&lt;h4 id=&#34;电路交换概念&#34;&gt;电路交换：概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;交换传输线路或者时隙，通过交换机在通信双方之间建立一条专用的传输路径&lt;/li&gt;
&lt;li&gt;传输路径建立后，数据像流一样在路径上传输
&lt;ul&gt;
&lt;li&gt;空分交换：传输路径由线路组成&lt;/li&gt;
&lt;li&gt;时分交换：传输路径由每条线路上的固定时隙组成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;电路交换特征&#34;&gt;电路交换：特征&lt;/h4&gt;
&lt;p&gt;网络通信包括三个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（发送）端到（接收）端电路连接建立&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;电路连接拆除
优点：占用固定的线路资源，保证数据传输的速率、延时、可靠性及有序性
缺点：线路资源利用率低，没有有数据传输时也占用线路或者固定时隙；电路连接建立导致延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;电路交换性能&#34;&gt;电路交换：性能&lt;/h4&gt;
&lt;h3 id=&#34;网络体系结构&#34;&gt;网络体系结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿现有网络体系结构面临哪些主要挑战？有哪些主要的解决方案？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第二章-接入网技术&#34;&gt;第二章 接入网技术&lt;/h2&gt;
&lt;h3 id=&#34;接入网架构&#34;&gt;接入网架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿常用接入网络类型有哪些？各自有什么特点？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;80211无线局域网&#34;&gt;﻿﻿802.11无线局域网&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;- 共享、资源利用率高、成本低
- 共享信道的访问控制机制
- 覆盖范围
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;﻿基本CSMA/CA原理、扩展CSMA/CA原理
&lt;ul&gt;
&lt;li&gt;RTS、CTS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;﻿站点切换过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无源光接入网&#34;&gt;无源光接入网&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿PON网络架构、关键技术
ATM的apon
以太网EPON&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第三章ipv6协议&#34;&gt;第三章IPv6协议&lt;/h2&gt;
&lt;h2 id=&#34;natacidr&#34;&gt;NATA\CIDR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿NAT技术原理及其局限性&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;﻿﻿&lt;strong&gt;前缀汇聚、前缀最长匹配规则&lt;/strong&gt;；
&lt;ul&gt;
&lt;li&gt;学会汇聚&lt;/li&gt;
&lt;li&gt;带来问题：路由匹配到多个表项&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;﻿﻿&lt;strong&gt;路由表配置&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使得路由表项最少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv6地址&#34;&gt;﻿﻿IPv6地址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;﻿﻿&lt;strong&gt;链路局部地址&lt;/strong&gt;、全局地址、常用组播地址（全节点、全路由器、&lt;strong&gt;被请求节点&lt;/strong&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址范围&lt;/li&gt;
&lt;li&gt;被请求节点地址是邻居发现机制非常重要的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;﻿﻿IPv6邻居发现机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址解析、地址重复检测、路由器发现&lt;/li&gt;
&lt;li&gt;﻿﻿基于EUI-64地址的IPv6&lt;strong&gt;地址自动配置过程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;﻿﻿IPv4/IPv6过渡机制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿手动&lt;strong&gt;隧道配置&lt;/strong&gt;、自动&lt;strong&gt;隧道&lt;/strong&gt;（ISATAP、6to4）原理和配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;掌握基本的IP网络配置，包括地址、路由等
注意实验&lt;/p&gt;
&lt;h2 id=&#34;第四章ip网络移动管理&#34;&gt;第四章IP网络移动管理&lt;/h2&gt;
&lt;p&gt;重新配置ip地址&lt;/p&gt;
&lt;h3 id=&#34;移动切换&#34;&gt;移动切换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;网络层切换与链路层切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;移动ipv6&#34;&gt;﻿﻿移动IPv6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿基本原理、如何对上层应用屏蔽移动性？&lt;/li&gt;
&lt;li&gt;﻿可以优化的地方？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pmipv6&#34;&gt;﻿﻿PMIPv6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿引入原因及原理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第五章ip网络服务质量&#34;&gt;第五章IP网络服务质量&lt;/h2&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;﻿基本概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务质量度量：延迟、带宽、丢包率&lt;/li&gt;
&lt;li&gt;QoS度量参数；流、行为集合、服务等级协议&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持qos操作的路由器功能&#34;&gt;支持QoS操作的路由器功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;接纳控制&lt;/li&gt;
&lt;li&gt;流量调节&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;两个服务质量模型&#34;&gt;两个服务质量模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;﻿综合服务原理，综合服务类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;﻿区分服务原理，EF PHB和AF PHB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第六章-路由和交換&#34;&gt;第六章 路由和交換&lt;/h2&gt;
&lt;h3 id=&#34;路由器功能与架构&#34;&gt;路由器功能与架构&lt;/h3&gt;
&lt;h3 id=&#34;路由查找算法&#34;&gt;﻿路由查找算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿Binary Trie、Leaf Pushing、LC Trie （Multi-Bit Trie, PathCompression）、&lt;strong&gt;Tree Bitmap&lt;/strong&gt;的原理和采用的数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;交换结构&#34;&gt;﻿﻿交换结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;﻿﻿路由器吞吐量和加速、内部阻塞和输出端口竞争的概念&lt;/li&gt;
&lt;li&gt;﻿﻿3代交换结构&lt;/li&gt;
&lt;li&gt;﻿﻿Banyan交换结构&lt;/li&gt;
&lt;li&gt;﻿﻿输入队列与输出队列&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
